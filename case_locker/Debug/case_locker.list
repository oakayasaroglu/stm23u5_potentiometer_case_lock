
case_locker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6fc  08000234  08000234  00010234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e3  0800a930  0800a930  0001a930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ab14  0800ab14  0001ab14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ab1c  0800ab1c  0001ab1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ab20  0800ab20  0001ab20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  0800ab24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000659  20000070  0800ab94  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000607  200006c9  0800ab94  000206c9  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   00019a2c  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003282  00000000  00000000  00039ad2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000011c0  00000000  00000000  0003cd58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001078  00000000  00000000  0003df18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037312  00000000  00000000  0003ef90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000182b0  00000000  00000000  000762a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015ae5c  00000000  00000000  0008e552  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001e93ae  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004dec  00000000  00000000  001e9400  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000234 <__do_global_dtors_aux>:
 8000234:	b510      	push	{r4, lr}
 8000236:	4c05      	ldr	r4, [pc, #20]	; (800024c <__do_global_dtors_aux+0x18>)
 8000238:	7823      	ldrb	r3, [r4, #0]
 800023a:	b933      	cbnz	r3, 800024a <__do_global_dtors_aux+0x16>
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <__do_global_dtors_aux+0x1c>)
 800023e:	b113      	cbz	r3, 8000246 <__do_global_dtors_aux+0x12>
 8000240:	4804      	ldr	r0, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x20>)
 8000242:	e000      	b.n	8000246 <__do_global_dtors_aux+0x12>
 8000244:	bf00      	nop
 8000246:	2301      	movs	r3, #1
 8000248:	7023      	strb	r3, [r4, #0]
 800024a:	bd10      	pop	{r4, pc}
 800024c:	20000070 	.word	0x20000070
 8000250:	00000000 	.word	0x00000000
 8000254:	0800a918 	.word	0x0800a918

08000258 <frame_dummy>:
 8000258:	b508      	push	{r3, lr}
 800025a:	4b03      	ldr	r3, [pc, #12]	; (8000268 <frame_dummy+0x10>)
 800025c:	b11b      	cbz	r3, 8000266 <frame_dummy+0xe>
 800025e:	4903      	ldr	r1, [pc, #12]	; (800026c <frame_dummy+0x14>)
 8000260:	4803      	ldr	r0, [pc, #12]	; (8000270 <frame_dummy+0x18>)
 8000262:	e000      	b.n	8000266 <frame_dummy+0xe>
 8000264:	bf00      	nop
 8000266:	bd08      	pop	{r3, pc}
 8000268:	00000000 	.word	0x00000000
 800026c:	20000074 	.word	0x20000074
 8000270:	0800a918 	.word	0x0800a918

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000284:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000288:	f000 b982 	b.w	8000590 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002a8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80002aa:	4604      	mov	r4, r0
 80002ac:	460f      	mov	r7, r1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d148      	bne.n	8000344 <__udivmoddi4+0xa0>
 80002b2:	428a      	cmp	r2, r1
 80002b4:	4694      	mov	ip, r2
 80002b6:	d961      	bls.n	800037c <__udivmoddi4+0xd8>
 80002b8:	fab2 f382 	clz	r3, r2
 80002bc:	b143      	cbz	r3, 80002d0 <__udivmoddi4+0x2c>
 80002be:	f1c3 0120 	rsb	r1, r3, #32
 80002c2:	409f      	lsls	r7, r3
 80002c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c8:	409c      	lsls	r4, r3
 80002ca:	fa20 f101 	lsr.w	r1, r0, r1
 80002ce:	430f      	orrs	r7, r1
 80002d0:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80002d4:	fa1f fe8c 	uxth.w	lr, ip
 80002d8:	0c22      	lsrs	r2, r4, #16
 80002da:	fbb7 f6f1 	udiv	r6, r7, r1
 80002de:	fb01 7716 	mls	r7, r1, r6, r7
 80002e2:	fb06 f00e 	mul.w	r0, r6, lr
 80002e6:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ea:	4290      	cmp	r0, r2
 80002ec:	d908      	bls.n	8000300 <__udivmoddi4+0x5c>
 80002ee:	eb1c 0202 	adds.w	r2, ip, r2
 80002f2:	f106 37ff 	add.w	r7, r6, #4294967295	; 0xffffffff
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0x5a>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f200 8137 	bhi.w	800056c <__udivmoddi4+0x2c8>
 80002fe:	463e      	mov	r6, r7
 8000300:	1a12      	subs	r2, r2, r0
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb2 f0f1 	udiv	r0, r2, r1
 8000308:	fb01 2210 	mls	r2, r1, r0, r2
 800030c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000310:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000314:	45a6      	cmp	lr, r4
 8000316:	d908      	bls.n	800032a <__udivmoddi4+0x86>
 8000318:	eb1c 0404 	adds.w	r4, ip, r4
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000320:	d202      	bcs.n	8000328 <__udivmoddi4+0x84>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f200 811c 	bhi.w	8000560 <__udivmoddi4+0x2bc>
 8000328:	4610      	mov	r0, r2
 800032a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800032e:	eba4 040e 	sub.w	r4, r4, lr
 8000332:	2600      	movs	r6, #0
 8000334:	b11d      	cbz	r5, 800033e <__udivmoddi4+0x9a>
 8000336:	40dc      	lsrs	r4, r3
 8000338:	2300      	movs	r3, #0
 800033a:	e9c5 4300 	strd	r4, r3, [r5]
 800033e:	4631      	mov	r1, r6
 8000340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000344:	428b      	cmp	r3, r1
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0xb8>
 8000348:	2d00      	cmp	r5, #0
 800034a:	f000 80fd 	beq.w	8000548 <__udivmoddi4+0x2a4>
 800034e:	2600      	movs	r6, #0
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	4630      	mov	r0, r6
 8000356:	4631      	mov	r1, r6
 8000358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800035c:	fab3 f683 	clz	r6, r3
 8000360:	2e00      	cmp	r6, #0
 8000362:	d14b      	bne.n	80003fc <__udivmoddi4+0x158>
 8000364:	428b      	cmp	r3, r1
 8000366:	f0c0 80f2 	bcc.w	800054e <__udivmoddi4+0x2aa>
 800036a:	4282      	cmp	r2, r0
 800036c:	f240 80ef 	bls.w	800054e <__udivmoddi4+0x2aa>
 8000370:	4630      	mov	r0, r6
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e3      	beq.n	800033e <__udivmoddi4+0x9a>
 8000376:	e9c5 4700 	strd	r4, r7, [r5]
 800037a:	e7e0      	b.n	800033e <__udivmoddi4+0x9a>
 800037c:	b902      	cbnz	r2, 8000380 <__udivmoddi4+0xdc>
 800037e:	deff      	udf	#255	; 0xff
 8000380:	fab2 f382 	clz	r3, r2
 8000384:	2b00      	cmp	r3, #0
 8000386:	f040 809d 	bne.w	80004c4 <__udivmoddi4+0x220>
 800038a:	1a89      	subs	r1, r1, r2
 800038c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000390:	b297      	uxth	r7, r2
 8000392:	2601      	movs	r6, #1
 8000394:	0c20      	lsrs	r0, r4, #16
 8000396:	fbb1 f2fe 	udiv	r2, r1, lr
 800039a:	fb0e 1112 	mls	r1, lr, r2, r1
 800039e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a2:	fb07 f002 	mul.w	r0, r7, r2
 80003a6:	4288      	cmp	r0, r1
 80003a8:	d90f      	bls.n	80003ca <__udivmoddi4+0x126>
 80003aa:	eb1c 0101 	adds.w	r1, ip, r1
 80003ae:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
 80003b2:	bf2c      	ite	cs
 80003b4:	f04f 0901 	movcs.w	r9, #1
 80003b8:	f04f 0900 	movcc.w	r9, #0
 80003bc:	4288      	cmp	r0, r1
 80003be:	d903      	bls.n	80003c8 <__udivmoddi4+0x124>
 80003c0:	f1b9 0f00 	cmp.w	r9, #0
 80003c4:	f000 80cf 	beq.w	8000566 <__udivmoddi4+0x2c2>
 80003c8:	4642      	mov	r2, r8
 80003ca:	1a09      	subs	r1, r1, r0
 80003cc:	b2a4      	uxth	r4, r4
 80003ce:	fbb1 f0fe 	udiv	r0, r1, lr
 80003d2:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d6:	fb00 f707 	mul.w	r7, r0, r7
 80003da:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003de:	42a7      	cmp	r7, r4
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x150>
 80003e2:	eb1c 0404 	adds.w	r4, ip, r4
 80003e6:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x14e>
 80003ec:	42a7      	cmp	r7, r4
 80003ee:	f200 80b4 	bhi.w	800055a <__udivmoddi4+0x2b6>
 80003f2:	4608      	mov	r0, r1
 80003f4:	1be4      	subs	r4, r4, r7
 80003f6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003fa:	e79b      	b.n	8000334 <__udivmoddi4+0x90>
 80003fc:	f1c6 0720 	rsb	r7, r6, #32
 8000400:	40b3      	lsls	r3, r6
 8000402:	fa01 f406 	lsl.w	r4, r1, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	40f9      	lsrs	r1, r7
 800040c:	40b2      	lsls	r2, r6
 800040e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000412:	fa20 f307 	lsr.w	r3, r0, r7
 8000416:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041a:	431c      	orrs	r4, r3
 800041c:	fa1f fe8c 	uxth.w	lr, ip
 8000420:	fa00 f306 	lsl.w	r3, r0, r6
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f8f9 	udiv	r8, r1, r9
 800042a:	fb09 1118 	mls	r1, r9, r8, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb08 f00e 	mul.w	r0, r8, lr
 8000436:	4288      	cmp	r0, r1
 8000438:	d90f      	bls.n	800045a <__udivmoddi4+0x1b6>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000442:	bf2c      	ite	cs
 8000444:	f04f 0b01 	movcs.w	fp, #1
 8000448:	f04f 0b00 	movcc.w	fp, #0
 800044c:	4288      	cmp	r0, r1
 800044e:	d903      	bls.n	8000458 <__udivmoddi4+0x1b4>
 8000450:	f1bb 0f00 	cmp.w	fp, #0
 8000454:	f000 808d 	beq.w	8000572 <__udivmoddi4+0x2ce>
 8000458:	46d0      	mov	r8, sl
 800045a:	1a09      	subs	r1, r1, r0
 800045c:	b2a4      	uxth	r4, r4
 800045e:	fbb1 f0f9 	udiv	r0, r1, r9
 8000462:	fb09 1110 	mls	r1, r9, r0, r1
 8000466:	fb00 fe0e 	mul.w	lr, r0, lr
 800046a:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800046e:	458e      	cmp	lr, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1de>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800047a:	d201      	bcs.n	8000480 <__udivmoddi4+0x1dc>
 800047c:	458e      	cmp	lr, r1
 800047e:	d87f      	bhi.n	8000580 <__udivmoddi4+0x2dc>
 8000480:	4620      	mov	r0, r4
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	eba1 010e 	sub.w	r1, r1, lr
 800048a:	fba0 9802 	umull	r9, r8, r0, r2
 800048e:	4541      	cmp	r1, r8
 8000490:	464c      	mov	r4, r9
 8000492:	46c6      	mov	lr, r8
 8000494:	d302      	bcc.n	800049c <__udivmoddi4+0x1f8>
 8000496:	d106      	bne.n	80004a6 <__udivmoddi4+0x202>
 8000498:	454b      	cmp	r3, r9
 800049a:	d204      	bcs.n	80004a6 <__udivmoddi4+0x202>
 800049c:	3801      	subs	r0, #1
 800049e:	ebb9 0402 	subs.w	r4, r9, r2
 80004a2:	eb68 0e0c 	sbc.w	lr, r8, ip
 80004a6:	2d00      	cmp	r5, #0
 80004a8:	d070      	beq.n	800058c <__udivmoddi4+0x2e8>
 80004aa:	1b1a      	subs	r2, r3, r4
 80004ac:	eb61 010e 	sbc.w	r1, r1, lr
 80004b0:	fa22 f306 	lsr.w	r3, r2, r6
 80004b4:	fa01 f707 	lsl.w	r7, r1, r7
 80004b8:	40f1      	lsrs	r1, r6
 80004ba:	2600      	movs	r6, #0
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	e73c      	b.n	800033e <__udivmoddi4+0x9a>
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	f1c3 0020 	rsb	r0, r3, #32
 80004cc:	fa01 f203 	lsl.w	r2, r1, r3
 80004d0:	fa21 f600 	lsr.w	r6, r1, r0
 80004d4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004d8:	fa24 f100 	lsr.w	r1, r4, r0
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	409c      	lsls	r4, r3
 80004e2:	4311      	orrs	r1, r2
 80004e4:	fbb6 f0fe 	udiv	r0, r6, lr
 80004e8:	0c0a      	lsrs	r2, r1, #16
 80004ea:	fb0e 6610 	mls	r6, lr, r0, r6
 80004ee:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80004f2:	fb00 f607 	mul.w	r6, r0, r7
 80004f6:	4296      	cmp	r6, r2
 80004f8:	d90e      	bls.n	8000518 <__udivmoddi4+0x274>
 80004fa:	eb1c 0202 	adds.w	r2, ip, r2
 80004fe:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000502:	bf2c      	ite	cs
 8000504:	f04f 0901 	movcs.w	r9, #1
 8000508:	f04f 0900 	movcc.w	r9, #0
 800050c:	4296      	cmp	r6, r2
 800050e:	d902      	bls.n	8000516 <__udivmoddi4+0x272>
 8000510:	f1b9 0f00 	cmp.w	r9, #0
 8000514:	d031      	beq.n	800057a <__udivmoddi4+0x2d6>
 8000516:	4640      	mov	r0, r8
 8000518:	1b92      	subs	r2, r2, r6
 800051a:	b289      	uxth	r1, r1
 800051c:	fbb2 f6fe 	udiv	r6, r2, lr
 8000520:	fb0e 2216 	mls	r2, lr, r6, r2
 8000524:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000528:	fb06 f207 	mul.w	r2, r6, r7
 800052c:	428a      	cmp	r2, r1
 800052e:	d907      	bls.n	8000540 <__udivmoddi4+0x29c>
 8000530:	eb1c 0101 	adds.w	r1, ip, r1
 8000534:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000538:	d201      	bcs.n	800053e <__udivmoddi4+0x29a>
 800053a:	428a      	cmp	r2, r1
 800053c:	d823      	bhi.n	8000586 <__udivmoddi4+0x2e2>
 800053e:	4646      	mov	r6, r8
 8000540:	1a89      	subs	r1, r1, r2
 8000542:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000546:	e725      	b.n	8000394 <__udivmoddi4+0xf0>
 8000548:	462e      	mov	r6, r5
 800054a:	4628      	mov	r0, r5
 800054c:	e6f7      	b.n	800033e <__udivmoddi4+0x9a>
 800054e:	1a84      	subs	r4, r0, r2
 8000550:	eb61 0303 	sbc.w	r3, r1, r3
 8000554:	2001      	movs	r0, #1
 8000556:	461f      	mov	r7, r3
 8000558:	e70b      	b.n	8000372 <__udivmoddi4+0xce>
 800055a:	4464      	add	r4, ip
 800055c:	3802      	subs	r0, #2
 800055e:	e749      	b.n	80003f4 <__udivmoddi4+0x150>
 8000560:	4464      	add	r4, ip
 8000562:	3802      	subs	r0, #2
 8000564:	e6e1      	b.n	800032a <__udivmoddi4+0x86>
 8000566:	3a02      	subs	r2, #2
 8000568:	4461      	add	r1, ip
 800056a:	e72e      	b.n	80003ca <__udivmoddi4+0x126>
 800056c:	3e02      	subs	r6, #2
 800056e:	4462      	add	r2, ip
 8000570:	e6c6      	b.n	8000300 <__udivmoddi4+0x5c>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	e76f      	b.n	800045a <__udivmoddi4+0x1b6>
 800057a:	3802      	subs	r0, #2
 800057c:	4462      	add	r2, ip
 800057e:	e7cb      	b.n	8000518 <__udivmoddi4+0x274>
 8000580:	3802      	subs	r0, #2
 8000582:	4461      	add	r1, ip
 8000584:	e77d      	b.n	8000482 <__udivmoddi4+0x1de>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	e7d9      	b.n	8000540 <__udivmoddi4+0x29c>
 800058c:	462e      	mov	r6, r5
 800058e:	e6d6      	b.n	800033e <__udivmoddi4+0x9a>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <MX_ADC4_Init>:

ADC_HandleTypeDef hadc4;

/* ADC4 init function */
void MX_ADC4_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b088      	sub	sp, #32
 8000598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800059a:	463b      	mov	r3, r7
 800059c:	2220      	movs	r2, #32
 800059e:	2100      	movs	r1, #0
 80005a0:	4618      	mov	r0, r3
 80005a2:	f009 fd33 	bl	800a00c <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 80005a6:	4b2e      	ldr	r3, [pc, #184]	; (8000660 <MX_ADC4_Init+0xcc>)
 80005a8:	4a2e      	ldr	r2, [pc, #184]	; (8000664 <MX_ADC4_Init+0xd0>)
 80005aa:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80005ac:	4b2c      	ldr	r3, [pc, #176]	; (8000660 <MX_ADC4_Init+0xcc>)
 80005ae:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80005b2:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_6B;
 80005b4:	4b2a      	ldr	r3, [pc, #168]	; (8000660 <MX_ADC4_Init+0xcc>)
 80005b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80005ba:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005bc:	4b28      	ldr	r3, [pc, #160]	; (8000660 <MX_ADC4_Init+0xcc>)
 80005be:	2200      	movs	r2, #0
 80005c0:	615a      	str	r2, [r3, #20]
  hadc4.Init.ScanConvMode = ADC4_SCAN_DISABLE;
 80005c2:	4b27      	ldr	r3, [pc, #156]	; (8000660 <MX_ADC4_Init+0xcc>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	611a      	str	r2, [r3, #16]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005c8:	4b25      	ldr	r3, [pc, #148]	; (8000660 <MX_ADC4_Init+0xcc>)
 80005ca:	2204      	movs	r2, #4
 80005cc:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoPowerOff = ADC_LOW_POWER_NONE;
 80005ce:	4b24      	ldr	r3, [pc, #144]	; (8000660 <MX_ADC4_Init+0xcc>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	621a      	str	r2, [r3, #32]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80005d4:	4b22      	ldr	r3, [pc, #136]	; (8000660 <MX_ADC4_Init+0xcc>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 80005da:	4b21      	ldr	r3, [pc, #132]	; (8000660 <MX_ADC4_Init+0xcc>)
 80005dc:	2201      	movs	r2, #1
 80005de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.NbrOfConversion = 1;
 80005e2:	4b1f      	ldr	r3, [pc, #124]	; (8000660 <MX_ADC4_Init+0xcc>)
 80005e4:	2201      	movs	r2, #1
 80005e6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005e8:	4b1d      	ldr	r3, [pc, #116]	; (8000660 <MX_ADC4_Init+0xcc>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	635a      	str	r2, [r3, #52]	; 0x34
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005ee:	4b1c      	ldr	r3, [pc, #112]	; (8000660 <MX_ADC4_Init+0xcc>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	639a      	str	r2, [r3, #56]	; 0x38
  hadc4.Init.DMAContinuousRequests = DISABLE;
 80005f4:	4b1a      	ldr	r3, [pc, #104]	; (8000660 <MX_ADC4_Init+0xcc>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc4.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 80005fc:	4b18      	ldr	r3, [pc, #96]	; (8000660 <MX_ADC4_Init+0xcc>)
 80005fe:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000602:	669a      	str	r2, [r3, #104]	; 0x68
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000604:	4b16      	ldr	r3, [pc, #88]	; (8000660 <MX_ADC4_Init+0xcc>)
 8000606:	2200      	movs	r2, #0
 8000608:	645a      	str	r2, [r3, #68]	; 0x44
  hadc4.Init.SamplingTimeCommon1 = ADC4_SAMPLETIME_1CYCLE_5;
 800060a:	4b15      	ldr	r3, [pc, #84]	; (8000660 <MX_ADC4_Init+0xcc>)
 800060c:	2200      	movs	r2, #0
 800060e:	649a      	str	r2, [r3, #72]	; 0x48
  hadc4.Init.SamplingTimeCommon2 = ADC4_SAMPLETIME_1CYCLE_5;
 8000610:	4b13      	ldr	r3, [pc, #76]	; (8000660 <MX_ADC4_Init+0xcc>)
 8000612:	2200      	movs	r2, #0
 8000614:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc4.Init.OversamplingMode = DISABLE;
 8000616:	4b12      	ldr	r3, [pc, #72]	; (8000660 <MX_ADC4_Init+0xcc>)
 8000618:	2200      	movs	r2, #0
 800061a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 800061e:	4810      	ldr	r0, [pc, #64]	; (8000660 <MX_ADC4_Init+0xcc>)
 8000620:	f001 fa06 	bl	8001a30 <HAL_ADC_Init>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <MX_ADC4_Init+0x9a>
  {
    Error_Handler();
 800062a:	f000 fb99 	bl	8000d60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800062e:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <MX_ADC4_Init+0xd4>)
 8000630:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_REGULAR_RANK_1;
 8000632:	2300      	movs	r3, #0
 8000634:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC4_SAMPLINGTIME_COMMON_1;
 8000636:	2300      	movs	r3, #0
 8000638:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800063a:	2304      	movs	r3, #4
 800063c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800063e:	2300      	movs	r3, #0
 8000640:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000642:	463b      	mov	r3, r7
 8000644:	4619      	mov	r1, r3
 8000646:	4806      	ldr	r0, [pc, #24]	; (8000660 <MX_ADC4_Init+0xcc>)
 8000648:	f001 fe54 	bl	80022f4 <HAL_ADC_ConfigChannel>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_ADC4_Init+0xc2>
  {
    Error_Handler();
 8000652:	f000 fb85 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000656:	bf00      	nop
 8000658:	3720      	adds	r7, #32
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	2000008c 	.word	0x2000008c
 8000664:	46021000 	.word	0x46021000
 8000668:	04000002 	.word	0x04000002

0800066c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b0bc      	sub	sp, #240	; 0xf0
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000674:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000684:	f107 0310 	add.w	r3, r7, #16
 8000688:	22c8      	movs	r2, #200	; 0xc8
 800068a:	2100      	movs	r1, #0
 800068c:	4618      	mov	r0, r3
 800068e:	f009 fcbd 	bl	800a00c <memset>
  if(adcHandle->Instance==ADC4)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	4a24      	ldr	r2, [pc, #144]	; (8000728 <HAL_ADC_MspInit+0xbc>)
 8000698:	4293      	cmp	r3, r2
 800069a:	d140      	bne.n	800071e <HAL_ADC_MspInit+0xb2>

  /* USER CODE END ADC4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 800069c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80006a0:	f04f 0300 	mov.w	r3, #0
 80006a4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 80006a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80006ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006b0:	f107 0310 	add.w	r3, r7, #16
 80006b4:	4618      	mov	r0, r3
 80006b6:	f005 fb3f 	bl	8005d38 <HAL_RCCEx_PeriphCLKConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 80006c0:	f000 fb4e 	bl	8000d60 <Error_Handler>
    }

    /* ADC4 clock enable */
    __HAL_RCC_ADC4_CLK_ENABLE();
 80006c4:	4b19      	ldr	r3, [pc, #100]	; (800072c <HAL_ADC_MspInit+0xc0>)
 80006c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80006ca:	4a18      	ldr	r2, [pc, #96]	; (800072c <HAL_ADC_MspInit+0xc0>)
 80006cc:	f043 0320 	orr.w	r3, r3, #32
 80006d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80006d4:	4b15      	ldr	r3, [pc, #84]	; (800072c <HAL_ADC_MspInit+0xc0>)
 80006d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80006da:	f003 0320 	and.w	r3, r3, #32
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e2:	4b12      	ldr	r3, [pc, #72]	; (800072c <HAL_ADC_MspInit+0xc0>)
 80006e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80006e8:	4a10      	ldr	r2, [pc, #64]	; (800072c <HAL_ADC_MspInit+0xc0>)
 80006ea:	f043 0304 	orr.w	r3, r3, #4
 80006ee:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <HAL_ADC_MspInit+0xc0>)
 80006f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80006f8:	f003 0304 	and.w	r3, r3, #4
 80006fc:	60bb      	str	r3, [r7, #8]
 80006fe:	68bb      	ldr	r3, [r7, #8]
    /**ADC4 GPIO Configuration
    PC0     ------> ADC4_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000700:	2301      	movs	r3, #1
 8000702:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000706:	2303      	movs	r3, #3
 8000708:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	2300      	movs	r3, #0
 800070e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000712:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000716:	4619      	mov	r1, r3
 8000718:	4805      	ldr	r0, [pc, #20]	; (8000730 <HAL_ADC_MspInit+0xc4>)
 800071a:	f002 fcd5 	bl	80030c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }
}
 800071e:	bf00      	nop
 8000720:	37f0      	adds	r7, #240	; 0xf0
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	46021000 	.word	0x46021000
 800072c:	46020c00 	.word	0x46020c00
 8000730:	42020800 	.word	0x42020800

08000734 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08a      	sub	sp, #40	; 0x28
 8000738:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073a:	f107 0314 	add.w	r3, r7, #20
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
 8000748:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074a:	4b58      	ldr	r3, [pc, #352]	; (80008ac <MX_GPIO_Init+0x178>)
 800074c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000750:	4a56      	ldr	r2, [pc, #344]	; (80008ac <MX_GPIO_Init+0x178>)
 8000752:	f043 0304 	orr.w	r3, r3, #4
 8000756:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800075a:	4b54      	ldr	r3, [pc, #336]	; (80008ac <MX_GPIO_Init+0x178>)
 800075c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000760:	f003 0304 	and.w	r3, r3, #4
 8000764:	613b      	str	r3, [r7, #16]
 8000766:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000768:	4b50      	ldr	r3, [pc, #320]	; (80008ac <MX_GPIO_Init+0x178>)
 800076a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800076e:	4a4f      	ldr	r2, [pc, #316]	; (80008ac <MX_GPIO_Init+0x178>)
 8000770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000774:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000778:	4b4c      	ldr	r3, [pc, #304]	; (80008ac <MX_GPIO_Init+0x178>)
 800077a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800077e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000786:	4b49      	ldr	r3, [pc, #292]	; (80008ac <MX_GPIO_Init+0x178>)
 8000788:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800078c:	4a47      	ldr	r2, [pc, #284]	; (80008ac <MX_GPIO_Init+0x178>)
 800078e:	f043 0302 	orr.w	r3, r3, #2
 8000792:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000796:	4b45      	ldr	r3, [pc, #276]	; (80008ac <MX_GPIO_Init+0x178>)
 8000798:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800079c:	f003 0302 	and.w	r3, r3, #2
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007a4:	4b41      	ldr	r3, [pc, #260]	; (80008ac <MX_GPIO_Init+0x178>)
 80007a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007aa:	4a40      	ldr	r2, [pc, #256]	; (80008ac <MX_GPIO_Init+0x178>)
 80007ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007b0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80007b4:	4b3d      	ldr	r3, [pc, #244]	; (80008ac <MX_GPIO_Init+0x178>)
 80007b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	4b3a      	ldr	r3, [pc, #232]	; (80008ac <MX_GPIO_Init+0x178>)
 80007c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007c8:	4a38      	ldr	r2, [pc, #224]	; (80008ac <MX_GPIO_Init+0x178>)
 80007ca:	f043 0301 	orr.w	r3, r3, #1
 80007ce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80007d2:	4b36      	ldr	r3, [pc, #216]	; (80008ac <MX_GPIO_Init+0x178>)
 80007d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007d8:	f003 0301 	and.w	r3, r3, #1
 80007dc:	603b      	str	r3, [r7, #0]
 80007de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80007e0:	2200      	movs	r2, #0
 80007e2:	2104      	movs	r1, #4
 80007e4:	4832      	ldr	r0, [pc, #200]	; (80008b0 <MX_GPIO_Init+0x17c>)
 80007e6:	f002 fe5f 	bl	80034a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2180      	movs	r1, #128	; 0x80
 80007ee:	4831      	ldr	r0, [pc, #196]	; (80008b4 <MX_GPIO_Init+0x180>)
 80007f0:	f002 fe5a 	bl	80034a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBn_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 80007f4:	2200      	movs	r2, #0
 80007f6:	21a0      	movs	r1, #160	; 0xa0
 80007f8:	482f      	ldr	r0, [pc, #188]	; (80008b8 <MX_GPIO_Init+0x184>)
 80007fa:	f002 fe55 	bl	80034a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80007fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000804:	4b2d      	ldr	r3, [pc, #180]	; (80008bc <MX_GPIO_Init+0x188>)
 8000806:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	4619      	mov	r1, r3
 8000812:	4828      	ldr	r0, [pc, #160]	; (80008b4 <MX_GPIO_Init+0x180>)
 8000814:	f002 fc58 	bl	80030c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000818:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800081c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800081e:	2300      	movs	r3, #0
 8000820:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000826:	f107 0314 	add.w	r3, r7, #20
 800082a:	4619      	mov	r1, r3
 800082c:	4822      	ldr	r0, [pc, #136]	; (80008b8 <MX_GPIO_Init+0x184>)
 800082e:	f002 fc4b 	bl	80030c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000832:	2304      	movs	r3, #4
 8000834:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000836:	2301      	movs	r3, #1
 8000838:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800083a:	2301      	movs	r3, #1
 800083c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800083e:	2302      	movs	r3, #2
 8000840:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000842:	f107 0314 	add.w	r3, r7, #20
 8000846:	4619      	mov	r1, r3
 8000848:	4819      	ldr	r0, [pc, #100]	; (80008b0 <MX_GPIO_Init+0x17c>)
 800084a:	f002 fc3d 	bl	80030c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800084e:	2380      	movs	r3, #128	; 0x80
 8000850:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000852:	2301      	movs	r3, #1
 8000854:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000856:	2301      	movs	r3, #1
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800085a:	2302      	movs	r3, #2
 800085c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 0314 	add.w	r3, r7, #20
 8000862:	4619      	mov	r1, r3
 8000864:	4813      	ldr	r0, [pc, #76]	; (80008b4 <MX_GPIO_Init+0x180>)
 8000866:	f002 fc2f 	bl	80030c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin;
 800086a:	2320      	movs	r3, #32
 800086c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086e:	2301      	movs	r3, #1
 8000870:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000876:	2300      	movs	r3, #0
 8000878:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(UCPD_DBn_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 0314 	add.w	r3, r7, #20
 800087e:	4619      	mov	r1, r3
 8000880:	480d      	ldr	r0, [pc, #52]	; (80008b8 <MX_GPIO_Init+0x184>)
 8000882:	f002 fc21 	bl	80030c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8000886:	2380      	movs	r3, #128	; 0x80
 8000888:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088a:	2301      	movs	r3, #1
 800088c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800088e:	2301      	movs	r3, #1
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000892:	2302      	movs	r3, #2
 8000894:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 0314 	add.w	r3, r7, #20
 800089a:	4619      	mov	r1, r3
 800089c:	4806      	ldr	r0, [pc, #24]	; (80008b8 <MX_GPIO_Init+0x184>)
 800089e:	f002 fc13 	bl	80030c8 <HAL_GPIO_Init>

}
 80008a2:	bf00      	nop
 80008a4:	3728      	adds	r7, #40	; 0x28
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	46020c00 	.word	0x46020c00
 80008b0:	42021800 	.word	0x42021800
 80008b4:	42020800 	.word	0x42020800
 80008b8:	42020400 	.word	0x42020400
 80008bc:	10210000 	.word	0x10210000

080008c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c0:	b5b0      	push	{r4, r5, r7, lr}
 80008c2:	b0ae      	sub	sp, #184	; 0xb8
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	_Bool written = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

	uint16_t adc_value;
	uint16_t password;
	char string_adc_value[8];

	uint16_t case_status=2;
 80008cc:	2302      	movs	r3, #2
 80008ce:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
	uint16_t status=2;
 80008d2:	2302      	movs	r3, #2
 80008d4:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008d8:	f000 fd12 	bl	8001300 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008dc:	f000 f95e 	bl	8000b9c <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80008e0:	f000 f9c0 	bl	8000c64 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008e4:	f7ff ff26 	bl	8000734 <MX_GPIO_Init>
  MX_UCPD1_Init();
 80008e8:	f000 fb36 	bl	8000f58 <MX_UCPD1_Init>
  MX_USART1_UART_Init();
 80008ec:	f000 fb6a 	bl	8000fc4 <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80008f0:	f000 fc1c 	bl	800112c <MX_USB_OTG_FS_PCD_Init>
  MX_ADC4_Init();
 80008f4:	f7ff fe4e 	bl	8000594 <MX_ADC4_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(10);
 80008f8:	200a      	movs	r0, #10
 80008fa:	f000 fd85 	bl	8001408 <HAL_Delay>
  HAL_PWREx_EnableVddA();
 80008fe:	f003 ff5f 	bl	80047c0 <HAL_PWREx_EnableVddA>
  HAL_ADC_Start(&hadc4);
 8000902:	489d      	ldr	r0, [pc, #628]	; (8000b78 <main+0x2b8>)
 8000904:	f001 fb8e 	bl	8002024 <HAL_ADC_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_Delay(10);
 8000908:	200a      	movs	r0, #10
 800090a:	f000 fd7d 	bl	8001408 <HAL_Delay>

	  adc_value = read_ADC();
 800090e:	f000 fa17 	bl	8000d40 <read_ADC>
 8000912:	4603      	mov	r3, r0
 8000914:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae

	  switch(status){
 8000918:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 800091c:	2b02      	cmp	r3, #2
 800091e:	f000 80dd 	beq.w	8000adc <main+0x21c>
 8000922:	2b02      	cmp	r3, #2
 8000924:	f300 810e 	bgt.w	8000b44 <main+0x284>
 8000928:	2b00      	cmp	r3, #0
 800092a:	d002      	beq.n	8000932 <main+0x72>
 800092c:	2b01      	cmp	r3, #1
 800092e:	d060      	beq.n	80009f2 <main+0x132>
 8000930:	e108      	b.n	8000b44 <main+0x284>
	  	  case 0:	// SET A PASSWORD PHASE

	  		  all_leds(); 	// all leds are open
 8000932:	f000 f9d9 	bl	8000ce8 <all_leds>

	  		// send message on UART for one time
	  		  if(!written){
 8000936:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800093a:	f083 0301 	eor.w	r3, r3, #1
 800093e:	b2db      	uxtb	r3, r3
 8000940:	2b00      	cmp	r3, #0
 8000942:	d013      	beq.n	800096c <main+0xac>

	  			  char msg []= "\r\n Set: \r\n";
 8000944:	4a8d      	ldr	r2, [pc, #564]	; (8000b7c <main+0x2bc>)
 8000946:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800094a:	ca07      	ldmia	r2, {r0, r1, r2}
 800094c:	c303      	stmia	r3!, {r0, r1}
 800094e:	801a      	strh	r2, [r3, #0]
 8000950:	3302      	adds	r3, #2
 8000952:	0c12      	lsrs	r2, r2, #16
 8000954:	701a      	strb	r2, [r3, #0]
				  HAL_UART_Transmit(&huart1,(uint8_t *)&msg, sizeof(msg), 0xFFFF);
 8000956:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800095a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800095e:	220b      	movs	r2, #11
 8000960:	4887      	ldr	r0, [pc, #540]	; (8000b80 <main+0x2c0>)
 8000962:	f007 fe83 	bl	800866c <HAL_UART_Transmit>

				  written = 1; 	// set written flag
 8000966:	2301      	movs	r3, #1
 8000968:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
	  		  }



	  		  if(read_button()){	// if the button pressed
 800096c:	f000 f9d6 	bl	8000d1c <read_button>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d039      	beq.n	80009ea <main+0x12a>

				  // send ADC VALUE on UART
				  sprintf(string_adc_value, "\r\n %hu \r\n", adc_value);
 8000976:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 800097a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800097e:	4981      	ldr	r1, [pc, #516]	; (8000b84 <main+0x2c4>)
 8000980:	4618      	mov	r0, r3
 8000982:	f009 fb4b 	bl	800a01c <siprintf>
				  HAL_Delay(10);
 8000986:	200a      	movs	r0, #10
 8000988:	f000 fd3e 	bl	8001408 <HAL_Delay>
				  HAL_UART_Transmit(&huart1,(uint8_t *)&string_adc_value, sizeof(string_adc_value), 0xFFFF);
 800098c:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8000990:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000994:	2208      	movs	r2, #8
 8000996:	487a      	ldr	r0, [pc, #488]	; (8000b80 <main+0x2c0>)
 8000998:	f007 fe68 	bl	800866c <HAL_UART_Transmit>
				  HAL_Delay(1000);
 800099c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009a0:	f000 fd32 	bl	8001408 <HAL_Delay>

				  // send message on UART
				  char msg []= "\r\n Case is locked.. \r\n";
 80009a4:	4b78      	ldr	r3, [pc, #480]	; (8000b88 <main+0x2c8>)
 80009a6:	f107 0480 	add.w	r4, r7, #128	; 0x80
 80009aa:	461d      	mov	r5, r3
 80009ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009b0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80009b4:	6020      	str	r0, [r4, #0]
 80009b6:	3404      	adds	r4, #4
 80009b8:	8021      	strh	r1, [r4, #0]
 80009ba:	3402      	adds	r4, #2
 80009bc:	0c0b      	lsrs	r3, r1, #16
 80009be:	7023      	strb	r3, [r4, #0]
				  HAL_UART_Transmit(&huart1,(uint8_t *)&msg, sizeof(msg), 0xFFFF);
 80009c0:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80009c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009c8:	2217      	movs	r2, #23
 80009ca:	486d      	ldr	r0, [pc, #436]	; (8000b80 <main+0x2c0>)
 80009cc:	f007 fe4e 	bl	800866c <HAL_UART_Transmit>

				  // ADJUST VARIABLES
				  password = adc_value;	// set adc value as password
 80009d0:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80009d4:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
				  written = 0;			// clear written flag
 80009d8:	2300      	movs	r3, #0
 80009da:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

				  // GO TO THE NEXT PHASE
				  status = 1;
 80009de:	2301      	movs	r3, #1
 80009e0:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
				  case_status = 1;
 80009e4:	2301      	movs	r3, #1
 80009e6:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
	  		  }

			  HAL_Delay(10);
 80009ea:	200a      	movs	r0, #10
 80009ec:	f000 fd0c 	bl	8001408 <HAL_Delay>
			  break;
 80009f0:	e0c0      	b.n	8000b74 <main+0x2b4>

	  	  case 1:	// LOCKED PHASE

	  		  red_led(); 	// red led is on, other leds are off
 80009f2:	f000 f945 	bl	8000c80 <red_led>

	  		  // send message on UART for one time
			  if(!written){
 80009f6:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80009fa:	f083 0301 	eor.w	r3, r3, #1
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d014      	beq.n	8000a2e <main+0x16e>

				  char msg []= "\r\n Enter a password: \r\n";
 8000a04:	4b61      	ldr	r3, [pc, #388]	; (8000b8c <main+0x2cc>)
 8000a06:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8000a0a:	461d      	mov	r5, r3
 8000a0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a10:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000a14:	e884 0003 	stmia.w	r4, {r0, r1}
				  HAL_UART_Transmit(&huart1,(uint8_t *)&msg, sizeof(msg), 0xFFFF);
 8000a18:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8000a1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a20:	2218      	movs	r2, #24
 8000a22:	4857      	ldr	r0, [pc, #348]	; (8000b80 <main+0x2c0>)
 8000a24:	f007 fe22 	bl	800866c <HAL_UART_Transmit>

				  written = 1;	// set written flag
 8000a28:	2301      	movs	r3, #1
 8000a2a:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
			  }

			  if(read_button()){	// if the button pressed
 8000a2e:	f000 f975 	bl	8000d1c <read_button>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d04d      	beq.n	8000ad4 <main+0x214>

				  // send ADC VALUE on UART
				  sprintf(string_adc_value, "\r\n %hu \r\n", adc_value);
 8000a38:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 8000a3c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a40:	4950      	ldr	r1, [pc, #320]	; (8000b84 <main+0x2c4>)
 8000a42:	4618      	mov	r0, r3
 8000a44:	f009 faea 	bl	800a01c <siprintf>
				  HAL_Delay(10);
 8000a48:	200a      	movs	r0, #10
 8000a4a:	f000 fcdd 	bl	8001408 <HAL_Delay>
				  HAL_UART_Transmit(&huart1,(uint8_t *)&string_adc_value, sizeof(string_adc_value), 0xFFFF);
 8000a4e:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8000a52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a56:	2208      	movs	r2, #8
 8000a58:	4849      	ldr	r0, [pc, #292]	; (8000b80 <main+0x2c0>)
 8000a5a:	f007 fe07 	bl	800866c <HAL_UART_Transmit>
				  HAL_Delay(10);
 8000a5e:	200a      	movs	r0, #10
 8000a60:	f000 fcd2 	bl	8001408 <HAL_Delay>

				  // CHECK PASSWORD IS TRUE OR NOT
				  if(password == adc_value){	// if password is true
 8000a64:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 8000a68:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	d11b      	bne.n	8000aa8 <main+0x1e8>

					  // SEND PASSWORD IS TRUE FEEDBACK ON UART
					  char msg []= "\r\n The case is open. \r\n";
 8000a70:	4b47      	ldr	r3, [pc, #284]	; (8000b90 <main+0x2d0>)
 8000a72:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8000a76:	461d      	mov	r5, r3
 8000a78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a7c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000a80:	e884 0003 	stmia.w	r4, {r0, r1}
					  HAL_UART_Transmit(&huart1,(uint8_t *)&msg, sizeof(msg), 0xFFFF);
 8000a84:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000a88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a8c:	2218      	movs	r2, #24
 8000a8e:	483c      	ldr	r0, [pc, #240]	; (8000b80 <main+0x2c0>)
 8000a90:	f007 fdec 	bl	800866c <HAL_UART_Transmit>

					  written = 0;	// clear written flag
 8000a94:	2300      	movs	r3, #0
 8000a96:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

					  // GO TO THE NEXT PHASE
					  status = 2;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
					  case_status = 2;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 8000aa6:	e011      	b.n	8000acc <main+0x20c>
				  }
				  else							// if password is false
					  {

					  // SEND PASSWORD IS FALSE FEEDBACK ON UART
					  char msg []= "\r\n Wrong! Try again... \r\n";
 8000aa8:	4b3a      	ldr	r3, [pc, #232]	; (8000b94 <main+0x2d4>)
 8000aaa:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000aae:	461d      	mov	r5, r3
 8000ab0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ab2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ab4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ab8:	c403      	stmia	r4!, {r0, r1}
 8000aba:	8022      	strh	r2, [r4, #0]
					  HAL_UART_Transmit(&huart1,(uint8_t *)&msg, sizeof(msg), 0xFFFF);
 8000abc:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000ac0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ac4:	221a      	movs	r2, #26
 8000ac6:	482e      	ldr	r0, [pc, #184]	; (8000b80 <main+0x2c0>)
 8000ac8:	f007 fdd0 	bl	800866c <HAL_UART_Transmit>
					  }

				  HAL_Delay(1000);
 8000acc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ad0:	f000 fc9a 	bl	8001408 <HAL_Delay>
			  }

			  HAL_Delay(10);
 8000ad4:	200a      	movs	r0, #10
 8000ad6:	f000 fc97 	bl	8001408 <HAL_Delay>
			  break;
 8000ada:	e04b      	b.n	8000b74 <main+0x2b4>

	  	  case 2:	// OPEN PHASE

	  		  green_led();	// green led is on, other leds are off
 8000adc:	f000 f8ea 	bl	8000cb4 <green_led>

	  		  // send message on UART for one time
	  		  if(!written){
 8000ae0:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8000ae4:	f083 0301 	eor.w	r3, r3, #1
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d014      	beq.n	8000b18 <main+0x258>

	  			  char msg []= "\r\n Press the button to set password to the case. \r\n";
 8000aee:	4b2a      	ldr	r3, [pc, #168]	; (8000b98 <main+0x2d8>)
 8000af0:	463c      	mov	r4, r7
 8000af2:	461d      	mov	r5, r3
 8000af4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000af6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000af8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000afa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000afc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000afe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b00:	682b      	ldr	r3, [r5, #0]
 8000b02:	6023      	str	r3, [r4, #0]
	  			  HAL_UART_Transmit(&huart1,(uint8_t *)&msg, sizeof(msg), 0xFFFF);
 8000b04:	4639      	mov	r1, r7
 8000b06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b0a:	2234      	movs	r2, #52	; 0x34
 8000b0c:	481c      	ldr	r0, [pc, #112]	; (8000b80 <main+0x2c0>)
 8000b0e:	f007 fdad 	bl	800866c <HAL_UART_Transmit>

	  			  written = 1;	// set written flag
 8000b12:	2301      	movs	r3, #1
 8000b14:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
	  		  }

	  		  if(read_button()){				// if the button pressed
 8000b18:	f000 f900 	bl	8000d1c <read_button>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d00c      	beq.n	8000b3c <main+0x27c>

	  			  written = 0;	// clear written flag
 8000b22:	2300      	movs	r3, #0
 8000b24:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

	  			  // GO TO THE NEXT PHASE
	  			  status = 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
	  			  case_status = 0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2

	  			  HAL_Delay(1000);
 8000b34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b38:	f000 fc66 	bl	8001408 <HAL_Delay>
			 	}

	  		  HAL_Delay(10);
 8000b3c:	200a      	movs	r0, #10
 8000b3e:	f000 fc63 	bl	8001408 <HAL_Delay>
			  break;
 8000b42:	e017      	b.n	8000b74 <main+0x2b4>

	  	  default :
	  		  // PHASE STABILIZER
	  		  if(case_status==0) status=0;
 8000b44:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d103      	bne.n	8000b54 <main+0x294>
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
	  		  else if(case_status==1) status=1;
	  		  else if(case_status==2) status=2;
	  		  break;
 8000b52:	e00e      	b.n	8000b72 <main+0x2b2>
	  		  else if(case_status==1) status=1;
 8000b54:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d103      	bne.n	8000b64 <main+0x2a4>
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
	  		  break;
 8000b62:	e006      	b.n	8000b72 <main+0x2b2>
	  		  else if(case_status==2) status=2;
 8000b64:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8000b68:	2b02      	cmp	r3, #2
 8000b6a:	d102      	bne.n	8000b72 <main+0x2b2>
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
	  		  break;
 8000b72:	bf00      	nop
	  HAL_Delay(10);
 8000b74:	e6c8      	b.n	8000908 <main+0x48>
 8000b76:	bf00      	nop
 8000b78:	2000008c 	.word	0x2000008c
 8000b7c:	0800a93c 	.word	0x0800a93c
 8000b80:	2000011c 	.word	0x2000011c
 8000b84:	0800a930 	.word	0x0800a930
 8000b88:	0800a948 	.word	0x0800a948
 8000b8c:	0800a960 	.word	0x0800a960
 8000b90:	0800a978 	.word	0x0800a978
 8000b94:	0800a990 	.word	0x0800a990
 8000b98:	0800a9ac 	.word	0x0800a9ac

08000b9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b09e      	sub	sp, #120	; 0x78
 8000ba0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ba2:	f107 0318 	add.w	r3, r7, #24
 8000ba6:	2260      	movs	r2, #96	; 0x60
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4618      	mov	r0, r3
 8000bac:	f009 fa2e 	bl	800a00c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb0:	463b      	mov	r3, r7
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
 8000bbc:	611a      	str	r2, [r3, #16]
 8000bbe:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000bc0:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8000bc4:	f003 fd0a 	bl	80045dc <HAL_PWREx_ControlVoltageScaling>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000bce:	f000 f8c7 	bl	8000d60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000bd2:	2332      	movs	r3, #50	; 0x32
 8000bd4:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000bdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000be0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000be2:	2310      	movs	r3, #16
 8000be4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000be6:	2301      	movs	r3, #1
 8000be8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000bea:	2310      	movs	r3, #16
 8000bec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8000bee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c00:	2301      	movs	r3, #1
 8000c02:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000c04:	2350      	movs	r3, #80	; 0x50
 8000c06:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c10:	2302      	movs	r3, #2
 8000c12:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 8000c14:	2300      	movs	r3, #0
 8000c16:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c1c:	f107 0318 	add.w	r3, r7, #24
 8000c20:	4618      	mov	r0, r3
 8000c22:	f003 fddd 	bl	80047e0 <HAL_RCC_OscConfig>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c2c:	f000 f898 	bl	8000d60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c30:	231f      	movs	r3, #31
 8000c32:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c34:	2303      	movs	r3, #3
 8000c36:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c40:	2300      	movs	r3, #0
 8000c42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c48:	463b      	mov	r3, r7
 8000c4a:	2104      	movs	r1, #4
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f004 fc9d 	bl	800558c <HAL_RCC_ClockConfig>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000c58:	f000 f882 	bl	8000d60 <Error_Handler>
  }
}
 8000c5c:	bf00      	nop
 8000c5e:	3778      	adds	r7, #120	; 0x78
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000c68:	f003 fd9a 	bl	80047a0 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000c6c:	2002      	movs	r0, #2
 8000c6e:	f003 fd37 	bl	80046e0 <HAL_PWREx_ConfigSupply>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <SystemPower_Config+0x18>
  {
    Error_Handler();
 8000c78:	f000 f872 	bl	8000d60 <Error_Handler>
  }
}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <red_led>:

/* USER CODE BEGIN 4 */

void red_led() // this function drives only red led
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port,LED_RED_Pin,GPIO_PIN_SET);
 8000c84:	2201      	movs	r2, #1
 8000c86:	2104      	movs	r1, #4
 8000c88:	4807      	ldr	r0, [pc, #28]	; (8000ca8 <red_led+0x28>)
 8000c8a:	f002 fc0d 	bl	80034a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,GPIO_PIN_RESET);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2180      	movs	r1, #128	; 0x80
 8000c92:	4806      	ldr	r0, [pc, #24]	; (8000cac <red_led+0x2c>)
 8000c94:	f002 fc08 	bl	80034a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port,LED_BLUE_Pin,GPIO_PIN_RESET);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	2180      	movs	r1, #128	; 0x80
 8000c9c:	4804      	ldr	r0, [pc, #16]	; (8000cb0 <red_led+0x30>)
 8000c9e:	f002 fc03 	bl	80034a8 <HAL_GPIO_WritePin>
	}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	42021800 	.word	0x42021800
 8000cac:	42020800 	.word	0x42020800
 8000cb0:	42020400 	.word	0x42020400

08000cb4 <green_led>:

void green_led() // this function drives only green led
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port,LED_RED_Pin,GPIO_PIN_RESET);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	2104      	movs	r1, #4
 8000cbc:	4807      	ldr	r0, [pc, #28]	; (8000cdc <green_led+0x28>)
 8000cbe:	f002 fbf3 	bl	80034a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,GPIO_PIN_SET);
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	2180      	movs	r1, #128	; 0x80
 8000cc6:	4806      	ldr	r0, [pc, #24]	; (8000ce0 <green_led+0x2c>)
 8000cc8:	f002 fbee 	bl	80034a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port,LED_BLUE_Pin,GPIO_PIN_RESET);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2180      	movs	r1, #128	; 0x80
 8000cd0:	4804      	ldr	r0, [pc, #16]	; (8000ce4 <green_led+0x30>)
 8000cd2:	f002 fbe9 	bl	80034a8 <HAL_GPIO_WritePin>
	}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	42021800 	.word	0x42021800
 8000ce0:	42020800 	.word	0x42020800
 8000ce4:	42020400 	.word	0x42020400

08000ce8 <all_leds>:

void all_leds() // this function drives all leds
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port,LED_RED_Pin,GPIO_PIN_SET);
 8000cec:	2201      	movs	r2, #1
 8000cee:	2104      	movs	r1, #4
 8000cf0:	4807      	ldr	r0, [pc, #28]	; (8000d10 <all_leds+0x28>)
 8000cf2:	f002 fbd9 	bl	80034a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,GPIO_PIN_SET);
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	2180      	movs	r1, #128	; 0x80
 8000cfa:	4806      	ldr	r0, [pc, #24]	; (8000d14 <all_leds+0x2c>)
 8000cfc:	f002 fbd4 	bl	80034a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port,LED_BLUE_Pin,GPIO_PIN_SET);
 8000d00:	2201      	movs	r2, #1
 8000d02:	2180      	movs	r1, #128	; 0x80
 8000d04:	4804      	ldr	r0, [pc, #16]	; (8000d18 <all_leds+0x30>)
 8000d06:	f002 fbcf 	bl	80034a8 <HAL_GPIO_WritePin>
	}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	42021800 	.word	0x42021800
 8000d14:	42020800 	.word	0x42020800
 8000d18:	42020400 	.word	0x42020400

08000d1c <read_button>:

_Bool read_button()	// this function reads user button
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port,USER_BUTTON_Pin);
 8000d20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d24:	4805      	ldr	r0, [pc, #20]	; (8000d3c <read_button+0x20>)
 8000d26:	f002 fba7 	bl	8003478 <HAL_GPIO_ReadPin>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	bf14      	ite	ne
 8000d30:	2301      	movne	r3, #1
 8000d32:	2300      	moveq	r3, #0
 8000d34:	b2db      	uxtb	r3, r3
	}
 8000d36:	4618      	mov	r0, r3
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	42020800 	.word	0x42020800

08000d40 <read_ADC>:

uint16_t read_ADC()	// this function reads ADC value
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
	HAL_ADC_PollForConversion(&hadc4, 1000);
 8000d44:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d48:	4804      	ldr	r0, [pc, #16]	; (8000d5c <read_ADC+0x1c>)
 8000d4a:	f001 f9df 	bl	800210c <HAL_ADC_PollForConversion>
	return HAL_ADC_GetValue(&hadc4);
 8000d4e:	4803      	ldr	r0, [pc, #12]	; (8000d5c <read_ADC+0x1c>)
 8000d50:	f001 fac2 	bl	80022d8 <HAL_ADC_GetValue>
 8000d54:	4603      	mov	r3, r0
 8000d56:	b29b      	uxth	r3, r3
	}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	2000008c 	.word	0x2000008c

08000d60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d64:	b672      	cpsid	i
}
 8000d66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d68:	e7fe      	b.n	8000d68 <Error_Handler+0x8>
	...

08000d6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d72:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <HAL_MspInit+0x34>)
 8000d74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d78:	4a09      	ldr	r2, [pc, #36]	; (8000da0 <HAL_MspInit+0x34>)
 8000d7a:	f043 0304 	orr.w	r3, r3, #4
 8000d7e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8000d82:	4b07      	ldr	r3, [pc, #28]	; (8000da0 <HAL_MspInit+0x34>)
 8000d84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d88:	f003 0304 	and.w	r3, r3, #4
 8000d8c:	607b      	str	r3, [r7, #4]
 8000d8e:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8000d90:	2004      	movs	r0, #4
 8000d92:	f002 f959 	bl	8003048 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d96:	bf00      	nop
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	46020c00 	.word	0x46020c00

08000da4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <NMI_Handler+0x4>

08000daa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dae:	e7fe      	b.n	8000dae <HardFault_Handler+0x4>

08000db0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <MemManage_Handler+0x4>

08000db6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dba:	e7fe      	b.n	8000dba <BusFault_Handler+0x4>

08000dbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <UsageFault_Handler+0x4>

08000dc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr

08000dde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000df0:	f000 faea 	bl	80013c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000df4:	bf00      	nop
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000dfc:	4802      	ldr	r0, [pc, #8]	; (8000e08 <OTG_FS_IRQHandler+0x10>)
 8000dfe:	f002 fc8f 	bl	8003720 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	200001ac 	.word	0x200001ac

08000e0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e14:	4a14      	ldr	r2, [pc, #80]	; (8000e68 <_sbrk+0x5c>)
 8000e16:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <_sbrk+0x60>)
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e20:	4b13      	ldr	r3, [pc, #76]	; (8000e70 <_sbrk+0x64>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d102      	bne.n	8000e2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e28:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <_sbrk+0x64>)
 8000e2a:	4a12      	ldr	r2, [pc, #72]	; (8000e74 <_sbrk+0x68>)
 8000e2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e2e:	4b10      	ldr	r3, [pc, #64]	; (8000e70 <_sbrk+0x64>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4413      	add	r3, r2
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d207      	bcs.n	8000e4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e3c:	f009 f8bc 	bl	8009fb8 <__errno>
 8000e40:	4603      	mov	r3, r0
 8000e42:	220c      	movs	r2, #12
 8000e44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e4a:	e009      	b.n	8000e60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e4c:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <_sbrk+0x64>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e52:	4b07      	ldr	r3, [pc, #28]	; (8000e70 <_sbrk+0x64>)
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4413      	add	r3, r2
 8000e5a:	4a05      	ldr	r2, [pc, #20]	; (8000e70 <_sbrk+0x64>)
 8000e5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3718      	adds	r7, #24
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	200c0000 	.word	0x200c0000
 8000e6c:	00000400 	.word	0x00000400
 8000e70:	20000118 	.word	0x20000118
 8000e74:	200006d0 	.word	0x200006d0

08000e78 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e7c:	4b18      	ldr	r3, [pc, #96]	; (8000ee0 <SystemInit+0x68>)
 8000e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e82:	4a17      	ldr	r2, [pc, #92]	; (8000ee0 <SystemInit+0x68>)
 8000e84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000e8c:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <SystemInit+0x6c>)
 8000e8e:	2201      	movs	r2, #1
 8000e90:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000e92:	4b14      	ldr	r3, [pc, #80]	; (8000ee4 <SystemInit+0x6c>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000e98:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <SystemInit+0x6c>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000e9e:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <SystemInit+0x6c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000ea4:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <SystemInit+0x6c>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a0e      	ldr	r2, [pc, #56]	; (8000ee4 <SystemInit+0x6c>)
 8000eaa:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000eae:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000eb2:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000eb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <SystemInit+0x6c>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000eba:	4b0a      	ldr	r3, [pc, #40]	; (8000ee4 <SystemInit+0x6c>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a09      	ldr	r2, [pc, #36]	; (8000ee4 <SystemInit+0x6c>)
 8000ec0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ec4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000ec6:	4b07      	ldr	r3, [pc, #28]	; (8000ee4 <SystemInit+0x6c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ecc:	4b04      	ldr	r3, [pc, #16]	; (8000ee0 <SystemInit+0x68>)
 8000ece:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ed2:	609a      	str	r2, [r3, #8]
  #endif
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	e000ed00 	.word	0xe000ed00
 8000ee4:	46020c00 	.word	0x46020c00

08000ee8 <LL_AHB2_GRP1_EnableClock>:
  *
  *        (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR1, Periphs);
 8000ef0:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <LL_AHB2_GRP1_EnableClock+0x34>)
 8000ef2:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8000ef6:	4909      	ldr	r1, [pc, #36]	; (8000f1c <LL_AHB2_GRP1_EnableClock+0x34>)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR1, Periphs);
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <LL_AHB2_GRP1_EnableClock+0x34>)
 8000f02:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
}
 8000f0e:	bf00      	nop
 8000f10:	3714      	adds	r7, #20
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	46020c00 	.word	0x46020c00

08000f20 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_FDCAN1
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000f28:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <LL_APB1_GRP2_EnableClock+0x34>)
 8000f2a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8000f2e:	4909      	ldr	r1, [pc, #36]	; (8000f54 <LL_APB1_GRP2_EnableClock+0x34>)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000f38:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <LL_APB1_GRP2_EnableClock+0x34>)
 8000f3a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4013      	ands	r3, r2
 8000f42:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f44:	68fb      	ldr	r3, [r7, #12]
}
 8000f46:	bf00      	nop
 8000f48:	3714      	adds	r7, #20
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	46020c00 	.word	0x46020c00

08000f58 <MX_UCPD1_Init>:

/* USER CODE END 0 */

/* UCPD1 init function */
void MX_UCPD1_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5e:	463b      	mov	r3, r7
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]
 8000f6c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8000f6e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000f72:	f7ff ffd5 	bl	8000f20 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000f76:	2002      	movs	r0, #2
 8000f78:	f7ff ffb6 	bl	8000ee8 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000f7c:	2001      	movs	r0, #1
 8000f7e:	f7ff ffb3 	bl	8000ee8 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000f82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f86:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000f88:	2303      	movs	r3, #3
 8000f8a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f90:	463b      	mov	r3, r7
 8000f92:	4619      	mov	r1, r3
 8000f94:	4809      	ldr	r0, [pc, #36]	; (8000fbc <MX_UCPD1_Init+0x64>)
 8000f96:	f008 f9b4 	bl	8009302 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000f9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f9e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa8:	463b      	mov	r3, r7
 8000faa:	4619      	mov	r1, r3
 8000fac:	4804      	ldr	r0, [pc, #16]	; (8000fc0 <MX_UCPD1_Init+0x68>)
 8000fae:	f008 f9a8 	bl	8009302 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8000fb2:	bf00      	nop
 8000fb4:	3718      	adds	r7, #24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	42020400 	.word	0x42020400
 8000fc0:	42020000 	.word	0x42020000

08000fc4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fc8:	4b22      	ldr	r3, [pc, #136]	; (8001054 <MX_USART1_UART_Init+0x90>)
 8000fca:	4a23      	ldr	r2, [pc, #140]	; (8001058 <MX_USART1_UART_Init+0x94>)
 8000fcc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000fce:	4b21      	ldr	r3, [pc, #132]	; (8001054 <MX_USART1_UART_Init+0x90>)
 8000fd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fd4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fd6:	4b1f      	ldr	r3, [pc, #124]	; (8001054 <MX_USART1_UART_Init+0x90>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fdc:	4b1d      	ldr	r3, [pc, #116]	; (8001054 <MX_USART1_UART_Init+0x90>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fe2:	4b1c      	ldr	r3, [pc, #112]	; (8001054 <MX_USART1_UART_Init+0x90>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fe8:	4b1a      	ldr	r3, [pc, #104]	; (8001054 <MX_USART1_UART_Init+0x90>)
 8000fea:	220c      	movs	r2, #12
 8000fec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fee:	4b19      	ldr	r3, [pc, #100]	; (8001054 <MX_USART1_UART_Init+0x90>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ff4:	4b17      	ldr	r3, [pc, #92]	; (8001054 <MX_USART1_UART_Init+0x90>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ffa:	4b16      	ldr	r3, [pc, #88]	; (8001054 <MX_USART1_UART_Init+0x90>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001000:	4b14      	ldr	r3, [pc, #80]	; (8001054 <MX_USART1_UART_Init+0x90>)
 8001002:	2200      	movs	r2, #0
 8001004:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001006:	4b13      	ldr	r3, [pc, #76]	; (8001054 <MX_USART1_UART_Init+0x90>)
 8001008:	2200      	movs	r2, #0
 800100a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800100c:	4811      	ldr	r0, [pc, #68]	; (8001054 <MX_USART1_UART_Init+0x90>)
 800100e:	f007 fadd 	bl	80085cc <HAL_UART_Init>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001018:	f7ff fea2 	bl	8000d60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800101c:	2100      	movs	r1, #0
 800101e:	480d      	ldr	r0, [pc, #52]	; (8001054 <MX_USART1_UART_Init+0x90>)
 8001020:	f007 ff5a 	bl	8008ed8 <HAL_UARTEx_SetTxFifoThreshold>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800102a:	f7ff fe99 	bl	8000d60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800102e:	2100      	movs	r1, #0
 8001030:	4808      	ldr	r0, [pc, #32]	; (8001054 <MX_USART1_UART_Init+0x90>)
 8001032:	f007 ff8f 	bl	8008f54 <HAL_UARTEx_SetRxFifoThreshold>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800103c:	f7ff fe90 	bl	8000d60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001040:	4804      	ldr	r0, [pc, #16]	; (8001054 <MX_USART1_UART_Init+0x90>)
 8001042:	f007 ff10 	bl	8008e66 <HAL_UARTEx_DisableFifoMode>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800104c:	f7ff fe88 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}
 8001054:	2000011c 	.word	0x2000011c
 8001058:	40013800 	.word	0x40013800

0800105c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b0bc      	sub	sp, #240	; 0xf0
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001064:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001074:	f107 0310 	add.w	r3, r7, #16
 8001078:	22c8      	movs	r2, #200	; 0xc8
 800107a:	2100      	movs	r1, #0
 800107c:	4618      	mov	r0, r3
 800107e:	f008 ffc5 	bl	800a00c <memset>
  if(uartHandle->Instance==USART1)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a26      	ldr	r2, [pc, #152]	; (8001120 <HAL_UART_MspInit+0xc4>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d145      	bne.n	8001118 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800108c:	f04f 0201 	mov.w	r2, #1
 8001090:	f04f 0300 	mov.w	r3, #0
 8001094:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001098:	2300      	movs	r3, #0
 800109a:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800109c:	f107 0310 	add.w	r3, r7, #16
 80010a0:	4618      	mov	r0, r3
 80010a2:	f004 fe49 	bl	8005d38 <HAL_RCCEx_PeriphCLKConfig>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 80010ac:	f7ff fe58 	bl	8000d60 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010b0:	4b1c      	ldr	r3, [pc, #112]	; (8001124 <HAL_UART_MspInit+0xc8>)
 80010b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80010b6:	4a1b      	ldr	r2, [pc, #108]	; (8001124 <HAL_UART_MspInit+0xc8>)
 80010b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010bc:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 80010c0:	4b18      	ldr	r3, [pc, #96]	; (8001124 <HAL_UART_MspInit+0xc8>)
 80010c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80010c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ce:	4b15      	ldr	r3, [pc, #84]	; (8001124 <HAL_UART_MspInit+0xc8>)
 80010d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010d4:	4a13      	ldr	r2, [pc, #76]	; (8001124 <HAL_UART_MspInit+0xc8>)
 80010d6:	f043 0301 	orr.w	r3, r3, #1
 80010da:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80010de:	4b11      	ldr	r3, [pc, #68]	; (8001124 <HAL_UART_MspInit+0xc8>)
 80010e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	60bb      	str	r3, [r7, #8]
 80010ea:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 80010ec:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80010f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f4:	2302      	movs	r3, #2
 80010f6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010fa:	2302      	movs	r3, #2
 80010fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001100:	2303      	movs	r3, #3
 8001102:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001106:	2307      	movs	r3, #7
 8001108:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001110:	4619      	mov	r1, r3
 8001112:	4805      	ldr	r0, [pc, #20]	; (8001128 <HAL_UART_MspInit+0xcc>)
 8001114:	f001 ffd8 	bl	80030c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001118:	bf00      	nop
 800111a:	37f0      	adds	r7, #240	; 0xf0
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40013800 	.word	0x40013800
 8001124:	46020c00 	.word	0x46020c00
 8001128:	42020000 	.word	0x42020000

0800112c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001130:	4b12      	ldr	r3, [pc, #72]	; (800117c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001132:	4a13      	ldr	r2, [pc, #76]	; (8001180 <MX_USB_OTG_FS_PCD_Init+0x54>)
 8001134:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001136:	4b11      	ldr	r3, [pc, #68]	; (800117c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001138:	2206      	movs	r2, #6
 800113a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800113c:	4b0f      	ldr	r3, [pc, #60]	; (800117c <MX_USB_OTG_FS_PCD_Init+0x50>)
 800113e:	2202      	movs	r2, #2
 8001140:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001142:	4b0e      	ldr	r3, [pc, #56]	; (800117c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001144:	2200      	movs	r2, #0
 8001146:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001148:	4b0c      	ldr	r3, [pc, #48]	; (800117c <MX_USB_OTG_FS_PCD_Init+0x50>)
 800114a:	2200      	movs	r2, #0
 800114c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800114e:	4b0b      	ldr	r3, [pc, #44]	; (800117c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001150:	2200      	movs	r2, #0
 8001152:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001154:	4b09      	ldr	r3, [pc, #36]	; (800117c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001156:	2200      	movs	r2, #0
 8001158:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800115a:	4b08      	ldr	r3, [pc, #32]	; (800117c <MX_USB_OTG_FS_PCD_Init+0x50>)
 800115c:	2200      	movs	r2, #0
 800115e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001160:	4b06      	ldr	r3, [pc, #24]	; (800117c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001162:	2200      	movs	r2, #0
 8001164:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001166:	4805      	ldr	r0, [pc, #20]	; (800117c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001168:	f002 f9b6 	bl	80034d8 <HAL_PCD_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_USB_OTG_FS_PCD_Init+0x4a>
  {
    Error_Handler();
 8001172:	f7ff fdf5 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	200001ac 	.word	0x200001ac
 8001180:	42040000 	.word	0x42040000

08001184 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b0be      	sub	sp, #248	; 0xf8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800119c:	f107 0318 	add.w	r3, r7, #24
 80011a0:	22c8      	movs	r2, #200	; 0xc8
 80011a2:	2100      	movs	r1, #0
 80011a4:	4618      	mov	r0, r3
 80011a6:	f008 ff31 	bl	800a00c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a3c      	ldr	r2, [pc, #240]	; (80012a0 <HAL_PCD_MspInit+0x11c>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d171      	bne.n	8001298 <HAL_PCD_MspInit+0x114>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80011b4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80011b8:	f04f 0300 	mov.w	r3, #0
 80011bc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 80011c0:	2300      	movs	r3, #0
 80011c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011c6:	f107 0318 	add.w	r3, r7, #24
 80011ca:	4618      	mov	r0, r3
 80011cc:	f004 fdb4 	bl	8005d38 <HAL_RCCEx_PeriphCLKConfig>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 80011d6:	f7ff fdc3 	bl	8000d60 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011da:	4b32      	ldr	r3, [pc, #200]	; (80012a4 <HAL_PCD_MspInit+0x120>)
 80011dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80011e0:	4a30      	ldr	r2, [pc, #192]	; (80012a4 <HAL_PCD_MspInit+0x120>)
 80011e2:	f043 0301 	orr.w	r3, r3, #1
 80011e6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80011ea:	4b2e      	ldr	r3, [pc, #184]	; (80012a4 <HAL_PCD_MspInit+0x120>)
 80011ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80011f0:	f003 0301 	and.w	r3, r3, #1
 80011f4:	617b      	str	r3, [r7, #20]
 80011f6:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80011f8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80011fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001200:	2302      	movs	r3, #2
 8001202:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800120c:	2303      	movs	r3, #3
 800120e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001212:	230a      	movs	r3, #10
 8001214:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001218:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800121c:	4619      	mov	r1, r3
 800121e:	4822      	ldr	r0, [pc, #136]	; (80012a8 <HAL_PCD_MspInit+0x124>)
 8001220:	f001 ff52 	bl	80030c8 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001224:	4b1f      	ldr	r3, [pc, #124]	; (80012a4 <HAL_PCD_MspInit+0x120>)
 8001226:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800122a:	4a1e      	ldr	r2, [pc, #120]	; (80012a4 <HAL_PCD_MspInit+0x120>)
 800122c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001230:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001234:	4b1b      	ldr	r3, [pc, #108]	; (80012a4 <HAL_PCD_MspInit+0x120>)
 8001236:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800123a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800123e:	613b      	str	r3, [r7, #16]
 8001240:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001242:	4b18      	ldr	r3, [pc, #96]	; (80012a4 <HAL_PCD_MspInit+0x120>)
 8001244:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001248:	f003 0304 	and.w	r3, r3, #4
 800124c:	2b00      	cmp	r3, #0
 800124e:	d119      	bne.n	8001284 <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001250:	4b14      	ldr	r3, [pc, #80]	; (80012a4 <HAL_PCD_MspInit+0x120>)
 8001252:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001256:	4a13      	ldr	r2, [pc, #76]	; (80012a4 <HAL_PCD_MspInit+0x120>)
 8001258:	f043 0304 	orr.w	r3, r3, #4
 800125c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001260:	4b10      	ldr	r3, [pc, #64]	; (80012a4 <HAL_PCD_MspInit+0x120>)
 8001262:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001266:	f003 0304 	and.w	r3, r3, #4
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800126e:	f003 fa87 	bl	8004780 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001272:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <HAL_PCD_MspInit+0x120>)
 8001274:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001278:	4a0a      	ldr	r2, [pc, #40]	; (80012a4 <HAL_PCD_MspInit+0x120>)
 800127a:	f023 0304 	bic.w	r3, r3, #4
 800127e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001282:	e001      	b.n	8001288 <HAL_PCD_MspInit+0x104>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8001284:	f003 fa7c 	bl	8004780 <HAL_PWREx_EnableVddUSB>
    }

    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8001288:	2200      	movs	r2, #0
 800128a:	2100      	movs	r1, #0
 800128c:	2049      	movs	r0, #73	; 0x49
 800128e:	f001 fee6 	bl	800305e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8001292:	2049      	movs	r0, #73	; 0x49
 8001294:	f001 fefd 	bl	8003092 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001298:	bf00      	nop
 800129a:	37f8      	adds	r7, #248	; 0xf8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	42040000 	.word	0x42040000
 80012a4:	46020c00 	.word	0x46020c00
 80012a8:	42020000 	.word	0x42020000

080012ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80012ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012e4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80012b0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80012b2:	e003      	b.n	80012bc <LoopCopyDataInit>

080012b4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80012b4:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80012b6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80012b8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80012ba:	3104      	adds	r1, #4

080012bc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80012bc:	480b      	ldr	r0, [pc, #44]	; (80012ec <LoopForever+0xa>)
	ldr	r3, =_edata
 80012be:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80012c0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80012c2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80012c4:	d3f6      	bcc.n	80012b4 <CopyDataInit>
	ldr	r2, =_sbss
 80012c6:	4a0b      	ldr	r2, [pc, #44]	; (80012f4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80012c8:	e002      	b.n	80012d0 <LoopFillZerobss>

080012ca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80012ca:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80012cc:	f842 3b04 	str.w	r3, [r2], #4

080012d0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80012d0:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <LoopForever+0x16>)
	cmp	r2, r3
 80012d2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80012d4:	d3f9      	bcc.n	80012ca <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012d6:	f7ff fdcf 	bl	8000e78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012da:	f008 fe73 	bl	8009fc4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012de:	f7ff faef 	bl	80008c0 <main>

080012e2 <LoopForever>:

LoopForever:
    b LoopForever
 80012e2:	e7fe      	b.n	80012e2 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80012e4:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 80012e8:	0800ab24 	.word	0x0800ab24
	ldr	r0, =_sdata
 80012ec:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80012f0:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 80012f4:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 80012f8:	200006c9 	.word	0x200006c9

080012fc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012fc:	e7fe      	b.n	80012fc <ADC1_IRQHandler>
	...

08001300 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001304:	4b11      	ldr	r3, [pc, #68]	; (800134c <HAL_Init+0x4c>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a10      	ldr	r2, [pc, #64]	; (800134c <HAL_Init+0x4c>)
 800130a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800130e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001310:	2003      	movs	r0, #3
 8001312:	f001 fe99 	bl	8003048 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001316:	f004 fb2b 	bl	8005970 <HAL_RCC_GetSysClockFreq>
 800131a:	4602      	mov	r2, r0
 800131c:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <HAL_Init+0x50>)
 800131e:	6a1b      	ldr	r3, [r3, #32]
 8001320:	f003 030f 	and.w	r3, r3, #15
 8001324:	490b      	ldr	r1, [pc, #44]	; (8001354 <HAL_Init+0x54>)
 8001326:	5ccb      	ldrb	r3, [r1, r3]
 8001328:	fa22 f303 	lsr.w	r3, r2, r3
 800132c:	4a0a      	ldr	r2, [pc, #40]	; (8001358 <HAL_Init+0x58>)
 800132e:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001330:	2000      	movs	r0, #0
 8001332:	f000 f813 	bl	800135c <HAL_InitTick>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e002      	b.n	8001346 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001340:	f7ff fd14 	bl	8000d6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40022000 	.word	0x40022000
 8001350:	46020c00 	.word	0x46020c00
 8001354:	0800a9e0 	.word	0x0800a9e0
 8001358:	20000000 	.word	0x20000000

0800135c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001364:	4b15      	ldr	r3, [pc, #84]	; (80013bc <HAL_InitTick+0x60>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d101      	bne.n	8001370 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e021      	b.n	80013b4 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001370:	4b13      	ldr	r3, [pc, #76]	; (80013c0 <HAL_InitTick+0x64>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	4b11      	ldr	r3, [pc, #68]	; (80013bc <HAL_InitTick+0x60>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	4619      	mov	r1, r3
 800137a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800137e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001382:	fbb2 f3f3 	udiv	r3, r2, r3
 8001386:	4618      	mov	r0, r3
 8001388:	f001 fe91 	bl	80030ae <HAL_SYSTICK_Config>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e00e      	b.n	80013b4 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2b0f      	cmp	r3, #15
 800139a:	d80a      	bhi.n	80013b2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800139c:	2200      	movs	r2, #0
 800139e:	6879      	ldr	r1, [r7, #4]
 80013a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013a4:	f001 fe5b 	bl	800305e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013a8:	4a06      	ldr	r2, [pc, #24]	; (80013c4 <HAL_InitTick+0x68>)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ae:	2300      	movs	r3, #0
 80013b0:	e000      	b.n	80013b4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20000008 	.word	0x20000008
 80013c0:	20000000 	.word	0x20000000
 80013c4:	20000004 	.word	0x20000004

080013c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013cc:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <HAL_IncTick+0x20>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	461a      	mov	r2, r3
 80013d2:	4b06      	ldr	r3, [pc, #24]	; (80013ec <HAL_IncTick+0x24>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4413      	add	r3, r2
 80013d8:	4a04      	ldr	r2, [pc, #16]	; (80013ec <HAL_IncTick+0x24>)
 80013da:	6013      	str	r3, [r2, #0]
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	20000008 	.word	0x20000008
 80013ec:	200006b8 	.word	0x200006b8

080013f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  return uwTick;
 80013f4:	4b03      	ldr	r3, [pc, #12]	; (8001404 <HAL_GetTick+0x14>)
 80013f6:	681b      	ldr	r3, [r3, #0]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	200006b8 	.word	0x200006b8

08001408 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001410:	f7ff ffee 	bl	80013f0 <HAL_GetTick>
 8001414:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001420:	d005      	beq.n	800142e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001422:	4b0a      	ldr	r3, [pc, #40]	; (800144c <HAL_Delay+0x44>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	461a      	mov	r2, r3
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	4413      	add	r3, r2
 800142c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800142e:	bf00      	nop
 8001430:	f7ff ffde 	bl	80013f0 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	68fa      	ldr	r2, [r7, #12]
 800143c:	429a      	cmp	r2, r3
 800143e:	d8f7      	bhi.n	8001430 <HAL_Delay+0x28>
  {
  }
}
 8001440:	bf00      	nop
 8001442:	bf00      	nop
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20000008 	.word	0x20000008

08001450 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  return ((DBGMCU->IDCODE & DBGMCU_IDCODE_REV_ID) >> 16);
 8001454:	4b04      	ldr	r3, [pc, #16]	; (8001468 <HAL_GetREVID+0x18>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	0c1b      	lsrs	r3, r3, #16
 800145a:	b29b      	uxth	r3, r3
}
 800145c:	4618      	mov	r0, r3
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	e0044000 	.word	0xe0044000

0800146c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	431a      	orrs	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	601a      	str	r2, [r3, #0]
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001492:	b480      	push	{r7}
 8001494:	b083      	sub	sp, #12
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
 800149a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	431a      	orrs	r2, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	601a      	str	r2, [r3, #0]
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b087      	sub	sp, #28
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
 80014e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	3360      	adds	r3, #96	; 0x60
 80014e6:	461a      	mov	r2, r3
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	4413      	add	r3, r2
 80014ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	f003 4178 	and.w	r1, r3, #4160749568	; 0xf8000000
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	430b      	orrs	r3, r1
 8001504:	431a      	orrs	r2, r3
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 800150a:	bf00      	nop
 800150c:	371c      	adds	r7, #28
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr

08001516 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001516:	b480      	push	{r7}
 8001518:	b087      	sub	sp, #28
 800151a:	af00      	add	r7, sp, #0
 800151c:	60f8      	str	r0, [r7, #12]
 800151e:	60b9      	str	r1, [r7, #8]
 8001520:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	3360      	adds	r3, #96	; 0x60
 8001526:	461a      	mov	r2, r3
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	4413      	add	r3, r2
 800152e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	431a      	orrs	r2, r3
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	601a      	str	r2, [r3, #0]
}
 8001540:	bf00      	nop
 8001542:	371c      	adds	r7, #28
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 800154c:	b480      	push	{r7}
 800154e:	b087      	sub	sp, #28
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	3360      	adds	r3, #96	; 0x60
 800155c:	461a      	mov	r2, r3
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	4413      	add	r3, r2
 8001564:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	431a      	orrs	r2, r3
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	601a      	str	r2, [r3, #0]
}
 8001576:	bf00      	nop
 8001578:	371c      	adds	r7, #28
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8001582:	b480      	push	{r7}
 8001584:	b083      	sub	sp, #12
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
 800158a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001590:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001594:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001598:	683a      	ldr	r2, [r7, #0]
 800159a:	431a      	orrs	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	671a      	str	r2, [r3, #112]	; 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80015a8:	683a      	ldr	r2, [r7, #0]
 80015aa:	2a00      	cmp	r2, #0
 80015ac:	d002      	beq.n	80015b4 <LL_ADC_SetGainCompensation+0x32>
 80015ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80015b2:	e000      	b.n	80015b6 <LL_ADC_SetGainCompensation+0x34>
 80015b4:	2200      	movs	r2, #0
 80015b6:	431a      	orrs	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	671a      	str	r2, [r3, #112]	; 0x70
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	695a      	ldr	r2, [r3, #20]
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	f003 0304 	and.w	r3, r3, #4
 80015de:	2107      	movs	r1, #7
 80015e0:	fa01 f303 	lsl.w	r3, r1, r3
 80015e4:	43db      	mvns	r3, r3
 80015e6:	401a      	ands	r2, r3
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	f003 0304 	and.w	r3, r3, #4
 80015ee:	6879      	ldr	r1, [r7, #4]
 80015f0:	fa01 f303 	lsl.w	r3, r1, r3
 80015f4:	431a      	orrs	r2, r3
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80015fa:	bf00      	nop
 80015fc:	3714      	adds	r7, #20
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr

08001606 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001606:	b480      	push	{r7}
 8001608:	b083      	sub	sp, #12
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001616:	2b00      	cmp	r3, #0
 8001618:	d101      	bne.n	800161e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800161a:	2301      	movs	r3, #1
 800161c:	e000      	b.n	8001620 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800162c:	b480      	push	{r7}
 800162e:	b089      	sub	sp, #36	; 0x24
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4a2b      	ldr	r2, [pc, #172]	; (80016e8 <LL_ADC_REG_SetSequencerRanks+0xbc>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d020      	beq.n	8001682 <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	3330      	adds	r3, #48	; 0x30
 8001644:	461a      	mov	r2, r3
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	0a1b      	lsrs	r3, r3, #8
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	f003 030c 	and.w	r3, r3, #12
 8001650:	4413      	add	r3, r2
 8001652:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	f003 031f 	and.w	r3, r3, #31
 800165e:	211f      	movs	r1, #31
 8001660:	fa01 f303 	lsl.w	r3, r1, r3
 8001664:	43db      	mvns	r3, r3
 8001666:	401a      	ands	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	0e9b      	lsrs	r3, r3, #26
 800166c:	f003 011f 	and.w	r1, r3, #31
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	f003 031f 	and.w	r3, r3, #31
 8001676:	fa01 f303 	lsl.w	r3, r1, r3
 800167a:	431a      	orrs	r2, r3
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 8001680:	e02b      	b.n	80016da <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	f003 031f 	and.w	r3, r3, #31
 800168c:	210f      	movs	r1, #15
 800168e:	fa01 f303 	lsl.w	r3, r1, r3
 8001692:	43db      	mvns	r3, r3
 8001694:	401a      	ands	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d104      	bne.n	80016aa <LL_ADC_REG_SetSequencerRanks+0x7e>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	0e9b      	lsrs	r3, r3, #26
 80016a4:	f003 031f 	and.w	r3, r3, #31
 80016a8:	e010      	b.n	80016cc <LL_ADC_REG_SetSequencerRanks+0xa0>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	fa93 f3a3 	rbit	r3, r3
 80016b4:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d101      	bne.n	80016c4 <LL_ADC_REG_SetSequencerRanks+0x98>
  {
    return 32U;
 80016c0:	2320      	movs	r3, #32
 80016c2:	e003      	b.n	80016cc <LL_ADC_REG_SetSequencerRanks+0xa0>
  }
  return __builtin_clz(value);
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	fab3 f383 	clz	r3, r3
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	68b9      	ldr	r1, [r7, #8]
 80016ce:	f001 011f 	and.w	r1, r1, #31
 80016d2:	408b      	lsls	r3, r1
 80016d4:	431a      	orrs	r2, r3
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016da:	bf00      	nop
 80016dc:	3724      	adds	r7, #36	; 0x24
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	46021000 	.word	0x46021000

080016ec <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b087      	sub	sp, #28
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d107      	bne.n	8001710 <LL_ADC_REG_SetSequencerChAdd+0x24>
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	0e9b      	lsrs	r3, r3, #26
 8001704:	f003 031f 	and.w	r3, r3, #31
 8001708:	2201      	movs	r2, #1
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	e015      	b.n	800173c <LL_ADC_REG_SetSequencerChAdd+0x50>
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	fa93 f3a3 	rbit	r3, r3
 800171a:	60fb      	str	r3, [r7, #12]
  return result;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d101      	bne.n	800172a <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 8001726:	2320      	movs	r3, #32
 8001728:	e003      	b.n	8001732 <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	fab3 f383 	clz	r3, r3
 8001730:	b2db      	uxtb	r3, r3
 8001732:	f003 031f 	and.w	r3, r3, #31
 8001736:	2201      	movs	r2, #1
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001740:	431a      	orrs	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001746:	bf00      	nop
 8001748:	371c      	adds	r7, #28
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001752:	b480      	push	{r7}
 8001754:	b083      	sub	sp, #12
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
 800175a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	0e9b      	lsrs	r3, r3, #26
 8001764:	f003 031f 	and.w	r3, r3, #31
 8001768:	2101      	movs	r1, #1
 800176a:	fa01 f303 	lsl.w	r3, r1, r3
 800176e:	43db      	mvns	r3, r3
 8001770:	401a      	ands	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001776:	bf00      	nop
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
	...

08001784 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001784:	b480      	push	{r7}
 8001786:	b08d      	sub	sp, #52	; 0x34
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	4a3c      	ldr	r2, [pc, #240]	; (8001884 <LL_ADC_SetChannelSamplingTime+0x100>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d042      	beq.n	800181e <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d104      	bne.n	80017ac <LL_ADC_SetChannelSamplingTime+0x28>
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	0e9b      	lsrs	r3, r3, #26
 80017a6:	f003 021f 	and.w	r2, r3, #31
 80017aa:	e011      	b.n	80017d0 <LL_ADC_SetChannelSamplingTime+0x4c>
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b0:	6a3b      	ldr	r3, [r7, #32]
 80017b2:	fa93 f3a3 	rbit	r3, r3
 80017b6:	61fb      	str	r3, [r7, #28]
  return result;
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80017bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d101      	bne.n	80017c6 <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 80017c2:	2320      	movs	r3, #32
 80017c4:	e003      	b.n	80017ce <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 80017c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c8:	fab3 f383 	clz	r3, r3
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	0e5b      	lsrs	r3, r3, #25
 80017d4:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 80017d8:	460b      	mov	r3, r1
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	440b      	add	r3, r1
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	1ad2      	subs	r2, r2, r3
 80017e2:	4613      	mov	r3, r2
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	4413      	add	r3, r2
 80017e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	3314      	adds	r3, #20
 80017ee:	461a      	mov	r2, r3
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	0e5b      	lsrs	r3, r3, #25
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	f003 0304 	and.w	r3, r3, #4
 80017fa:	4413      	add	r3, r2
 80017fc:	62bb      	str	r3, [r7, #40]	; 0x28
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 80017fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	2107      	movs	r1, #7
 8001804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001806:	fa01 f303 	lsl.w	r3, r1, r3
 800180a:	43db      	mvns	r3, r3
 800180c:	401a      	ands	r2, r3
 800180e:	6879      	ldr	r1, [r7, #4]
 8001810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001812:	fa01 f303 	lsl.w	r3, r1, r3
 8001816:	431a      	orrs	r2, r3
 8001818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800181a:	601a      	str	r2, [r3, #0]
               ADC4_SAMPLING_TIME_CH_MASK,
               ((1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel)) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)                  \
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 800181c:	e02c      	b.n	8001878 <LL_ADC_SetChannelSamplingTime+0xf4>
    MODIFY_REG(ADCx->SMPR1,
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	695b      	ldr	r3, [r3, #20]
 8001822:	b2da      	uxtb	r2, r3
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d108      	bne.n	8001840 <LL_ADC_SetChannelSamplingTime+0xbc>
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	0e9b      	lsrs	r3, r3, #26
 8001832:	f003 031f 	and.w	r3, r3, #31
 8001836:	2101      	movs	r1, #1
 8001838:	fa01 f303 	lsl.w	r3, r1, r3
 800183c:	021b      	lsls	r3, r3, #8
 800183e:	e014      	b.n	800186a <LL_ADC_SetChannelSamplingTime+0xe6>
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	fa93 f3a3 	rbit	r3, r3
 800184a:	613b      	str	r3, [r7, #16]
  return result;
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d101      	bne.n	800185a <LL_ADC_SetChannelSamplingTime+0xd6>
    return 32U;
 8001856:	2320      	movs	r3, #32
 8001858:	e003      	b.n	8001862 <LL_ADC_SetChannelSamplingTime+0xde>
  return __builtin_clz(value);
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	fab3 f383 	clz	r3, r3
 8001860:	b2db      	uxtb	r3, r3
 8001862:	4619      	mov	r1, r3
 8001864:	2301      	movs	r3, #1
 8001866:	408b      	lsls	r3, r1
 8001868:	021b      	lsls	r3, r3, #8
 800186a:	6879      	ldr	r1, [r7, #4]
 800186c:	400b      	ands	r3, r1
 800186e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001872:	431a      	orrs	r2, r3
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	615a      	str	r2, [r3, #20]
}
 8001878:	bf00      	nop
 800187a:	3734      	adds	r7, #52	; 0x34
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	46021000 	.word	0x46021000

08001888 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80018a0:	43db      	mvns	r3, r3
 80018a2:	401a      	ands	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f003 0318 	and.w	r3, r3, #24
 80018aa:	4908      	ldr	r1, [pc, #32]	; (80018cc <LL_ADC_SetChannelSingleDiff+0x44>)
 80018ac:	40d9      	lsrs	r1, r3
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	400b      	ands	r3, r1
 80018b2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80018b6:	431a      	orrs	r2, r3
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80018be:	bf00      	nop
 80018c0:	3714      	adds	r7, #20
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	000fffff 	.word	0x000fffff

080018d0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80018e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	6093      	str	r3, [r2, #8]
}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001904:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001908:	d101      	bne.n	800190e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800190a:	2301      	movs	r3, #1
 800190c:	e000      	b.n	8001910 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800192c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001930:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	609a      	str	r2, [r3, #8]
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001954:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001958:	d101      	bne.n	800195e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800195a:	2301      	movs	r3, #1
 800195c:	e000      	b.n	8001960 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800195e:	2300      	movs	r3, #0
}
 8001960:	4618      	mov	r0, r3
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADEN);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800197c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001980:	f043 0201 	orr.w	r2, r3, #1
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	609a      	str	r2, [r3, #8]
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d101      	bne.n	80019ac <LL_ADC_IsEnabled+0x18>
 80019a8:	2301      	movs	r3, #1
 80019aa:	e000      	b.n	80019ae <LL_ADC_IsEnabled+0x1a>
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b083      	sub	sp, #12
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80019ca:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019ce:	f043 0204 	orr.w	r2, r3, #4
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	609a      	str	r2, [r3, #8]
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80019e2:	b480      	push	{r7}
 80019e4:	b083      	sub	sp, #12
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f003 0304 	and.w	r3, r3, #4
 80019f2:	2b04      	cmp	r3, #4
 80019f4:	d101      	bne.n	80019fa <LL_ADC_REG_IsConversionOngoing+0x18>
 80019f6:	2301      	movs	r3, #1
 80019f8:	e000      	b.n	80019fc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f003 0308 	and.w	r3, r3, #8
 8001a18:	2b08      	cmp	r3, #8
 8001a1a:	d101      	bne.n	8001a20 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e000      	b.n	8001a22 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
	...

08001a30 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b08a      	sub	sp, #40	; 0x28
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t tmpCFGR1 = 0UL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d101      	bne.n	8001a50 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e2e3      	b.n	8002018 <HAL_ADC_Init+0x5e8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	691b      	ldr	r3, [r3, #16]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d003      	beq.n	8001a60 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a92      	ldr	r2, [pc, #584]	; (8001ca8 <HAL_ADC_Init+0x278>)
 8001a5e:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d109      	bne.n	8001a7c <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f7fe fdff 	bl	800066c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff ff37 	bl	80018f4 <LL_ADC_IsDeepPowerDownEnabled>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d004      	beq.n	8001a96 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff ff1d 	bl	80018d0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff ff52 	bl	8001944 <LL_ADC_IsInternalRegulatorEnabled>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d115      	bne.n	8001ad2 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff ff36 	bl	800191c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ab0:	4b7e      	ldr	r3, [pc, #504]	; (8001cac <HAL_ADC_Init+0x27c>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	099b      	lsrs	r3, r3, #6
 8001ab6:	4a7e      	ldr	r2, [pc, #504]	; (8001cb0 <HAL_ADC_Init+0x280>)
 8001ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8001abc:	099b      	lsrs	r3, r3, #6
 8001abe:	3301      	adds	r3, #1
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ac4:	e002      	b.n	8001acc <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d1f9      	bne.n	8001ac6 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff ff34 	bl	8001944 <LL_ADC_IsInternalRegulatorEnabled>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d10e      	bne.n	8001b00 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001ae6:	f043 0210 	orr.w	r2, r3, #16
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001af2:	f043 0201 	orr.w	r2, r3, #1
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	67da      	str	r2, [r3, #124]	; 0x7c

    tmp_hal_status = HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff ff6c 	bl	80019e2 <LL_ADC_REG_IsConversionOngoing>
 8001b0a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001b10:	f003 0310 	and.w	r3, r3, #16
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	f040 8274 	bne.w	8002002 <HAL_ADC_Init+0x5d2>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	f040 8270 	bne.w	8002002 <HAL_ADC_Init+0x5d2>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001b26:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001b2a:	f043 0202 	orr.w	r2, r3, #2
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	679a      	str	r2, [r3, #120]	; 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff ff2c 	bl	8001994 <LL_ADC_IsEnabled>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d14e      	bne.n	8001be0 <HAL_ADC_Init+0x1b0>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a58      	ldr	r2, [pc, #352]	; (8001ca8 <HAL_ADC_Init+0x278>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d028      	beq.n	8001b9e <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a58      	ldr	r2, [pc, #352]	; (8001cb4 <HAL_ADC_Init+0x284>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d109      	bne.n	8001b6a <HAL_ADC_Init+0x13a>
 8001b56:	4857      	ldr	r0, [pc, #348]	; (8001cb4 <HAL_ADC_Init+0x284>)
 8001b58:	f7ff ff1c 	bl	8001994 <LL_ADC_IsEnabled>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	bf0c      	ite	eq
 8001b62:	2301      	moveq	r3, #1
 8001b64:	2300      	movne	r3, #0
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	e008      	b.n	8001b7c <HAL_ADC_Init+0x14c>
 8001b6a:	484f      	ldr	r0, [pc, #316]	; (8001ca8 <HAL_ADC_Init+0x278>)
 8001b6c:	f7ff ff12 	bl	8001994 <LL_ADC_IsEnabled>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	bf0c      	ite	eq
 8001b76:	2301      	moveq	r3, #1
 8001b78:	2300      	movne	r3, #0
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d02f      	beq.n	8001be0 <HAL_ADC_Init+0x1b0>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a4b      	ldr	r2, [pc, #300]	; (8001cb4 <HAL_ADC_Init+0x284>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d101      	bne.n	8001b8e <HAL_ADC_Init+0x15e>
 8001b8a:	4a4b      	ldr	r2, [pc, #300]	; (8001cb8 <HAL_ADC_Init+0x288>)
 8001b8c:	e000      	b.n	8001b90 <HAL_ADC_Init+0x160>
 8001b8e:	4a4b      	ldr	r2, [pc, #300]	; (8001cbc <HAL_ADC_Init+0x28c>)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	4619      	mov	r1, r3
 8001b96:	4610      	mov	r0, r2
 8001b98:	f7ff fc68 	bl	800146c <LL_ADC_SetCommonClock>
 8001b9c:	e020      	b.n	8001be0 <HAL_ADC_Init+0x1b0>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        MODIFY_REG(hadc->Instance->CFGR1,
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	f023 010c 	bic.w	r1, r3, #12
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d005      	beq.n	8001bc0 <HAL_ADC_Init+0x190>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	f003 030c 	and.w	r3, r3, #12
 8001bbe:	e000      	b.n	8001bc2 <HAL_ADC_Init+0x192>
 8001bc0:	230c      	movs	r3, #12
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	6812      	ldr	r2, [r2, #0]
 8001bc6:	430b      	orrs	r3, r1
 8001bc8:	60d3      	str	r3, [r2, #12]
                   ADC_CFGR1_RES,
                   __LL_ADC_RESOLUTION_ADC1_TO_ADC4(hadc->Init.Resolution));   /* Convert resolution for the ADC4 */

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8001bca:	4b3c      	ldr	r3, [pc, #240]	; (8001cbc <HAL_ADC_Init+0x28c>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001bda:	4938      	ldr	r1, [pc, #224]	; (8001cbc <HAL_ADC_Init+0x28c>)
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a30      	ldr	r2, [pc, #192]	; (8001ca8 <HAL_ADC_Init+0x278>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d010      	beq.n	8001c0c <HAL_ADC_Init+0x1dc>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bf0:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001bf6:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8001bfc:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001c04:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8001c06:	4313      	orrs	r3, r2
 8001c08:	623b      	str	r3, [r7, #32]
 8001c0a:	e030      	b.n	8001c6e <HAL_ADC_Init+0x23e>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	7f1b      	ldrb	r3, [r3, #28]
 8001c10:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c18:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c1a:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001c20:	2a00      	cmp	r2, #0
 8001c22:	d002      	beq.n	8001c2a <HAL_ADC_Init+0x1fa>
 8001c24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c28:	e000      	b.n	8001c2c <HAL_ADC_Init+0x1fc>
 8001c2a:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001c2c:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001c32:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	da04      	bge.n	8001c46 <HAL_ADC_Init+0x216>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c44:	e001      	b.n	8001c4a <HAL_ADC_Init+0x21a>
 8001c46:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                            |
 8001c4a:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4918      	ldr	r1, [pc, #96]	; (8001cb4 <HAL_ADC_Init+0x284>)
 8001c52:	428b      	cmp	r3, r1
 8001c54:	d103      	bne.n	8001c5e <HAL_ADC_Init+0x22e>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c5c:	e003      	b.n	8001c66 <HAL_ADC_Init+0x236>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c64:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8001c66:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c68:	6a3a      	ldr	r2, [r7, #32]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d12f      	bne.n	8001cd8 <HAL_ADC_Init+0x2a8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a0a      	ldr	r2, [pc, #40]	; (8001ca8 <HAL_ADC_Init+0x278>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d007      	beq.n	8001c92 <HAL_ADC_Init+0x262>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	3b01      	subs	r3, #1
 8001c88:	045b      	lsls	r3, r3, #17
 8001c8a:	6a3a      	ldr	r2, [r7, #32]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	623b      	str	r3, [r7, #32]
 8001c90:	e022      	b.n	8001cd8 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d111      	bne.n	8001cc0 <HAL_ADC_Init+0x290>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001c9c:	6a3b      	ldr	r3, [r7, #32]
 8001c9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ca2:	623b      	str	r3, [r7, #32]
 8001ca4:	e018      	b.n	8001cd8 <HAL_ADC_Init+0x2a8>
 8001ca6:	bf00      	nop
 8001ca8:	46021000 	.word	0x46021000
 8001cac:	20000000 	.word	0x20000000
 8001cb0:	053e2d63 	.word	0x053e2d63
 8001cb4:	42028000 	.word	0x42028000
 8001cb8:	42028308 	.word	0x42028308
 8001cbc:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001cc4:	f043 0220 	orr.w	r2, r3, #32
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001cd0:	f043 0201 	orr.w	r2, r3, #1
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	67da      	str	r2, [r3, #124]	; 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a93      	ldr	r2, [pc, #588]	; (8001f2c <HAL_ADC_Init+0x4fc>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d018      	beq.n	8001d14 <HAL_ADC_Init+0x2e4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d009      	beq.n	8001cfe <HAL_ADC_Init+0x2ce>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cee:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	6a3a      	ldr	r2, [r7, #32]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	68da      	ldr	r2, [r3, #12]
 8001d04:	4b8a      	ldr	r3, [pc, #552]	; (8001f30 <HAL_ADC_Init+0x500>)
 8001d06:	4013      	ands	r3, r2
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	6812      	ldr	r2, [r2, #0]
 8001d0c:	6a39      	ldr	r1, [r7, #32]
 8001d0e:	430b      	orrs	r3, r1
 8001d10:	60d3      	str	r3, [r2, #12]
 8001d12:	e033      	b.n	8001d7c <HAL_ADC_Init+0x34c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d009      	beq.n	8001d30 <HAL_ADC_Init+0x300>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d20:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	6a3a      	ldr	r2, [r7, #32]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	f423 33bf 	bic.w	r3, r3, #97792	; 0x17e00
 8001d3a:	f423 73f9 	bic.w	r3, r3, #498	; 0x1f2
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	6812      	ldr	r2, [r2, #0]
 8001d42:	6a39      	ldr	r1, [r7, #32]
 8001d44:	430b      	orrs	r3, r1
 8001d46:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN   |
                 ADC4_CFGR1_SCANDIR |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a1b      	ldr	r3, [r3, #32]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d008      	beq.n	8001d62 <HAL_ADC_Init+0x332>
      {
        SET_BIT(hadc->Instance->PW, hadc->Init.LowPowerAutoPowerOff);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a1a      	ldr	r2, [r3, #32]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	645a      	str	r2, [r3, #68]	; 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d008      	beq.n	8001d7c <HAL_ADC_Init+0x34c>
      {
        SET_BIT(hadc->Instance->PW, hadc->Init.VrefProtection);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	645a      	str	r2, [r3, #68]	; 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a6a      	ldr	r2, [pc, #424]	; (8001f2c <HAL_ADC_Init+0x4fc>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	f000 8093 	beq.w	8001eae <HAL_ADC_Init+0x47e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff fe28 	bl	80019e2 <LL_ADC_REG_IsConversionOngoing>
 8001d92:	6138      	str	r0, [r7, #16]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff fe35 	bl	8001a08 <LL_ADC_INJ_IsConversionOngoing>
 8001d9e:	60f8      	str	r0, [r7, #12]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d161      	bne.n	8001e6a <HAL_ADC_Init+0x43a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d15e      	bne.n	8001e6a <HAL_ADC_Init+0x43a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	7f1b      	ldrb	r3, [r3, #28]
 8001db0:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	495f      	ldr	r1, [pc, #380]	; (8001f34 <HAL_ADC_Init+0x504>)
 8001db8:	428b      	cmp	r3, r1
 8001dba:	d102      	bne.n	8001dc2 <HAL_ADC_Init+0x392>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dc0:	e002      	b.n	8001dc8 <HAL_ADC_Init+0x398>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dc6:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001dd6:	f023 0303 	bic.w	r3, r3, #3
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	6812      	ldr	r2, [r2, #0]
 8001dde:	6a39      	ldr	r1, [r7, #32]
 8001de0:	430b      	orrs	r3, r1
 8001de2:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d007      	beq.n	8001dfc <HAL_ADC_Init+0x3cc>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	4619      	mov	r1, r3
 8001df6:	4610      	mov	r0, r2
 8001df8:	f7ff fbc3 	bl	8001582 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d11e      	bne.n	8001e44 <HAL_ADC_Init+0x414>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e0a:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	691a      	ldr	r2, [r3, #16]
 8001e12:	4b49      	ldr	r3, [pc, #292]	; (8001f38 <HAL_ADC_Init+0x508>)
 8001e14:	4013      	ands	r3, r2
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001e1a:	0411      	lsls	r1, r2, #16
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001e20:	4311      	orrs	r1, r2
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8001e26:	4311      	orrs	r1, r2
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8001e2c:	4311      	orrs	r1, r2
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001e32:	0892      	lsrs	r2, r2, #2
 8001e34:	430a      	orrs	r2, r1
 8001e36:	431a      	orrs	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f042 0201 	orr.w	r2, r2, #1
 8001e40:	611a      	str	r2, [r3, #16]
 8001e42:	e007      	b.n	8001e54 <HAL_ADC_Init+0x424>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	691a      	ldr	r2, [r3, #16]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f022 0201 	bic.w	r2, r2, #1
 8001e52:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	430a      	orrs	r2, r1
 8001e68:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d10c      	bne.n	8001e8c <HAL_ADC_Init+0x45c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e78:	f023 010f 	bic.w	r1, r3, #15
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e80:	1e5a      	subs	r2, r3, #1
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	430a      	orrs	r2, r1
 8001e88:	631a      	str	r2, [r3, #48]	; 0x30
 8001e8a:	e007      	b.n	8001e9c <HAL_ADC_Init+0x46c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f022 020f 	bic.w	r2, r2, #15
 8001e9a:	631a      	str	r2, [r3, #48]	; 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001ea0:	f023 0303 	bic.w	r3, r3, #3
 8001ea4:	f043 0201 	orr.w	r2, r3, #1
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001eac:	e0b2      	b.n	8002014 <HAL_ADC_Init+0x5e4>
      /*  - oversampling enable                                                 */
      /*  - oversampling ratio                                                  */
      /*  - oversampling shift                                                  */
      /*  - oversampling discontinuous mode (triggered mode)                    */
      /*  - trigger frequency mode                                              */
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
                   hadc->Init.Oversampling.RightBitShift |
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8001eb6:	431a      	orrs	r2, r3
                   hadc->Init.Oversampling.TriggeredMode |
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                   hadc->Init.Oversampling.RightBitShift |
 8001ebc:	431a      	orrs	r2, r3
                   hadc->Init.TriggerFrequencyMode
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                   hadc->Init.Oversampling.TriggeredMode |
 8001ec2:	4313      	orrs	r3, r2
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8001ec4:	69fa      	ldr	r2, [r7, #28]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	61fb      	str	r3, [r7, #28]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d103      	bne.n	8001edc <HAL_ADC_Init+0x4ac>
      {
        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	691a      	ldr	r2, [r3, #16]
 8001ee2:	4b16      	ldr	r3, [pc, #88]	; (8001f3c <HAL_ADC_Init+0x50c>)
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	6812      	ldr	r2, [r2, #0]
 8001eea:	69f9      	ldr	r1, [r7, #28]
 8001eec:	430b      	orrs	r3, r1
 8001eee:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6818      	ldr	r0, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ef8:	461a      	mov	r2, r3
 8001efa:	2100      	movs	r1, #0
 8001efc:	f7ff fb64 	bl	80015c8 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6818      	ldr	r0, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f08:	461a      	mov	r2, r3
 8001f0a:	f06f 01fb 	mvn.w	r1, #251	; 0xfb
 8001f0e:	f7ff fb5b 	bl	80015c8 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d112      	bne.n	8001f40 <HAL_ADC_Init+0x510>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f062 020f 	orn	r2, r2, #15
 8001f28:	629a      	str	r2, [r3, #40]	; 0x28
 8001f2a:	e044      	b.n	8001fb6 <HAL_ADC_Init+0x586>
 8001f2c:	46021000 	.word	0x46021000
 8001f30:	fff0c013 	.word	0xfff0c013
 8001f34:	42028000 	.word	0x42028000
 8001f38:	fc00f81e 	.word	0xfc00f81e
 8001f3c:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001f48:	d135      	bne.n	8001fb6 <HAL_ADC_Init+0x586>
      {
        /* Count number of ranks available in HAL ADC handle variable */
        uint32_t ADCGroupRegularSequencerRanksCount;

        /* Parse all ranks from 1 to 8 */
        for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL);                    \
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	61bb      	str	r3, [r7, #24]
 8001f4e:	e00d      	b.n	8001f6c <HAL_ADC_Init+0x53c>
             ADCGroupRegularSequencerRanksCount++)
        {
          /* Check each sequencer rank until value of end of sequence */
          if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f5e:	f003 030f 	and.w	r3, r3, #15
 8001f62:	2b0f      	cmp	r3, #15
 8001f64:	d006      	beq.n	8001f74 <HAL_ADC_Init+0x544>
             ADCGroupRegularSequencerRanksCount++)
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	61bb      	str	r3, [r7, #24]
        for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL);                    \
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	2b07      	cmp	r3, #7
 8001f70:	d9ee      	bls.n	8001f50 <HAL_ADC_Init+0x520>
 8001f72:	e000      	b.n	8001f76 <HAL_ADC_Init+0x546>
              ADC_CHSELR_SQ1)
          {
            break;
 8001f74:	bf00      	nop
          }
        }

        if (ADCGroupRegularSequencerRanksCount == 1UL)
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d108      	bne.n	8001f8e <HAL_ADC_Init+0x55e>
        {
          /* Set ADC group regular sequencer:                                   */
          /* Set sequencer scan length by clearing ranks above rank 1           */
          /* and do not modify rank 1 value.                                    */
          SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f062 020f 	orn	r2, r2, #15
 8001f8a:	629a      	str	r2, [r3, #40]	; 0x28
 8001f8c:	e013      	b.n	8001fb6 <HAL_ADC_Init+0x586>
          /*          therefore after the first call of "HAL_ADC_Init()",        */
          /*          each rank corresponding to parameter "NbrOfConversion"    */
          /*          must be set using "HAL_ADC_ConfigChannel()".              */
          /*  - Set sequencer scan length by clearing ranks above maximum rank  */
          /*    and do not modify other ranks value.                            */
          MODIFY_REG(hadc->Instance->CHSELR,
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	f003 031c 	and.w	r3, r3, #28
 8001fa0:	f06f 020f 	mvn.w	r2, #15
 8001fa4:	fa02 f103 	lsl.w	r1, r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	629a      	str	r2, [r3, #40]	; 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68da      	ldr	r2, [r3, #12]
 8001fbc:	4b18      	ldr	r3, [pc, #96]	; (8002020 <HAL_ADC_Init+0x5f0>)
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	6a3a      	ldr	r2, [r7, #32]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d10b      	bne.n	8001fde <HAL_ADC_Init+0x5ae>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001fd0:	f023 0303 	bic.w	r3, r3, #3
 8001fd4:	f043 0201 	orr.w	r2, r3, #1
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001fdc:	e01a      	b.n	8002014 <HAL_ADC_Init+0x5e4>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001fe2:	f023 0312 	bic.w	r3, r3, #18
 8001fe6:	f043 0210 	orr.w	r2, r3, #16
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	679a      	str	r2, [r3, #120]	; 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001ff2:	f043 0201 	orr.w	r2, r3, #1
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	67da      	str	r2, [r3, #124]	; 0x7c

        tmp_hal_status = HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002000:	e008      	b.n	8002014 <HAL_ADC_Init+0x5e4>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002006:	f043 0210 	orr.w	r2, r3, #16
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	679a      	str	r2, [r3, #120]	; 0x78

    tmp_hal_status = HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return tmp_hal_status;
 8002014:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002018:	4618      	mov	r0, r3
 800201a:	3728      	adds	r7, #40	; 0x28
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	833ffff3 	.word	0x833ffff3

08002024 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff fcd6 	bl	80019e2 <LL_ADC_REG_IsConversionOngoing>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d15d      	bne.n	80020f8 <HAL_ADC_Start+0xd4>
  {
    __HAL_LOCK(hadc);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002042:	2b01      	cmp	r3, #1
 8002044:	d101      	bne.n	800204a <HAL_ADC_Start+0x26>
 8002046:	2302      	movs	r3, #2
 8002048:	e059      	b.n	80020fe <HAL_ADC_Start+0xda>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2201      	movs	r2, #1
 800204e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 febc 	bl	8002dd0 <ADC_Enable>
 8002058:	4603      	mov	r3, r0
 800205a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800205c:	7bfb      	ldrb	r3, [r7, #15]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d145      	bne.n	80020ee <HAL_ADC_Start+0xca>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002066:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800206a:	f023 0301 	bic.w	r3, r3, #1
 800206e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	679a      	str	r2, [r3, #120]	; 0x78
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a23      	ldr	r2, [pc, #140]	; (8002108 <HAL_ADC_Start+0xe4>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d011      	beq.n	80020a4 <HAL_ADC_Start+0x80>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */
        /* Set ADC error code */
        /* Check if a conversion is on going on ADC group injected */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002084:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002088:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800208c:	d106      	bne.n	800209c <HAL_ADC_Start+0x78>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002092:	f023 0206 	bic.w	r2, r3, #6
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	67da      	str	r2, [r3, #124]	; 0x7c
 800209a:	e006      	b.n	80020aa <HAL_ADC_Start+0x86>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	67da      	str	r2, [r3, #124]	; 0x7c
 80020a2:	e002      	b.n	80020aa <HAL_ADC_Start+0x86>
      }
      else
      {
        /* Set ADC error code */
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	67da      	str	r2, [r3, #124]	; 0x7c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	221c      	movs	r2, #28
 80020b0:	601a      	str	r2, [r3, #0]

      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */

      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a12      	ldr	r2, [pc, #72]	; (8002108 <HAL_ADC_Start+0xe4>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d00e      	beq.n	80020e2 <HAL_ADC_Start+0xbe>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
          }

        }
#else
        if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_JAUTO) != 0UL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d007      	beq.n	80020e2 <HAL_ADC_Start+0xbe>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80020d6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80020da:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	679a      	str	r2, [r3, #120]	; 0x78
        }
#endif /* ADC_MULTIMODE_SUPPORT */
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7ff fc67 	bl	80019ba <LL_ADC_REG_StartConversion>
 80020ec:	e006      	b.n	80020fc <HAL_ADC_Start+0xd8>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 80020f6:	e001      	b.n	80020fc <HAL_ADC_Start+0xd8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80020f8:	2302      	movs	r3, #2
 80020fa:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 80020fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	46021000 	.word	0x46021000

0800210c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	2b08      	cmp	r3, #8
 800211c:	d102      	bne.n	8002124 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800211e:	2308      	movs	r3, #8
 8002120:	617b      	str	r3, [r7, #20]
 8002122:	e027      	b.n	8002174 <HAL_ADC_PollForConversion+0x68>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */

    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a6a      	ldr	r2, [pc, #424]	; (80022d4 <HAL_ADC_PollForConversion+0x1c8>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d011      	beq.n	8002152 <HAL_ADC_PollForConversion+0x46>
          tmp_flag_end = (ADC_FLAG_EOC);
        }
      }
#else
      /* Check ADC DMA mode */
      if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT_0) != 0UL)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	f003 0301 	and.w	r3, r3, #1
 8002138:	2b00      	cmp	r3, #0
 800213a:	d007      	beq.n	800214c <HAL_ADC_PollForConversion+0x40>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002140:	f043 0220 	orr.w	r2, r3, #32
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	679a      	str	r2, [r3, #120]	; 0x78
        return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e0be      	b.n	80022ca <HAL_ADC_PollForConversion+0x1be>
      }
      else
      {
        tmp_flag_end = (ADC_FLAG_EOC);
 800214c:	2304      	movs	r3, #4
 800214e:	617b      	str	r3, [r7, #20]
 8002150:	e010      	b.n	8002174 <HAL_ADC_PollForConversion+0x68>
      }
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      if ((hadc->Instance->CFGR1 & ADC4_CFGR1_DMAEN) != 0UL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	f003 0301 	and.w	r3, r3, #1
 800215c:	2b00      	cmp	r3, #0
 800215e:	d007      	beq.n	8002170 <HAL_ADC_PollForConversion+0x64>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002164:	f043 0220 	orr.w	r2, r3, #32
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	679a      	str	r2, [r3, #120]	; 0x78
        return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e0ac      	b.n	80022ca <HAL_ADC_PollForConversion+0x1be>
      }
      else
      {
        tmp_flag_end = (ADC_FLAG_EOC);
 8002170:	2304      	movs	r3, #4
 8002172:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002174:	f7ff f93c 	bl	80013f0 <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800217a:	e021      	b.n	80021c0 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002182:	d01d      	beq.n	80021c0 <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002184:	f7ff f934 	bl	80013f0 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	683a      	ldr	r2, [r7, #0]
 8002190:	429a      	cmp	r2, r3
 8002192:	d302      	bcc.n	800219a <HAL_ADC_PollForConversion+0x8e>
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d112      	bne.n	80021c0 <HAL_ADC_PollForConversion+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	4013      	ands	r3, r2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d10b      	bne.n	80021c0 <HAL_ADC_PollForConversion+0xb4>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80021ac:	f043 0204 	orr.w	r2, r3, #4
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	679a      	str	r2, [r3, #120]	; 0x78

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e084      	b.n	80022ca <HAL_ADC_PollForConversion+0x1be>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	4013      	ands	r3, r2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d0d6      	beq.n	800217c <HAL_ADC_PollForConversion+0x70>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80021d2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff fa11 	bl	8001606 <LL_ADC_REG_IsTriggerSourceSWStart>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d06e      	beq.n	80022c8 <HAL_ADC_PollForConversion+0x1bc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d169      	bne.n	80022c8 <HAL_ADC_PollForConversion+0x1bc>
     )
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a36      	ldr	r2, [pc, #216]	; (80022d4 <HAL_ADC_PollForConversion+0x1c8>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d02e      	beq.n	800225c <HAL_ADC_PollForConversion+0x150>
    {
      /* Check whether end of sequence is reached */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0308 	and.w	r3, r3, #8
 8002208:	2b08      	cmp	r3, #8
 800220a:	d111      	bne.n	8002230 <HAL_ADC_PollForConversion+0x124>
      {
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002210:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	679a      	str	r2, [r3, #120]	; 0x78

        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800221c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d105      	bne.n	8002230 <HAL_ADC_PollForConversion+0x124>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002228:	f043 0201 	orr.w	r2, r3, #1
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	679a      	str	r2, [r3, #120]	; 0x78
        tmp_adc_master = ADC_MASTER_REGISTER(hadc);
        tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
      }
#else
      /* Retrieve handle ADC CFGR register */
      tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */
      /* Clear polled flag */
      if (tmp_flag_end == ADC_FLAG_EOS)
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	2b08      	cmp	r3, #8
 800223c:	d104      	bne.n	8002248 <HAL_ADC_PollForConversion+0x13c>
      {
        __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2208      	movs	r2, #8
 8002244:	601a      	str	r2, [r3, #0]
 8002246:	e03f      	b.n	80022c8 <HAL_ADC_PollForConversion+0x1bc>
      else
      {
        /* Clear end of conversion EOC flag of regular group if low power feature */
        /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
        /* until data register is read using function HAL_ADC_GetValue().         */
        if (READ_BIT(tmp_cfgr, ADC_CFGR1_AUTDLY) == 0UL)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d13a      	bne.n	80022c8 <HAL_ADC_PollForConversion+0x1bc>
        {
          __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	220c      	movs	r2, #12
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	e035      	b.n	80022c8 <HAL_ADC_PollForConversion+0x1bc>
      }
    }
    else
    {
      /* Check whether end of sequence is reached */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0308 	and.w	r3, r3, #8
 8002266:	2b08      	cmp	r3, #8
 8002268:	d126      	bne.n	80022b8 <HAL_ADC_PollForConversion+0x1ac>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
        /* ADSTART==0 (no conversion on going)                                  */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff fbb7 	bl	80019e2 <LL_ADC_REG_IsConversionOngoing>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d112      	bne.n	80022a0 <HAL_ADC_PollForConversion+0x194>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in          */
          /* HAL_Start_IT(), but is not disabled here because can be used       */
          /* by overrun IRQ process below.                                      */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	685a      	ldr	r2, [r3, #4]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f022 020c 	bic.w	r2, r2, #12
 8002288:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800228e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002292:	f023 0301 	bic.w	r3, r3, #1
 8002296:	f043 0201 	orr.w	r2, r3, #1
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	679a      	str	r2, [r3, #120]	; 0x78
 800229e:	e00b      	b.n	80022b8 <HAL_ADC_PollForConversion+0x1ac>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022a4:	f043 0220 	orr.w	r2, r3, #32
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022b0:	f043 0201 	orr.w	r2, r3, #1
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	67da      	str	r2, [r3, #124]	; 0x7c
      }

      /* Clear end of conversion flag of regular group if low power feature       */
      /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
      /* until data register is read using function HAL_ADC_GetValue().           */
      if (hadc->Init.LowPowerAutoWait == DISABLE)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	7f1b      	ldrb	r3, [r3, #28]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d103      	bne.n	80022c8 <HAL_ADC_PollForConversion+0x1bc>
      {
        /* Clear regular group conversion flag */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	220c      	movs	r2, #12
 80022c6:	601a      	str	r2, [r3, #0]
      }

    }
  }

  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3718      	adds	r7, #24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	46021000 	.word	0x46021000

080022d8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
	...

080022f4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b0a4      	sub	sp, #144	; 0x90
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022fe:	2300      	movs	r3, #0
 8002300:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002304:	2300      	movs	r3, #0
 8002306:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a94      	ldr	r2, [pc, #592]	; (8002560 <HAL_ADC_ConfigChannel+0x26c>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d103      	bne.n	800231a <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002320:	2b01      	cmp	r3, #1
 8002322:	d102      	bne.n	800232a <HAL_ADC_ConfigChannel+0x36>
 8002324:	2302      	movs	r3, #2
 8002326:	f000 bd4b 	b.w	8002dc0 <HAL_ADC_ConfigChannel+0xacc>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2201      	movs	r2, #1
 800232e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff fb53 	bl	80019e2 <LL_ADC_REG_IsConversionOngoing>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	f040 852b 	bne.w	8002d9a <HAL_ADC_ConfigChannel+0xaa6>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a85      	ldr	r2, [pc, #532]	; (8002560 <HAL_ADC_ConfigChannel+0x26c>)
 800234a:	4293      	cmp	r3, r2
 800234c:	f000 827f 	beq.w	800284e <HAL_ADC_ConfigChannel+0x55a>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d108      	bne.n	800236e <HAL_ADC_ConfigChannel+0x7a>
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	0e9b      	lsrs	r3, r3, #26
 8002362:	f003 031f 	and.w	r3, r3, #31
 8002366:	2201      	movs	r2, #1
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	e016      	b.n	800239c <HAL_ADC_ConfigChannel+0xa8>
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002374:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002376:	fa93 f3a3 	rbit	r3, r3
 800237a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800237c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800237e:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002380:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_ADC_ConfigChannel+0x96>
    return 32U;
 8002386:	2320      	movs	r3, #32
 8002388:	e003      	b.n	8002392 <HAL_ADC_ConfigChannel+0x9e>
  return __builtin_clz(value);
 800238a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800238c:	fab3 f383 	clz	r3, r3
 8002390:	b2db      	uxtb	r3, r3
 8002392:	f003 031f 	and.w	r3, r3, #31
 8002396:	2201      	movs	r2, #1
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	6812      	ldr	r2, [r2, #0]
 80023a0:	69d1      	ldr	r1, [r2, #28]
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	6812      	ldr	r2, [r2, #0]
 80023a6:	430b      	orrs	r3, r1
 80023a8:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6818      	ldr	r0, [r3, #0]
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	6859      	ldr	r1, [r3, #4]
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	461a      	mov	r2, r3
 80023b8:	f7ff f938 	bl	800162c <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff fb0e 	bl	80019e2 <LL_ADC_REG_IsConversionOngoing>
 80023c6:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff fb1a 	bl	8001a08 <LL_ADC_INJ_IsConversionOngoing>
 80023d4:	67f8      	str	r0, [r7, #124]	; 0x7c
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f040 8087 	bne.w	80024ee <HAL_ADC_ConfigChannel+0x1fa>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f040 8083 	bne.w	80024ee <HAL_ADC_ConfigChannel+0x1fa>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6818      	ldr	r0, [r3, #0]
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	6819      	ldr	r1, [r3, #0]
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	461a      	mov	r2, r3
 80023f6:	f7ff f9c5 	bl	8001784 <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	695a      	ldr	r2, [r3, #20]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	089b      	lsrs	r3, r3, #2
 8002406:	f003 0303 	and.w	r3, r3, #3
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	67bb      	str	r3, [r7, #120]	; 0x78

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	2b04      	cmp	r3, #4
 8002418:	d021      	beq.n	800245e <HAL_ADC_ConfigChannel+0x16a>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6818      	ldr	r0, [r3, #0]
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	6919      	ldr	r1, [r3, #16]
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002428:	f7ff f854 	bl	80014d4 <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6818      	ldr	r0, [r3, #0]
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	6919      	ldr	r1, [r3, #16]
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	69db      	ldr	r3, [r3, #28]
 8002438:	461a      	mov	r2, r3
 800243a:	f7ff f86c 	bl	8001516 <LL_ADC_SetOffsetSign>
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,                  \
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6818      	ldr	r0, [r3, #0]
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	6919      	ldr	r1, [r3, #16]
                                           (pConfig->OffsetSignedSaturation == ENABLE)             \
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	7e5b      	ldrb	r3, [r3, #25]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,                  \
 800244a:	2b01      	cmp	r3, #1
 800244c:	d102      	bne.n	8002454 <HAL_ADC_ConfigChannel+0x160>
 800244e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002452:	e000      	b.n	8002456 <HAL_ADC_ConfigChannel+0x162>
 8002454:	2300      	movs	r3, #0
 8002456:	461a      	mov	r2, r3
 8002458:	f7ff f878 	bl	800154c <LL_ADC_SetOffsetSignedSaturation>
 800245c:	e047      	b.n	80024ee <HAL_ADC_ConfigChannel+0x1fa>
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
            If this is the case, offset OFRx is disabled since
            pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(pConfig->Channel))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002464:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	06db      	lsls	r3, r3, #27
 800246e:	429a      	cmp	r2, r3
 8002470:	d107      	bne.n	8002482 <HAL_ADC_ConfigChannel+0x18e>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSAT);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8002480:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(pConfig->Channel))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002488:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	06db      	lsls	r3, r3, #27
 8002492:	429a      	cmp	r2, r3
 8002494:	d107      	bne.n	80024a6 <HAL_ADC_ConfigChannel+0x1b2>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSAT);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80024a4:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(pConfig->Channel))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024ac:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	06db      	lsls	r3, r3, #27
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d107      	bne.n	80024ca <HAL_ADC_ConfigChannel+0x1d6>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSAT);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80024c8:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(pConfig->Channel))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024d0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	06db      	lsls	r3, r3, #27
 80024da:	429a      	cmp	r2, r3
 80024dc:	d107      	bne.n	80024ee <HAL_ADC_ConfigChannel+0x1fa>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSAT);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80024ec:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff fa4e 	bl	8001994 <LL_ADC_IsEnabled>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	f040 845a 	bne.w	8002db4 <HAL_ADC_ConfigChannel+0xac0>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6818      	ldr	r0, [r3, #0]
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	6819      	ldr	r1, [r3, #0]
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	461a      	mov	r2, r3
 800250e:	f7ff f9bb 	bl	8001888 <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800251a:	f040 80d9 	bne.w	80026d0 <HAL_ADC_ConfigChannel+0x3dc>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d10b      	bne.n	8002542 <HAL_ADC_ConfigChannel+0x24e>
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	0e9b      	lsrs	r3, r3, #26
 8002530:	3301      	adds	r3, #1
 8002532:	f003 031f 	and.w	r3, r3, #31
 8002536:	2b09      	cmp	r3, #9
 8002538:	bf94      	ite	ls
 800253a:	2301      	movls	r3, #1
 800253c:	2300      	movhi	r3, #0
 800253e:	b2db      	uxtb	r3, r3
 8002540:	e01c      	b.n	800257c <HAL_ADC_ConfigChannel+0x288>
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002548:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800254a:	fa93 f3a3 	rbit	r3, r3
 800254e:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002550:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002552:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002554:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002556:	2b00      	cmp	r3, #0
 8002558:	d104      	bne.n	8002564 <HAL_ADC_ConfigChannel+0x270>
    return 32U;
 800255a:	2320      	movs	r3, #32
 800255c:	e006      	b.n	800256c <HAL_ADC_ConfigChannel+0x278>
 800255e:	bf00      	nop
 8002560:	46021000 	.word	0x46021000
  return __builtin_clz(value);
 8002564:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002566:	fab3 f383 	clz	r3, r3
 800256a:	b2db      	uxtb	r3, r3
 800256c:	3301      	adds	r3, #1
 800256e:	f003 031f 	and.w	r3, r3, #31
 8002572:	2b09      	cmp	r3, #9
 8002574:	bf94      	ite	ls
 8002576:	2301      	movls	r3, #1
 8002578:	2300      	movhi	r3, #0
 800257a:	b2db      	uxtb	r3, r3
 800257c:	2b00      	cmp	r3, #0
 800257e:	d04d      	beq.n	800261c <HAL_ADC_ConfigChannel+0x328>
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d107      	bne.n	800259c <HAL_ADC_ConfigChannel+0x2a8>
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	0e9b      	lsrs	r3, r3, #26
 8002592:	3301      	adds	r3, #1
 8002594:	069b      	lsls	r3, r3, #26
 8002596:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800259a:	e015      	b.n	80025c8 <HAL_ADC_ConfigChannel+0x2d4>
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025a4:	fa93 f3a3 	rbit	r3, r3
 80025a8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80025aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80025ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d101      	bne.n	80025b8 <HAL_ADC_ConfigChannel+0x2c4>
    return 32U;
 80025b4:	2320      	movs	r3, #32
 80025b6:	e003      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80025b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025ba:	fab3 f383 	clz	r3, r3
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	3301      	adds	r3, #1
 80025c2:	069b      	lsls	r3, r3, #26
 80025c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d109      	bne.n	80025e8 <HAL_ADC_ConfigChannel+0x2f4>
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	0e9b      	lsrs	r3, r3, #26
 80025da:	3301      	adds	r3, #1
 80025dc:	f003 031f 	and.w	r3, r3, #31
 80025e0:	2101      	movs	r1, #1
 80025e2:	fa01 f303 	lsl.w	r3, r1, r3
 80025e6:	e017      	b.n	8002618 <HAL_ADC_ConfigChannel+0x324>
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025f0:	fa93 f3a3 	rbit	r3, r3
 80025f4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80025f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025f8:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80025fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8002600:	2320      	movs	r3, #32
 8002602:	e003      	b.n	800260c <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8002604:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002606:	fab3 f383 	clz	r3, r3
 800260a:	b2db      	uxtb	r3, r3
 800260c:	3301      	adds	r3, #1
 800260e:	f003 031f 	and.w	r3, r3, #31
 8002612:	2101      	movs	r1, #1
 8002614:	fa01 f303 	lsl.w	r3, r1, r3
 8002618:	4313      	orrs	r3, r2
 800261a:	e04e      	b.n	80026ba <HAL_ADC_ConfigChannel+0x3c6>
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d107      	bne.n	8002638 <HAL_ADC_ConfigChannel+0x344>
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	0e9b      	lsrs	r3, r3, #26
 800262e:	3301      	adds	r3, #1
 8002630:	069b      	lsls	r3, r3, #26
 8002632:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002636:	e015      	b.n	8002664 <HAL_ADC_ConfigChannel+0x370>
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002640:	fa93 f3a3 	rbit	r3, r3
 8002644:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002648:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800264a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800264c:	2b00      	cmp	r3, #0
 800264e:	d101      	bne.n	8002654 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002650:	2320      	movs	r3, #32
 8002652:	e003      	b.n	800265c <HAL_ADC_ConfigChannel+0x368>
  return __builtin_clz(value);
 8002654:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002656:	fab3 f383 	clz	r3, r3
 800265a:	b2db      	uxtb	r3, r3
 800265c:	3301      	adds	r3, #1
 800265e:	069b      	lsls	r3, r3, #26
 8002660:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d109      	bne.n	8002684 <HAL_ADC_ConfigChannel+0x390>
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	0e9b      	lsrs	r3, r3, #26
 8002676:	3301      	adds	r3, #1
 8002678:	f003 031f 	and.w	r3, r3, #31
 800267c:	2101      	movs	r1, #1
 800267e:	fa01 f303 	lsl.w	r3, r1, r3
 8002682:	e017      	b.n	80026b4 <HAL_ADC_ConfigChannel+0x3c0>
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800268c:	fa93 f3a3 	rbit	r3, r3
 8002690:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002694:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002698:	2b00      	cmp	r3, #0
 800269a:	d101      	bne.n	80026a0 <HAL_ADC_ConfigChannel+0x3ac>
    return 32U;
 800269c:	2320      	movs	r3, #32
 800269e:	e003      	b.n	80026a8 <HAL_ADC_ConfigChannel+0x3b4>
  return __builtin_clz(value);
 80026a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026a2:	fab3 f383 	clz	r3, r3
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	3301      	adds	r3, #1
 80026aa:	f003 031f 	and.w	r3, r3, #31
 80026ae:	2101      	movs	r1, #1
 80026b0:	fa01 f303 	lsl.w	r3, r1, r3
 80026b4:	4313      	orrs	r3, r2
 80026b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6818      	ldr	r0, [r3, #0]
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	461a      	mov	r2, r3
 80026c8:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80026cc:	f7ff f85a 	bl	8001784 <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f280 836d 	bge.w	8002db4 <HAL_ADC_ConfigChannel+0xac0>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a98      	ldr	r2, [pc, #608]	; (8002940 <HAL_ADC_ConfigChannel+0x64c>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d101      	bne.n	80026e8 <HAL_ADC_ConfigChannel+0x3f4>
 80026e4:	4b97      	ldr	r3, [pc, #604]	; (8002944 <HAL_ADC_ConfigChannel+0x650>)
 80026e6:	e000      	b.n	80026ea <HAL_ADC_ConfigChannel+0x3f6>
 80026e8:	4b97      	ldr	r3, [pc, #604]	; (8002948 <HAL_ADC_ConfigChannel+0x654>)
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7fe fee4 	bl	80014b8 <LL_ADC_GetCommonPathInternalCh>
 80026f0:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a91      	ldr	r2, [pc, #580]	; (8002940 <HAL_ADC_ConfigChannel+0x64c>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d109      	bne.n	8002712 <HAL_ADC_ConfigChannel+0x41e>
 80026fe:	4890      	ldr	r0, [pc, #576]	; (8002940 <HAL_ADC_ConfigChannel+0x64c>)
 8002700:	f7ff f948 	bl	8001994 <LL_ADC_IsEnabled>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	bf0c      	ite	eq
 800270a:	2301      	moveq	r3, #1
 800270c:	2300      	movne	r3, #0
 800270e:	b2db      	uxtb	r3, r3
 8002710:	e008      	b.n	8002724 <HAL_ADC_ConfigChannel+0x430>
 8002712:	488e      	ldr	r0, [pc, #568]	; (800294c <HAL_ADC_ConfigChannel+0x658>)
 8002714:	f7ff f93e 	bl	8001994 <LL_ADC_IsEnabled>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	bf0c      	ite	eq
 800271e:	2301      	moveq	r3, #1
 8002720:	2300      	movne	r3, #0
 8002722:	b2db      	uxtb	r3, r3
 8002724:	2b00      	cmp	r3, #0
 8002726:	f000 8088 	beq.w	800283a <HAL_ADC_ConfigChannel+0x546>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a88      	ldr	r2, [pc, #544]	; (8002950 <HAL_ADC_ConfigChannel+0x65c>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d132      	bne.n	800279a <HAL_ADC_ConfigChannel+0x4a6>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002734:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002738:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d12c      	bne.n	800279a <HAL_ADC_ConfigChannel+0x4a6>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a7e      	ldr	r2, [pc, #504]	; (8002940 <HAL_ADC_ConfigChannel+0x64c>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d005      	beq.n	8002756 <HAL_ADC_ConfigChannel+0x462>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a7f      	ldr	r2, [pc, #508]	; (800294c <HAL_ADC_ConfigChannel+0x658>)
 8002750:	4293      	cmp	r3, r2
 8002752:	f040 832c 	bne.w	8002dae <HAL_ADC_ConfigChannel+0xaba>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a79      	ldr	r2, [pc, #484]	; (8002940 <HAL_ADC_ConfigChannel+0x64c>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d101      	bne.n	8002764 <HAL_ADC_ConfigChannel+0x470>
 8002760:	4a78      	ldr	r2, [pc, #480]	; (8002944 <HAL_ADC_ConfigChannel+0x650>)
 8002762:	e000      	b.n	8002766 <HAL_ADC_ConfigChannel+0x472>
 8002764:	4a78      	ldr	r2, [pc, #480]	; (8002948 <HAL_ADC_ConfigChannel+0x654>)
 8002766:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800276a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800276e:	4619      	mov	r1, r3
 8002770:	4610      	mov	r0, r2
 8002772:	f7fe fe8e 	bl	8001492 <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002776:	4b77      	ldr	r3, [pc, #476]	; (8002954 <HAL_ADC_ConfigChannel+0x660>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	099b      	lsrs	r3, r3, #6
 800277c:	4a76      	ldr	r2, [pc, #472]	; (8002958 <HAL_ADC_ConfigChannel+0x664>)
 800277e:	fba2 2303 	umull	r2, r3, r2, r3
 8002782:	099b      	lsrs	r3, r3, #6
 8002784:	3301      	adds	r3, #1
 8002786:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 8002788:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 800278a:	e002      	b.n	8002792 <HAL_ADC_ConfigChannel+0x49e>
                {
                  wait_loop_index--;
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	3b01      	subs	r3, #1
 8002790:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d1f9      	bne.n	800278c <HAL_ADC_ConfigChannel+0x498>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002798:	e309      	b.n	8002dae <HAL_ADC_ConfigChannel+0xaba>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a6f      	ldr	r2, [pc, #444]	; (800295c <HAL_ADC_ConfigChannel+0x668>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d121      	bne.n	80027e8 <HAL_ADC_ConfigChannel+0x4f4>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80027a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d11b      	bne.n	80027e8 <HAL_ADC_ConfigChannel+0x4f4>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a62      	ldr	r2, [pc, #392]	; (8002940 <HAL_ADC_ConfigChannel+0x64c>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d005      	beq.n	80027c6 <HAL_ADC_ConfigChannel+0x4d2>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a63      	ldr	r2, [pc, #396]	; (800294c <HAL_ADC_ConfigChannel+0x658>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	f040 82f6 	bne.w	8002db2 <HAL_ADC_ConfigChannel+0xabe>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a5d      	ldr	r2, [pc, #372]	; (8002940 <HAL_ADC_ConfigChannel+0x64c>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d101      	bne.n	80027d4 <HAL_ADC_ConfigChannel+0x4e0>
 80027d0:	4a5c      	ldr	r2, [pc, #368]	; (8002944 <HAL_ADC_ConfigChannel+0x650>)
 80027d2:	e000      	b.n	80027d6 <HAL_ADC_ConfigChannel+0x4e2>
 80027d4:	4a5c      	ldr	r2, [pc, #368]	; (8002948 <HAL_ADC_ConfigChannel+0x654>)
 80027d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027de:	4619      	mov	r1, r3
 80027e0:	4610      	mov	r0, r2
 80027e2:	f7fe fe56 	bl	8001492 <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027e6:	e2e4      	b.n	8002db2 <HAL_ADC_ConfigChannel+0xabe>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a5c      	ldr	r2, [pc, #368]	; (8002960 <HAL_ADC_ConfigChannel+0x66c>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	f040 82e0 	bne.w	8002db4 <HAL_ADC_ConfigChannel+0xac0>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80027f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f040 82d9 	bne.w	8002db4 <HAL_ADC_ConfigChannel+0xac0>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a4e      	ldr	r2, [pc, #312]	; (8002940 <HAL_ADC_ConfigChannel+0x64c>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d005      	beq.n	8002818 <HAL_ADC_ConfigChannel+0x524>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a4e      	ldr	r2, [pc, #312]	; (800294c <HAL_ADC_ConfigChannel+0x658>)
 8002812:	4293      	cmp	r3, r2
 8002814:	f040 82ce 	bne.w	8002db4 <HAL_ADC_ConfigChannel+0xac0>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a48      	ldr	r2, [pc, #288]	; (8002940 <HAL_ADC_ConfigChannel+0x64c>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d101      	bne.n	8002826 <HAL_ADC_ConfigChannel+0x532>
 8002822:	4a48      	ldr	r2, [pc, #288]	; (8002944 <HAL_ADC_ConfigChannel+0x650>)
 8002824:	e000      	b.n	8002828 <HAL_ADC_ConfigChannel+0x534>
 8002826:	4a48      	ldr	r2, [pc, #288]	; (8002948 <HAL_ADC_ConfigChannel+0x654>)
 8002828:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800282c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002830:	4619      	mov	r1, r3
 8002832:	4610      	mov	r0, r2
 8002834:	f7fe fe2d 	bl	8001492 <LL_ADC_SetCommonPathInternalCh>
 8002838:	e2bc      	b.n	8002db4 <HAL_ADC_ConfigChannel+0xac0>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800283e:	f043 0220 	orr.w	r2, r3, #32
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	679a      	str	r2, [r3, #120]	; 0x78

            tmp_hal_status = HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800284c:	e2b2      	b.n	8002db4 <HAL_ADC_ConfigChannel+0xac0>
      }
    }
    else
    {
      /* Remap Internal Channels for Cut1 vs Cut2 (or 4M) */
      tmp_channel = pConfig->Channel;
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
#if !defined (ADC2)
      if (HAL_GetREVID() == REV_ID_A) /* STM32U5 silicon Rev.A */
 8002856:	f7fe fdfb 	bl	8001450 <HAL_GetREVID>
 800285a:	4603      	mov	r3, r0
 800285c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002860:	d130      	bne.n	80028c4 <HAL_ADC_ConfigChannel+0x5d0>
      {
        if (pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a3f      	ldr	r2, [pc, #252]	; (8002964 <HAL_ADC_ConfigChannel+0x670>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d103      	bne.n	8002874 <HAL_ADC_ConfigChannel+0x580>
        {
          tmp_channel = (LL_ADC_CHANNEL_22 | ADC_CHANNEL_ID_INTERNAL_CH);
 800286c:	4b3e      	ldr	r3, [pc, #248]	; (8002968 <HAL_ADC_ConfigChannel+0x674>)
 800286e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002872:	e027      	b.n	80028c4 <HAL_ADC_ConfigChannel+0x5d0>
        }
        else if (pConfig->Channel == ADC4_CHANNEL_VBAT)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a3c      	ldr	r2, [pc, #240]	; (800296c <HAL_ADC_ConfigChannel+0x678>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d103      	bne.n	8002886 <HAL_ADC_ConfigChannel+0x592>
        {
          tmp_channel = (LL_ADC_CHANNEL_23 | ADC_CHANNEL_ID_INTERNAL_CH);
 800287e:	4b3c      	ldr	r3, [pc, #240]	; (8002970 <HAL_ADC_ConfigChannel+0x67c>)
 8002880:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002884:	e01e      	b.n	80028c4 <HAL_ADC_ConfigChannel+0x5d0>
        }
        else if (pConfig->Channel == ADC_CHANNEL_VCORE)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a3a      	ldr	r2, [pc, #232]	; (8002974 <HAL_ADC_ConfigChannel+0x680>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d103      	bne.n	8002898 <HAL_ADC_ConfigChannel+0x5a4>
        {
          tmp_channel = (LL_ADC_CHANNEL_VREFINT | LL_ADC_CHANNEL_DIFFERENCIATION_VREFINT_VCORE);
 8002890:	4b39      	ldr	r3, [pc, #228]	; (8002978 <HAL_ADC_ConfigChannel+0x684>)
 8002892:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002896:	e015      	b.n	80028c4 <HAL_ADC_ConfigChannel+0x5d0>
        }
        else if (pConfig->Channel == ADC_CHANNEL_DAC1CH1_ADC4)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a37      	ldr	r2, [pc, #220]	; (800297c <HAL_ADC_ConfigChannel+0x688>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d103      	bne.n	80028aa <HAL_ADC_ConfigChannel+0x5b6>
        {
          tmp_channel = (LL_ADC_CHANNEL_20 | ADC_CHANNEL_ID_INTERNAL_CH);
 80028a2:	4b37      	ldr	r3, [pc, #220]	; (8002980 <HAL_ADC_ConfigChannel+0x68c>)
 80028a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80028a8:	e00c      	b.n	80028c4 <HAL_ADC_ConfigChannel+0x5d0>
        }
        else if (pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a35      	ldr	r2, [pc, #212]	; (8002984 <HAL_ADC_ConfigChannel+0x690>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d103      	bne.n	80028bc <HAL_ADC_ConfigChannel+0x5c8>
        {
          tmp_channel = (LL_ADC_CHANNEL_21 | ADC_CHANNEL_ID_INTERNAL_CH);
 80028b4:	4b31      	ldr	r3, [pc, #196]	; (800297c <HAL_ADC_ConfigChannel+0x688>)
 80028b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80028ba:	e003      	b.n	80028c4 <HAL_ADC_ConfigChannel+0x5d0>
        }
        else
        {
          tmp_channel = pConfig->Channel;
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	f000 81a3 	beq.w	8002c14 <HAL_ADC_ConfigChannel+0x920>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80028d6:	d004      	beq.n	80028e2 <HAL_ADC_ConfigChannel+0x5ee>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80028dc:	4a2a      	ldr	r2, [pc, #168]	; (8002988 <HAL_ADC_ConfigChannel+0x694>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d107      	bne.n	80028f2 <HAL_ADC_ConfigChannel+0x5fe>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7fe fefe 	bl	80016ec <LL_ADC_REG_SetSequencerChAdd>
 80028f0:	e0c2      	b.n	8002a78 <HAL_ADC_ConfigChannel+0x784>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f003 031f 	and.w	r3, r3, #31
 8002900:	210f      	movs	r1, #15
 8002902:	fa01 f303 	lsl.w	r3, r1, r3
 8002906:	43db      	mvns	r3, r3
 8002908:	401a      	ands	r2, r3
 800290a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800290e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d105      	bne.n	8002922 <HAL_ADC_ConfigChannel+0x62e>
 8002916:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800291a:	0e9b      	lsrs	r3, r3, #26
 800291c:	f003 031f 	and.w	r3, r3, #31
 8002920:	e038      	b.n	8002994 <HAL_ADC_ConfigChannel+0x6a0>
 8002922:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002926:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800292a:	fa93 f3a3 	rbit	r3, r3
 800292e:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002932:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002936:	2b00      	cmp	r3, #0
 8002938:	d128      	bne.n	800298c <HAL_ADC_ConfigChannel+0x698>
    return 32U;
 800293a:	2320      	movs	r3, #32
 800293c:	e02a      	b.n	8002994 <HAL_ADC_ConfigChannel+0x6a0>
 800293e:	bf00      	nop
 8002940:	42028000 	.word	0x42028000
 8002944:	42028308 	.word	0x42028308
 8002948:	46021308 	.word	0x46021308
 800294c:	46021000 	.word	0x46021000
 8002950:	ce080000 	.word	0xce080000
 8002954:	20000000 	.word	0x20000000
 8002958:	053e2d63 	.word	0x053e2d63
 800295c:	ca040000 	.word	0xca040000
 8002960:	80000001 	.word	0x80000001
 8002964:	b6002000 	.word	0xb6002000
 8002968:	da400000 	.word	0xda400000
 800296c:	ba004000 	.word	0xba004000
 8002970:	de800000 	.word	0xde800000
 8002974:	b2001000 	.word	0xb2001000
 8002978:	81000001 	.word	0x81000001
 800297c:	d6200000 	.word	0xd6200000
 8002980:	d2100000 	.word	0xd2100000
 8002984:	d7200000 	.word	0xd7200000
 8002988:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 800298c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800298e:	fab3 f383 	clz	r3, r3
 8002992:	b2db      	uxtb	r3, r3
 8002994:	6839      	ldr	r1, [r7, #0]
 8002996:	6849      	ldr	r1, [r1, #4]
 8002998:	f001 011f 	and.w	r1, r1, #31
 800299c:	408b      	lsls	r3, r1
 800299e:	431a      	orrs	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	089b      	lsrs	r3, r3, #2
 80029ac:	1c5a      	adds	r2, r3, #1
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d860      	bhi.n	8002a78 <HAL_ADC_ConfigChannel+0x784>
          {
#if !defined (ADC2)
            if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 80029b6:	f7fe fd4b 	bl	8001450 <HAL_GetREVID>
 80029ba:	4603      	mov	r3, r0
 80029bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029c0:	d851      	bhi.n	8002a66 <HAL_ADC_ConfigChannel+0x772>
            {
              if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) >= 20UL)
 80029c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029c6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d10a      	bne.n	80029e4 <HAL_ADC_ConfigChannel+0x6f0>
 80029ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029d2:	0e9b      	lsrs	r3, r3, #26
 80029d4:	f003 031f 	and.w	r3, r3, #31
 80029d8:	2b13      	cmp	r3, #19
 80029da:	bf8c      	ite	hi
 80029dc:	2301      	movhi	r3, #1
 80029de:	2300      	movls	r3, #0
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	e016      	b.n	8002a12 <HAL_ADC_ConfigChannel+0x71e>
 80029e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	fa93 f3a3 	rbit	r3, r3
 80029f0:	61bb      	str	r3, [r7, #24]
  return result;
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80029f6:	6a3b      	ldr	r3, [r7, #32]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d101      	bne.n	8002a00 <HAL_ADC_ConfigChannel+0x70c>
    return 32U;
 80029fc:	2320      	movs	r3, #32
 80029fe:	e003      	b.n	8002a08 <HAL_ADC_ConfigChannel+0x714>
  return __builtin_clz(value);
 8002a00:	6a3b      	ldr	r3, [r7, #32]
 8002a02:	fab3 f383 	clz	r3, r3
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	2b13      	cmp	r3, #19
 8002a0a:	bf8c      	ite	hi
 8002a0c:	2301      	movhi	r3, #1
 8002a0e:	2300      	movls	r3, #0
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d027      	beq.n	8002a66 <HAL_ADC_ConfigChannel+0x772>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
 8002a16:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a1a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d109      	bne.n	8002a36 <HAL_ADC_ConfigChannel+0x742>
 8002a22:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a26:	0e9b      	lsrs	r3, r3, #26
 8002a28:	f003 031f 	and.w	r3, r3, #31
 8002a2c:	3b09      	subs	r3, #9
 8002a2e:	2201      	movs	r2, #1
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	e015      	b.n	8002a62 <HAL_ADC_ConfigChannel+0x76e>
 8002a36:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	fa93 f3a3 	rbit	r3, r3
 8002a42:	60fb      	str	r3, [r7, #12]
  return result;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d101      	bne.n	8002a52 <HAL_ADC_ConfigChannel+0x75e>
    return 32U;
 8002a4e:	2320      	movs	r3, #32
 8002a50:	e003      	b.n	8002a5a <HAL_ADC_ConfigChannel+0x766>
  return __builtin_clz(value);
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	fab3 f383 	clz	r3, r3
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	3b09      	subs	r3, #9
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6818      	ldr	r0, [r3, #0]
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002a72:	4619      	mov	r1, r3
 8002a74:	f7fe fdda 	bl	800162c <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6818      	ldr	r0, [r3, #0]
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	461a      	mov	r2, r3
 8002a82:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8002a86:	f7fe fe7d 	bl	8001784 <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f280 8190 	bge.w	8002db4 <HAL_ADC_ConfigChannel+0xac0>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a97      	ldr	r2, [pc, #604]	; (8002cf8 <HAL_ADC_ConfigChannel+0xa04>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d101      	bne.n	8002aa2 <HAL_ADC_ConfigChannel+0x7ae>
 8002a9e:	4b97      	ldr	r3, [pc, #604]	; (8002cfc <HAL_ADC_ConfigChannel+0xa08>)
 8002aa0:	e000      	b.n	8002aa4 <HAL_ADC_ConfigChannel+0x7b0>
 8002aa2:	4b97      	ldr	r3, [pc, #604]	; (8002d00 <HAL_ADC_ConfigChannel+0xa0c>)
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7fe fd07 	bl	80014b8 <LL_ADC_GetCommonPathInternalCh>
 8002aaa:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a94      	ldr	r2, [pc, #592]	; (8002d04 <HAL_ADC_ConfigChannel+0xa10>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d126      	bne.n	8002b06 <HAL_ADC_ConfigChannel+0x812>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ab8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002abc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d120      	bne.n	8002b06 <HAL_ADC_ConfigChannel+0x812>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a8b      	ldr	r2, [pc, #556]	; (8002cf8 <HAL_ADC_ConfigChannel+0xa04>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d101      	bne.n	8002ad2 <HAL_ADC_ConfigChannel+0x7de>
 8002ace:	4a8b      	ldr	r2, [pc, #556]	; (8002cfc <HAL_ADC_ConfigChannel+0xa08>)
 8002ad0:	e000      	b.n	8002ad4 <HAL_ADC_ConfigChannel+0x7e0>
 8002ad2:	4a8b      	ldr	r2, [pc, #556]	; (8002d00 <HAL_ADC_ConfigChannel+0xa0c>)
 8002ad4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ad8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002adc:	4619      	mov	r1, r3
 8002ade:	4610      	mov	r0, r2
 8002ae0:	f7fe fcd7 	bl	8001492 <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002ae4:	4b88      	ldr	r3, [pc, #544]	; (8002d08 <HAL_ADC_ConfigChannel+0xa14>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	099b      	lsrs	r3, r3, #6
 8002aea:	4a88      	ldr	r2, [pc, #544]	; (8002d0c <HAL_ADC_ConfigChannel+0xa18>)
 8002aec:	fba2 2303 	umull	r2, r3, r2, r3
 8002af0:	099b      	lsrs	r3, r3, #6
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8002af6:	e002      	b.n	8002afe <HAL_ADC_ConfigChannel+0x80a>
            {
              wait_loop_index--;
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	3b01      	subs	r3, #1
 8002afc:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d1f9      	bne.n	8002af8 <HAL_ADC_ConfigChannel+0x804>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8002b04:	e067      	b.n	8002bd6 <HAL_ADC_ConfigChannel+0x8e2>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a81      	ldr	r2, [pc, #516]	; (8002d10 <HAL_ADC_ConfigChannel+0xa1c>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d116      	bne.n	8002b3e <HAL_ADC_ConfigChannel+0x84a>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002b10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d110      	bne.n	8002b3e <HAL_ADC_ConfigChannel+0x84a>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a75      	ldr	r2, [pc, #468]	; (8002cf8 <HAL_ADC_ConfigChannel+0xa04>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d101      	bne.n	8002b2a <HAL_ADC_ConfigChannel+0x836>
 8002b26:	4a75      	ldr	r2, [pc, #468]	; (8002cfc <HAL_ADC_ConfigChannel+0xa08>)
 8002b28:	e000      	b.n	8002b2c <HAL_ADC_ConfigChannel+0x838>
 8002b2a:	4a75      	ldr	r2, [pc, #468]	; (8002d00 <HAL_ADC_ConfigChannel+0xa0c>)
 8002b2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b34:	4619      	mov	r1, r3
 8002b36:	4610      	mov	r0, r2
 8002b38:	f7fe fcab 	bl	8001492 <LL_ADC_SetCommonPathInternalCh>
 8002b3c:	e04b      	b.n	8002bd6 <HAL_ADC_ConfigChannel+0x8e2>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a74      	ldr	r2, [pc, #464]	; (8002d14 <HAL_ADC_ConfigChannel+0xa20>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d116      	bne.n	8002b76 <HAL_ADC_ConfigChannel+0x882>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002b48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d110      	bne.n	8002b76 <HAL_ADC_ConfigChannel+0x882>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a67      	ldr	r2, [pc, #412]	; (8002cf8 <HAL_ADC_ConfigChannel+0xa04>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d101      	bne.n	8002b62 <HAL_ADC_ConfigChannel+0x86e>
 8002b5e:	4a67      	ldr	r2, [pc, #412]	; (8002cfc <HAL_ADC_ConfigChannel+0xa08>)
 8002b60:	e000      	b.n	8002b64 <HAL_ADC_ConfigChannel+0x870>
 8002b62:	4a67      	ldr	r2, [pc, #412]	; (8002d00 <HAL_ADC_ConfigChannel+0xa0c>)
 8002b64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	4610      	mov	r0, r2
 8002b70:	f7fe fc8f 	bl	8001492 <LL_ADC_SetCommonPathInternalCh>
 8002b74:	e02f      	b.n	8002bd6 <HAL_ADC_ConfigChannel+0x8e2>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a67      	ldr	r2, [pc, #412]	; (8002d18 <HAL_ADC_ConfigChannel+0xa24>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d12a      	bne.n	8002bd6 <HAL_ADC_ConfigChannel+0x8e2>
                   && ((tmp_config_internal_channel  & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002b80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d124      	bne.n	8002bd6 <HAL_ADC_ConfigChannel+0x8e2>
          {
#if !defined (ADC2)
            if (ADC_VCORE_INSTANCE(hadc))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a62      	ldr	r2, [pc, #392]	; (8002d1c <HAL_ADC_ConfigChannel+0xa28>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d11f      	bne.n	8002bd6 <HAL_ADC_ConfigChannel+0x8e2>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a57      	ldr	r2, [pc, #348]	; (8002cf8 <HAL_ADC_ConfigChannel+0xa04>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d101      	bne.n	8002ba4 <HAL_ADC_ConfigChannel+0x8b0>
 8002ba0:	4a56      	ldr	r2, [pc, #344]	; (8002cfc <HAL_ADC_ConfigChannel+0xa08>)
 8002ba2:	e000      	b.n	8002ba6 <HAL_ADC_ConfigChannel+0x8b2>
 8002ba4:	4a56      	ldr	r2, [pc, #344]	; (8002d00 <HAL_ADC_ConfigChannel+0xa0c>)
 8002ba6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002baa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002bae:	4619      	mov	r1, r3
 8002bb0:	4610      	mov	r0, r2
 8002bb2:	f7fe fc6e 	bl	8001492 <LL_ADC_SetCommonPathInternalCh>
                                             LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
              if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 8002bb6:	f7fe fc4b 	bl	8001450 <HAL_GetREVID>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bc0:	d809      	bhi.n	8002bd6 <HAL_ADC_ConfigChannel+0x8e2>
              {
                SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f042 0201 	orr.w	r2, r2, #1
 8002bd2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
            /* nothing to do */
          }
          /* If STM32U5 silicon Rev.B (or 4M), ADC_CHANNEL_DAC1CH1 and ADC_CHANNEL_DAC1CH2 are both on Channel 21
             and selection is done via ADC_OR[0] register */
#if !defined (ADC2)
          if (HAL_GetREVID() == REV_ID_B) /* STM32U5 silicon Rev.B */
 8002bd6:	f7fe fc3b 	bl	8001450 <HAL_GetREVID>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002be0:	f040 80e8 	bne.w	8002db4 <HAL_ADC_ConfigChannel+0xac0>
          {
            if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a4d      	ldr	r2, [pc, #308]	; (8002d20 <HAL_ADC_ConfigChannel+0xa2c>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	f040 80e2 	bne.w	8002db4 <HAL_ADC_ConfigChannel+0xac0>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002bf0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002bf4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f040 80db 	bne.w	8002db4 <HAL_ADC_ConfigChannel+0xac0>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f042 0201 	orr.w	r2, r2, #1
 8002c0e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8002c12:	e0cf      	b.n	8002db4 <HAL_ADC_ConfigChannel+0xac0>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c1c:	d004      	beq.n	8002c28 <HAL_ADC_ConfigChannel+0x934>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8002c22:	4a40      	ldr	r2, [pc, #256]	; (8002d24 <HAL_ADC_ConfigChannel+0xa30>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d106      	bne.n	8002c36 <HAL_ADC_ConfigChannel+0x942>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7fe fd8e 	bl	8001752 <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f280 80ba 	bge.w	8002db4 <HAL_ADC_ConfigChannel+0xac0>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a2c      	ldr	r2, [pc, #176]	; (8002cf8 <HAL_ADC_ConfigChannel+0xa04>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d101      	bne.n	8002c4e <HAL_ADC_ConfigChannel+0x95a>
 8002c4a:	4b2c      	ldr	r3, [pc, #176]	; (8002cfc <HAL_ADC_ConfigChannel+0xa08>)
 8002c4c:	e000      	b.n	8002c50 <HAL_ADC_ConfigChannel+0x95c>
 8002c4e:	4b2c      	ldr	r3, [pc, #176]	; (8002d00 <HAL_ADC_ConfigChannel+0xa0c>)
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7fe fc31 	bl	80014b8 <LL_ADC_GetCommonPathInternalCh>
 8002c56:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a32      	ldr	r2, [pc, #200]	; (8002d28 <HAL_ADC_ConfigChannel+0xa34>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d110      	bne.n	8002c86 <HAL_ADC_ConfigChannel+0x992>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a23      	ldr	r2, [pc, #140]	; (8002cf8 <HAL_ADC_ConfigChannel+0xa04>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d101      	bne.n	8002c72 <HAL_ADC_ConfigChannel+0x97e>
 8002c6e:	4a23      	ldr	r2, [pc, #140]	; (8002cfc <HAL_ADC_ConfigChannel+0xa08>)
 8002c70:	e000      	b.n	8002c74 <HAL_ADC_ConfigChannel+0x980>
 8002c72:	4a23      	ldr	r2, [pc, #140]	; (8002d00 <HAL_ADC_ConfigChannel+0xa0c>)
 8002c74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c78:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	4610      	mov	r0, r2
 8002c80:	f7fe fc07 	bl	8001492 <LL_ADC_SetCommonPathInternalCh>
 8002c84:	e06d      	b.n	8002d62 <HAL_ADC_ConfigChannel+0xa6e>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a28      	ldr	r2, [pc, #160]	; (8002d2c <HAL_ADC_ConfigChannel+0xa38>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d110      	bne.n	8002cb2 <HAL_ADC_ConfigChannel+0x9be>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a18      	ldr	r2, [pc, #96]	; (8002cf8 <HAL_ADC_ConfigChannel+0xa04>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d101      	bne.n	8002c9e <HAL_ADC_ConfigChannel+0x9aa>
 8002c9a:	4a18      	ldr	r2, [pc, #96]	; (8002cfc <HAL_ADC_ConfigChannel+0xa08>)
 8002c9c:	e000      	b.n	8002ca0 <HAL_ADC_ConfigChannel+0x9ac>
 8002c9e:	4a18      	ldr	r2, [pc, #96]	; (8002d00 <HAL_ADC_ConfigChannel+0xa0c>)
 8002ca0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ca4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ca8:	4619      	mov	r1, r3
 8002caa:	4610      	mov	r0, r2
 8002cac:	f7fe fbf1 	bl	8001492 <LL_ADC_SetCommonPathInternalCh>
 8002cb0:	e057      	b.n	8002d62 <HAL_ADC_ConfigChannel+0xa6e>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a17      	ldr	r2, [pc, #92]	; (8002d14 <HAL_ADC_ConfigChannel+0xa20>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d110      	bne.n	8002cde <HAL_ADC_ConfigChannel+0x9ea>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a0d      	ldr	r2, [pc, #52]	; (8002cf8 <HAL_ADC_ConfigChannel+0xa04>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d101      	bne.n	8002cca <HAL_ADC_ConfigChannel+0x9d6>
 8002cc6:	4a0d      	ldr	r2, [pc, #52]	; (8002cfc <HAL_ADC_ConfigChannel+0xa08>)
 8002cc8:	e000      	b.n	8002ccc <HAL_ADC_ConfigChannel+0x9d8>
 8002cca:	4a0d      	ldr	r2, [pc, #52]	; (8002d00 <HAL_ADC_ConfigChannel+0xa0c>)
 8002ccc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002cd0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	4610      	mov	r0, r2
 8002cd8:	f7fe fbdb 	bl	8001492 <LL_ADC_SetCommonPathInternalCh>
 8002cdc:	e041      	b.n	8002d62 <HAL_ADC_ConfigChannel+0xa6e>
                                           ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VCORE)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a0d      	ldr	r2, [pc, #52]	; (8002d18 <HAL_ADC_ConfigChannel+0xa24>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d13c      	bne.n	8002d62 <HAL_ADC_ConfigChannel+0xa6e>
          {
#if !defined (ADC2)
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a02      	ldr	r2, [pc, #8]	; (8002cf8 <HAL_ADC_ConfigChannel+0xa04>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d11e      	bne.n	8002d30 <HAL_ADC_ConfigChannel+0xa3c>
 8002cf2:	4a02      	ldr	r2, [pc, #8]	; (8002cfc <HAL_ADC_ConfigChannel+0xa08>)
 8002cf4:	e01d      	b.n	8002d32 <HAL_ADC_ConfigChannel+0xa3e>
 8002cf6:	bf00      	nop
 8002cf8:	42028000 	.word	0x42028000
 8002cfc:	42028308 	.word	0x42028308
 8002d00:	46021308 	.word	0x46021308
 8002d04:	b6002000 	.word	0xb6002000
 8002d08:	20000000 	.word	0x20000000
 8002d0c:	053e2d63 	.word	0x053e2d63
 8002d10:	ba004000 	.word	0xba004000
 8002d14:	80000001 	.word	0x80000001
 8002d18:	b2001000 	.word	0xb2001000
 8002d1c:	46021000 	.word	0x46021000
 8002d20:	d7200000 	.word	0xd7200000
 8002d24:	80000010 	.word	0x80000010
 8002d28:	ce080000 	.word	0xce080000
 8002d2c:	ca040000 	.word	0xca040000
 8002d30:	4a25      	ldr	r2, [pc, #148]	; (8002dc8 <HAL_ADC_ConfigChannel+0xad4>)
 8002d32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d36:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	4610      	mov	r0, r2
 8002d3e:	f7fe fba8 	bl	8001492 <LL_ADC_SetCommonPathInternalCh>
                                           ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
            if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 8002d42:	f7fe fb85 	bl	8001450 <HAL_GetREVID>
 8002d46:	4603      	mov	r3, r0
 8002d48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d4c:	d809      	bhi.n	8002d62 <HAL_ADC_ConfigChannel+0xa6e>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f042 0201 	orr.w	r2, r2, #1
 8002d5e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
            /* nothing to do */
          }
          /* If STM32U5 2M silicon Rev.B (or 4M), ADC_CHANNEL_DAC1CH1 and ADC_CHANNEL_DAC1CH2 are both on Channel 21
             and selection is done via ADC_OR[0] register */
#if !defined (ADC2)
          if (HAL_GetREVID() == REV_ID_B) /* STM32U5 silicon Rev.B */
 8002d62:	f7fe fb75 	bl	8001450 <HAL_GetREVID>
 8002d66:	4603      	mov	r3, r0
 8002d68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d6c:	d122      	bne.n	8002db4 <HAL_ADC_ConfigChannel+0xac0>
          {
            if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a16      	ldr	r2, [pc, #88]	; (8002dcc <HAL_ADC_ConfigChannel+0xad8>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d11d      	bne.n	8002db4 <HAL_ADC_ConfigChannel+0xac0>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d117      	bne.n	8002db4 <HAL_ADC_ConfigChannel+0xac0>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f042 0201 	orr.w	r2, r2, #1
 8002d94:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8002d98:	e00c      	b.n	8002db4 <HAL_ADC_ConfigChannel+0xac0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d9e:	f043 0220 	orr.w	r2, r3, #32
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	679a      	str	r2, [r3, #120]	; 0x78
    tmp_hal_status = HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8002dac:	e002      	b.n	8002db4 <HAL_ADC_ConfigChannel+0xac0>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002dae:	bf00      	nop
 8002db0:	e000      	b.n	8002db4 <HAL_ADC_ConfigChannel+0xac0>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002db2:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return tmp_hal_status;
 8002dbc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3790      	adds	r7, #144	; 0x90
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	46021308 	.word	0x46021308
 8002dcc:	d7200000 	.word	0xd7200000

08002dd0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7fe fdd9 	bl	8001994 <LL_ADC_IsEnabled>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d156      	bne.n	8002e96 <ADC_Enable+0xc6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689a      	ldr	r2, [r3, #8]
 8002dee:	4b2c      	ldr	r3, [pc, #176]	; (8002ea0 <ADC_Enable+0xd0>)
 8002df0:	4013      	ands	r3, r2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00d      	beq.n	8002e12 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dfa:	f043 0210 	orr.w	r2, r3, #16
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	679a      	str	r2, [r3, #120]	; 0x78

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e06:	f043 0201 	orr.w	r2, r3, #1
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e042      	b.n	8002e98 <ADC_Enable+0xc8>
    }

    LL_ADC_Enable(hadc->Instance);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7fe fda8 	bl	800196c <LL_ADC_Enable>

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if ((hadc->Init.LowPowerAutoPowerOff == ADC_LOW_POWER_NONE) || (hadc->Instance != ADC4))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a1b      	ldr	r3, [r3, #32]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d004      	beq.n	8002e2e <ADC_Enable+0x5e>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a1e      	ldr	r2, [pc, #120]	; (8002ea4 <ADC_Enable+0xd4>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d033      	beq.n	8002e96 <ADC_Enable+0xc6>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002e2e:	f7fe fadf 	bl	80013f0 <HAL_GetTick>
 8002e32:	60f8      	str	r0, [r7, #12]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
         )
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e34:	e028      	b.n	8002e88 <ADC_Enable+0xb8>
              The workaround is to continue setting ADEN until ADRDY is becomes 1.
              Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
              4 ADC clock cycle duration */
          /* Note: Test of ADC enabled required due to hardware constraint to     */
          /*       not enable ADC if already enabled.                             */
          if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7fe fdaa 	bl	8001994 <LL_ADC_IsEnabled>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d104      	bne.n	8002e50 <ADC_Enable+0x80>
          {
            LL_ADC_Enable(hadc->Instance);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7fe fd8e 	bl	800196c <LL_ADC_Enable>
          }

          if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e50:	f7fe face 	bl	80013f0 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d914      	bls.n	8002e88 <ADC_Enable+0xb8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0301 	and.w	r3, r3, #1
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d00d      	beq.n	8002e88 <ADC_Enable+0xb8>
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e70:	f043 0210 	orr.w	r2, r3, #16
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	679a      	str	r2, [r3, #120]	; 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e7c:	f043 0201 	orr.w	r2, r3, #1
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	67da      	str	r2, [r3, #124]	; 0x7c

              return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e007      	b.n	8002e98 <ADC_Enable+0xc8>
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d1cf      	bne.n	8002e36 <ADC_Enable+0x66>
        }
      }
    }
  }

  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3710      	adds	r7, #16
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	8000003f 	.word	0x8000003f
 8002ea4:	46021000 	.word	0x46021000

08002ea8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f003 0307 	and.w	r3, r3, #7
 8002eb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002eb8:	4b0c      	ldr	r3, [pc, #48]	; (8002eec <__NVIC_SetPriorityGrouping+0x44>)
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ebe:	68ba      	ldr	r2, [r7, #8]
 8002ec0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ed0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ed8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eda:	4a04      	ldr	r2, [pc, #16]	; (8002eec <__NVIC_SetPriorityGrouping+0x44>)
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	60d3      	str	r3, [r2, #12]
}
 8002ee0:	bf00      	nop
 8002ee2:	3714      	adds	r7, #20
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr
 8002eec:	e000ed00 	.word	0xe000ed00

08002ef0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ef4:	4b04      	ldr	r3, [pc, #16]	; (8002f08 <__NVIC_GetPriorityGrouping+0x18>)
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	0a1b      	lsrs	r3, r3, #8
 8002efa:	f003 0307 	and.w	r3, r3, #7
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr
 8002f08:	e000ed00 	.word	0xe000ed00

08002f0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	4603      	mov	r3, r0
 8002f14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	db0b      	blt.n	8002f36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f1e:	79fb      	ldrb	r3, [r7, #7]
 8002f20:	f003 021f 	and.w	r2, r3, #31
 8002f24:	4907      	ldr	r1, [pc, #28]	; (8002f44 <__NVIC_EnableIRQ+0x38>)
 8002f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f2a:	095b      	lsrs	r3, r3, #5
 8002f2c:	2001      	movs	r0, #1
 8002f2e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f36:	bf00      	nop
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	e000e100 	.word	0xe000e100

08002f48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	4603      	mov	r3, r0
 8002f50:	6039      	str	r1, [r7, #0]
 8002f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	db0a      	blt.n	8002f72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	b2da      	uxtb	r2, r3
 8002f60:	490c      	ldr	r1, [pc, #48]	; (8002f94 <__NVIC_SetPriority+0x4c>)
 8002f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f66:	0112      	lsls	r2, r2, #4
 8002f68:	b2d2      	uxtb	r2, r2
 8002f6a:	440b      	add	r3, r1
 8002f6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f70:	e00a      	b.n	8002f88 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	b2da      	uxtb	r2, r3
 8002f76:	4908      	ldr	r1, [pc, #32]	; (8002f98 <__NVIC_SetPriority+0x50>)
 8002f78:	79fb      	ldrb	r3, [r7, #7]
 8002f7a:	f003 030f 	and.w	r3, r3, #15
 8002f7e:	3b04      	subs	r3, #4
 8002f80:	0112      	lsls	r2, r2, #4
 8002f82:	b2d2      	uxtb	r2, r2
 8002f84:	440b      	add	r3, r1
 8002f86:	761a      	strb	r2, [r3, #24]
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr
 8002f94:	e000e100 	.word	0xe000e100
 8002f98:	e000ed00 	.word	0xe000ed00

08002f9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b089      	sub	sp, #36	; 0x24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f003 0307 	and.w	r3, r3, #7
 8002fae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	f1c3 0307 	rsb	r3, r3, #7
 8002fb6:	2b04      	cmp	r3, #4
 8002fb8:	bf28      	it	cs
 8002fba:	2304      	movcs	r3, #4
 8002fbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	3304      	adds	r3, #4
 8002fc2:	2b06      	cmp	r3, #6
 8002fc4:	d902      	bls.n	8002fcc <NVIC_EncodePriority+0x30>
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	3b03      	subs	r3, #3
 8002fca:	e000      	b.n	8002fce <NVIC_EncodePriority+0x32>
 8002fcc:	2300      	movs	r3, #0
 8002fce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fda:	43da      	mvns	r2, r3
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	401a      	ands	r2, r3
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fe4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	fa01 f303 	lsl.w	r3, r1, r3
 8002fee:	43d9      	mvns	r1, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ff4:	4313      	orrs	r3, r2
         );
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3724      	adds	r7, #36	; 0x24
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
	...

08003004 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	3b01      	subs	r3, #1
 8003010:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003014:	d301      	bcc.n	800301a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003016:	2301      	movs	r3, #1
 8003018:	e00f      	b.n	800303a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800301a:	4a0a      	ldr	r2, [pc, #40]	; (8003044 <SysTick_Config+0x40>)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	3b01      	subs	r3, #1
 8003020:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003022:	210f      	movs	r1, #15
 8003024:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003028:	f7ff ff8e 	bl	8002f48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800302c:	4b05      	ldr	r3, [pc, #20]	; (8003044 <SysTick_Config+0x40>)
 800302e:	2200      	movs	r2, #0
 8003030:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003032:	4b04      	ldr	r3, [pc, #16]	; (8003044 <SysTick_Config+0x40>)
 8003034:	2207      	movs	r2, #7
 8003036:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	e000e010 	.word	0xe000e010

08003048 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f7ff ff29 	bl	8002ea8 <__NVIC_SetPriorityGrouping>
}
 8003056:	bf00      	nop
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b086      	sub	sp, #24
 8003062:	af00      	add	r7, sp, #0
 8003064:	4603      	mov	r3, r0
 8003066:	60b9      	str	r1, [r7, #8]
 8003068:	607a      	str	r2, [r7, #4]
 800306a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800306c:	f7ff ff40 	bl	8002ef0 <__NVIC_GetPriorityGrouping>
 8003070:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	68b9      	ldr	r1, [r7, #8]
 8003076:	6978      	ldr	r0, [r7, #20]
 8003078:	f7ff ff90 	bl	8002f9c <NVIC_EncodePriority>
 800307c:	4602      	mov	r2, r0
 800307e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003082:	4611      	mov	r1, r2
 8003084:	4618      	mov	r0, r3
 8003086:	f7ff ff5f 	bl	8002f48 <__NVIC_SetPriority>
}
 800308a:	bf00      	nop
 800308c:	3718      	adds	r7, #24
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b082      	sub	sp, #8
 8003096:	af00      	add	r7, sp, #0
 8003098:	4603      	mov	r3, r0
 800309a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800309c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff ff33 	bl	8002f0c <__NVIC_EnableIRQ>
}
 80030a6:	bf00      	nop
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b082      	sub	sp, #8
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7ff ffa4 	bl	8003004 <SysTick_Config>
 80030bc:	4603      	mov	r3, r0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
	...

080030c8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b089      	sub	sp, #36	; 0x24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80030d2:	2300      	movs	r3, #0
 80030d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80030da:	e1ba      	b.n	8003452 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	2101      	movs	r1, #1
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	fa01 f303 	lsl.w	r3, r1, r3
 80030e8:	4013      	ands	r3, r2
 80030ea:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f000 81aa 	beq.w	800344c <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a55      	ldr	r2, [pc, #340]	; (8003250 <HAL_GPIO_Init+0x188>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d15d      	bne.n	80031bc <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8003106:	2201      	movs	r2, #1
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	fa02 f303 	lsl.w	r3, r2, r3
 800310e:	43db      	mvns	r3, r3
 8003110:	69fa      	ldr	r2, [r7, #28]
 8003112:	4013      	ands	r3, r2
 8003114:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f003 0201 	and.w	r2, r3, #1
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	69fa      	ldr	r2, [r7, #28]
 8003126:	4313      	orrs	r3, r2
 8003128:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	69fa      	ldr	r2, [r7, #28]
 800312e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8003130:	4a48      	ldr	r2, [pc, #288]	; (8003254 <HAL_GPIO_Init+0x18c>)
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003138:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800313a:	4a46      	ldr	r2, [pc, #280]	; (8003254 <HAL_GPIO_Init+0x18c>)
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	4413      	add	r3, r2
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	08da      	lsrs	r2, r3, #3
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	3208      	adds	r2, #8
 800314e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003152:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	f003 0307 	and.w	r3, r3, #7
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	220f      	movs	r2, #15
 800315e:	fa02 f303 	lsl.w	r3, r2, r3
 8003162:	43db      	mvns	r3, r3
 8003164:	69fa      	ldr	r2, [r7, #28]
 8003166:	4013      	ands	r3, r2
 8003168:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	f003 0307 	and.w	r3, r3, #7
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	220b      	movs	r2, #11
 8003174:	fa02 f303 	lsl.w	r3, r2, r3
 8003178:	69fa      	ldr	r2, [r7, #28]
 800317a:	4313      	orrs	r3, r2
 800317c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	08da      	lsrs	r2, r3, #3
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	3208      	adds	r2, #8
 8003186:	69f9      	ldr	r1, [r7, #28]
 8003188:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	2203      	movs	r2, #3
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	43db      	mvns	r3, r3
 800319e:	69fa      	ldr	r2, [r7, #28]
 80031a0:	4013      	ands	r3, r2
 80031a2:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	005b      	lsls	r3, r3, #1
 80031a8:	2202      	movs	r2, #2
 80031aa:	fa02 f303 	lsl.w	r3, r2, r3
 80031ae:	69fa      	ldr	r2, [r7, #28]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	69fa      	ldr	r2, [r7, #28]
 80031b8:	601a      	str	r2, [r3, #0]
 80031ba:	e067      	b.n	800328c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d003      	beq.n	80031cc <HAL_GPIO_Init+0x104>
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	2b12      	cmp	r3, #18
 80031ca:	d145      	bne.n	8003258 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	08da      	lsrs	r2, r3, #3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	3208      	adds	r2, #8
 80031d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031d8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	f003 0307 	and.w	r3, r3, #7
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	220f      	movs	r2, #15
 80031e4:	fa02 f303 	lsl.w	r3, r2, r3
 80031e8:	43db      	mvns	r3, r3
 80031ea:	69fa      	ldr	r2, [r7, #28]
 80031ec:	4013      	ands	r3, r2
 80031ee:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	691b      	ldr	r3, [r3, #16]
 80031f4:	f003 020f 	and.w	r2, r3, #15
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	f003 0307 	and.w	r3, r3, #7
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	69fa      	ldr	r2, [r7, #28]
 8003206:	4313      	orrs	r3, r2
 8003208:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	08da      	lsrs	r2, r3, #3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	3208      	adds	r2, #8
 8003212:	69f9      	ldr	r1, [r7, #28]
 8003214:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	2203      	movs	r2, #3
 8003224:	fa02 f303 	lsl.w	r3, r2, r3
 8003228:	43db      	mvns	r3, r3
 800322a:	69fa      	ldr	r2, [r7, #28]
 800322c:	4013      	ands	r3, r2
 800322e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f003 0203 	and.w	r2, r3, #3
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	005b      	lsls	r3, r3, #1
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	69fa      	ldr	r2, [r7, #28]
 8003242:	4313      	orrs	r3, r2
 8003244:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	69fa      	ldr	r2, [r7, #28]
 800324a:	601a      	str	r2, [r3, #0]
 800324c:	e01e      	b.n	800328c <HAL_GPIO_Init+0x1c4>
 800324e:	bf00      	nop
 8003250:	46020000 	.word	0x46020000
 8003254:	0800aa38 	.word	0x0800aa38
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	005b      	lsls	r3, r3, #1
 8003262:	2203      	movs	r2, #3
 8003264:	fa02 f303 	lsl.w	r3, r2, r3
 8003268:	43db      	mvns	r3, r3
 800326a:	69fa      	ldr	r2, [r7, #28]
 800326c:	4013      	ands	r3, r2
 800326e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f003 0203 	and.w	r2, r3, #3
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	69fa      	ldr	r2, [r7, #28]
 8003282:	4313      	orrs	r3, r2
 8003284:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	69fa      	ldr	r2, [r7, #28]
 800328a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d00b      	beq.n	80032ac <HAL_GPIO_Init+0x1e4>
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	2b02      	cmp	r3, #2
 800329a:	d007      	beq.n	80032ac <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032a0:	2b11      	cmp	r3, #17
 80032a2:	d003      	beq.n	80032ac <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	2b12      	cmp	r3, #18
 80032aa:	d130      	bne.n	800330e <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	2203      	movs	r2, #3
 80032b8:	fa02 f303 	lsl.w	r3, r2, r3
 80032bc:	43db      	mvns	r3, r3
 80032be:	69fa      	ldr	r2, [r7, #28]
 80032c0:	4013      	ands	r3, r2
 80032c2:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	68da      	ldr	r2, [r3, #12]
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	fa02 f303 	lsl.w	r3, r2, r3
 80032d0:	69fa      	ldr	r2, [r7, #28]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	69fa      	ldr	r2, [r7, #28]
 80032da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80032e2:	2201      	movs	r2, #1
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ea:	43db      	mvns	r3, r3
 80032ec:	69fa      	ldr	r2, [r7, #28]
 80032ee:	4013      	ands	r3, r2
 80032f0:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	091b      	lsrs	r3, r3, #4
 80032f8:	f003 0201 	and.w	r2, r3, #1
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003302:	69fa      	ldr	r2, [r7, #28]
 8003304:	4313      	orrs	r3, r2
 8003306:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	69fa      	ldr	r2, [r7, #28]
 800330c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	2b03      	cmp	r3, #3
 8003314:	d017      	beq.n	8003346 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	2203      	movs	r2, #3
 8003322:	fa02 f303 	lsl.w	r3, r2, r3
 8003326:	43db      	mvns	r3, r3
 8003328:	69fa      	ldr	r2, [r7, #28]
 800332a:	4013      	ands	r3, r2
 800332c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	689a      	ldr	r2, [r3, #8]
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	fa02 f303 	lsl.w	r3, r2, r3
 800333a:	69fa      	ldr	r2, [r7, #28]
 800333c:	4313      	orrs	r3, r2
 800333e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	69fa      	ldr	r2, [r7, #28]
 8003344:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d07c      	beq.n	800344c <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003352:	4a47      	ldr	r2, [pc, #284]	; (8003470 <HAL_GPIO_Init+0x3a8>)
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	089b      	lsrs	r3, r3, #2
 8003358:	3318      	adds	r3, #24
 800335a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800335e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	f003 0303 	and.w	r3, r3, #3
 8003366:	00db      	lsls	r3, r3, #3
 8003368:	220f      	movs	r2, #15
 800336a:	fa02 f303 	lsl.w	r3, r2, r3
 800336e:	43db      	mvns	r3, r3
 8003370:	69fa      	ldr	r2, [r7, #28]
 8003372:	4013      	ands	r3, r2
 8003374:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	0a9a      	lsrs	r2, r3, #10
 800337a:	4b3e      	ldr	r3, [pc, #248]	; (8003474 <HAL_GPIO_Init+0x3ac>)
 800337c:	4013      	ands	r3, r2
 800337e:	697a      	ldr	r2, [r7, #20]
 8003380:	f002 0203 	and.w	r2, r2, #3
 8003384:	00d2      	lsls	r2, r2, #3
 8003386:	4093      	lsls	r3, r2
 8003388:	69fa      	ldr	r2, [r7, #28]
 800338a:	4313      	orrs	r3, r2
 800338c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800338e:	4938      	ldr	r1, [pc, #224]	; (8003470 <HAL_GPIO_Init+0x3a8>)
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	089b      	lsrs	r3, r3, #2
 8003394:	3318      	adds	r3, #24
 8003396:	69fa      	ldr	r2, [r7, #28]
 8003398:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800339c:	4b34      	ldr	r3, [pc, #208]	; (8003470 <HAL_GPIO_Init+0x3a8>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	43db      	mvns	r3, r3
 80033a6:	69fa      	ldr	r2, [r7, #28]
 80033a8:	4013      	ands	r3, r2
 80033aa:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d003      	beq.n	80033c0 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80033b8:	69fa      	ldr	r2, [r7, #28]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	4313      	orrs	r3, r2
 80033be:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80033c0:	4a2b      	ldr	r2, [pc, #172]	; (8003470 <HAL_GPIO_Init+0x3a8>)
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80033c6:	4b2a      	ldr	r3, [pc, #168]	; (8003470 <HAL_GPIO_Init+0x3a8>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	43db      	mvns	r3, r3
 80033d0:	69fa      	ldr	r2, [r7, #28]
 80033d2:	4013      	ands	r3, r2
 80033d4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d003      	beq.n	80033ea <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80033e2:	69fa      	ldr	r2, [r7, #28]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80033ea:	4a21      	ldr	r2, [pc, #132]	; (8003470 <HAL_GPIO_Init+0x3a8>)
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80033f0:	4b1f      	ldr	r3, [pc, #124]	; (8003470 <HAL_GPIO_Init+0x3a8>)
 80033f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033f6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	43db      	mvns	r3, r3
 80033fc:	69fa      	ldr	r2, [r7, #28]
 80033fe:	4013      	ands	r3, r2
 8003400:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d003      	beq.n	8003416 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800340e:	69fa      	ldr	r2, [r7, #28]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	4313      	orrs	r3, r2
 8003414:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8003416:	4a16      	ldr	r2, [pc, #88]	; (8003470 <HAL_GPIO_Init+0x3a8>)
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 800341e:	4b14      	ldr	r3, [pc, #80]	; (8003470 <HAL_GPIO_Init+0x3a8>)
 8003420:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003424:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	43db      	mvns	r3, r3
 800342a:	69fa      	ldr	r2, [r7, #28]
 800342c:	4013      	ands	r3, r2
 800342e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d003      	beq.n	8003444 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 800343c:	69fa      	ldr	r2, [r7, #28]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	4313      	orrs	r3, r2
 8003442:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8003444:	4a0a      	ldr	r2, [pc, #40]	; (8003470 <HAL_GPIO_Init+0x3a8>)
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	3301      	adds	r3, #1
 8003450:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	fa22 f303 	lsr.w	r3, r2, r3
 800345c:	2b00      	cmp	r3, #0
 800345e:	f47f ae3d 	bne.w	80030dc <HAL_GPIO_Init+0x14>
  }
}
 8003462:	bf00      	nop
 8003464:	bf00      	nop
 8003466:	3724      	adds	r7, #36	; 0x24
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	46022000 	.word	0x46022000
 8003474:	002f7f7f 	.word	0x002f7f7f

08003478 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	460b      	mov	r3, r1
 8003482:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	691a      	ldr	r2, [r3, #16]
 8003488:	887b      	ldrh	r3, [r7, #2]
 800348a:	4013      	ands	r3, r2
 800348c:	2b00      	cmp	r3, #0
 800348e:	d002      	beq.n	8003496 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003490:	2301      	movs	r3, #1
 8003492:	73fb      	strb	r3, [r7, #15]
 8003494:	e001      	b.n	800349a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003496:	2300      	movs	r3, #0
 8003498:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 800349a:	7bfb      	ldrb	r3, [r7, #15]
}
 800349c:	4618      	mov	r0, r3
 800349e:	3714      	adds	r7, #20
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	460b      	mov	r3, r1
 80034b2:	807b      	strh	r3, [r7, #2]
 80034b4:	4613      	mov	r3, r2
 80034b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034b8:	787b      	ldrb	r3, [r7, #1]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d003      	beq.n	80034c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034be:	887a      	ldrh	r2, [r7, #2]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80034c4:	e002      	b.n	80034cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80034c6:	887a      	ldrh	r2, [r7, #2]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80034d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034da:	b08f      	sub	sp, #60	; 0x3c
 80034dc:	af0a      	add	r7, sp, #40	; 0x28
 80034de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e116      	b.n	8003718 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (STM32U575xx) || defined (STM32U585xx)
  USBx = hpcd->Instance;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	60bb      	str	r3, [r7, #8]
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d106      	bne.n	800350a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f7fd fe3d 	bl	8001184 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2203      	movs	r2, #3
 800350e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined (STM32U575xx) || defined (STM32U585xx)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800351a:	2b00      	cmp	r3, #0
 800351c:	d102      	bne.n	8003524 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4618      	mov	r0, r3
 800352a:	f006 f83f 	bl	80095ac <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	603b      	str	r3, [r7, #0]
 8003534:	687e      	ldr	r6, [r7, #4]
 8003536:	466d      	mov	r5, sp
 8003538:	f106 0410 	add.w	r4, r6, #16
 800353c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800353e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003540:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003542:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003544:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003548:	e885 0003 	stmia.w	r5, {r0, r1}
 800354c:	1d33      	adds	r3, r6, #4
 800354e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003550:	6838      	ldr	r0, [r7, #0]
 8003552:	f005 ff5c 	bl	800940e <USB_CoreInit>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d005      	beq.n	8003568 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2202      	movs	r2, #2
 8003560:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e0d7      	b.n	8003718 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2100      	movs	r1, #0
 800356e:	4618      	mov	r0, r3
 8003570:	f006 f82d 	bl	80095ce <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003574:	2300      	movs	r3, #0
 8003576:	73fb      	strb	r3, [r7, #15]
 8003578:	e04a      	b.n	8003610 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800357a:	7bfa      	ldrb	r2, [r7, #15]
 800357c:	6879      	ldr	r1, [r7, #4]
 800357e:	4613      	mov	r3, r2
 8003580:	00db      	lsls	r3, r3, #3
 8003582:	4413      	add	r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	440b      	add	r3, r1
 8003588:	333d      	adds	r3, #61	; 0x3d
 800358a:	2201      	movs	r2, #1
 800358c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800358e:	7bfa      	ldrb	r2, [r7, #15]
 8003590:	6879      	ldr	r1, [r7, #4]
 8003592:	4613      	mov	r3, r2
 8003594:	00db      	lsls	r3, r3, #3
 8003596:	4413      	add	r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	440b      	add	r3, r1
 800359c:	333c      	adds	r3, #60	; 0x3c
 800359e:	7bfa      	ldrb	r2, [r7, #15]
 80035a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80035a2:	7bfa      	ldrb	r2, [r7, #15]
 80035a4:	7bfb      	ldrb	r3, [r7, #15]
 80035a6:	b298      	uxth	r0, r3
 80035a8:	6879      	ldr	r1, [r7, #4]
 80035aa:	4613      	mov	r3, r2
 80035ac:	00db      	lsls	r3, r3, #3
 80035ae:	4413      	add	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	440b      	add	r3, r1
 80035b4:	3344      	adds	r3, #68	; 0x44
 80035b6:	4602      	mov	r2, r0
 80035b8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80035ba:	7bfa      	ldrb	r2, [r7, #15]
 80035bc:	6879      	ldr	r1, [r7, #4]
 80035be:	4613      	mov	r3, r2
 80035c0:	00db      	lsls	r3, r3, #3
 80035c2:	4413      	add	r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	440b      	add	r3, r1
 80035c8:	3340      	adds	r3, #64	; 0x40
 80035ca:	2200      	movs	r2, #0
 80035cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80035ce:	7bfa      	ldrb	r2, [r7, #15]
 80035d0:	6879      	ldr	r1, [r7, #4]
 80035d2:	4613      	mov	r3, r2
 80035d4:	00db      	lsls	r3, r3, #3
 80035d6:	4413      	add	r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	440b      	add	r3, r1
 80035dc:	3348      	adds	r3, #72	; 0x48
 80035de:	2200      	movs	r2, #0
 80035e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80035e2:	7bfa      	ldrb	r2, [r7, #15]
 80035e4:	6879      	ldr	r1, [r7, #4]
 80035e6:	4613      	mov	r3, r2
 80035e8:	00db      	lsls	r3, r3, #3
 80035ea:	4413      	add	r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	440b      	add	r3, r1
 80035f0:	334c      	adds	r3, #76	; 0x4c
 80035f2:	2200      	movs	r2, #0
 80035f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80035f6:	7bfa      	ldrb	r2, [r7, #15]
 80035f8:	6879      	ldr	r1, [r7, #4]
 80035fa:	4613      	mov	r3, r2
 80035fc:	00db      	lsls	r3, r3, #3
 80035fe:	4413      	add	r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	440b      	add	r3, r1
 8003604:	3354      	adds	r3, #84	; 0x54
 8003606:	2200      	movs	r2, #0
 8003608:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800360a:	7bfb      	ldrb	r3, [r7, #15]
 800360c:	3301      	adds	r3, #1
 800360e:	73fb      	strb	r3, [r7, #15]
 8003610:	7bfa      	ldrb	r2, [r7, #15]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	429a      	cmp	r2, r3
 8003618:	d3af      	bcc.n	800357a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800361a:	2300      	movs	r3, #0
 800361c:	73fb      	strb	r3, [r7, #15]
 800361e:	e044      	b.n	80036aa <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003620:	7bfa      	ldrb	r2, [r7, #15]
 8003622:	6879      	ldr	r1, [r7, #4]
 8003624:	4613      	mov	r3, r2
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	4413      	add	r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	440b      	add	r3, r1
 800362e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003632:	2200      	movs	r2, #0
 8003634:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003636:	7bfa      	ldrb	r2, [r7, #15]
 8003638:	6879      	ldr	r1, [r7, #4]
 800363a:	4613      	mov	r3, r2
 800363c:	00db      	lsls	r3, r3, #3
 800363e:	4413      	add	r3, r2
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	440b      	add	r3, r1
 8003644:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003648:	7bfa      	ldrb	r2, [r7, #15]
 800364a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800364c:	7bfa      	ldrb	r2, [r7, #15]
 800364e:	6879      	ldr	r1, [r7, #4]
 8003650:	4613      	mov	r3, r2
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	4413      	add	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	440b      	add	r3, r1
 800365a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800365e:	2200      	movs	r2, #0
 8003660:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003662:	7bfa      	ldrb	r2, [r7, #15]
 8003664:	6879      	ldr	r1, [r7, #4]
 8003666:	4613      	mov	r3, r2
 8003668:	00db      	lsls	r3, r3, #3
 800366a:	4413      	add	r3, r2
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	440b      	add	r3, r1
 8003670:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003674:	2200      	movs	r2, #0
 8003676:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003678:	7bfa      	ldrb	r2, [r7, #15]
 800367a:	6879      	ldr	r1, [r7, #4]
 800367c:	4613      	mov	r3, r2
 800367e:	00db      	lsls	r3, r3, #3
 8003680:	4413      	add	r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	440b      	add	r3, r1
 8003686:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800368a:	2200      	movs	r2, #0
 800368c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800368e:	7bfa      	ldrb	r2, [r7, #15]
 8003690:	6879      	ldr	r1, [r7, #4]
 8003692:	4613      	mov	r3, r2
 8003694:	00db      	lsls	r3, r3, #3
 8003696:	4413      	add	r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	440b      	add	r3, r1
 800369c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80036a0:	2200      	movs	r2, #0
 80036a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036a4:	7bfb      	ldrb	r3, [r7, #15]
 80036a6:	3301      	adds	r3, #1
 80036a8:	73fb      	strb	r3, [r7, #15]
 80036aa:	7bfa      	ldrb	r2, [r7, #15]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d3b5      	bcc.n	8003620 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	603b      	str	r3, [r7, #0]
 80036ba:	687e      	ldr	r6, [r7, #4]
 80036bc:	466d      	mov	r5, sp
 80036be:	f106 0410 	add.w	r4, r6, #16
 80036c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80036ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80036d2:	1d33      	adds	r3, r6, #4
 80036d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036d6:	6838      	ldr	r0, [r7, #0]
 80036d8:	f005 ffc6 	bl	8009668 <USB_DevInit>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d005      	beq.n	80036ee <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2202      	movs	r2, #2
 80036e6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e014      	b.n	8003718 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2201      	movs	r2, #1
 80036fa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003702:	2b01      	cmp	r3, #1
 8003704:	d102      	bne.n	800370c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 ff38 	bl	800457c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4618      	mov	r0, r3
 8003712:	f006 fad9 	bl	8009cc8 <USB_DevDisconnect>

  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3714      	adds	r7, #20
 800371c:	46bd      	mov	sp, r7
 800371e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003720 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003720:	b590      	push	{r4, r7, lr}
 8003722:	b08d      	sub	sp, #52	; 0x34
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800372e:	6a3b      	ldr	r3, [r7, #32]
 8003730:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4618      	mov	r0, r3
 8003738:	f006 fb7a 	bl	8009e30 <USB_GetMode>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	f040 84b7 	bne.w	80040b2 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4618      	mov	r0, r3
 800374a:	f006 fade 	bl	8009d0a <USB_ReadInterrupts>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	f000 84ad 	beq.w	80040b0 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	0a1b      	lsrs	r3, r3, #8
 8003760:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4618      	mov	r0, r3
 8003770:	f006 facb 	bl	8009d0a <USB_ReadInterrupts>
 8003774:	4603      	mov	r3, r0
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b02      	cmp	r3, #2
 800377c:	d107      	bne.n	800378e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	695a      	ldr	r2, [r3, #20]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f002 0202 	and.w	r2, r2, #2
 800378c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4618      	mov	r0, r3
 8003794:	f006 fab9 	bl	8009d0a <USB_ReadInterrupts>
 8003798:	4603      	mov	r3, r0
 800379a:	f003 0310 	and.w	r3, r3, #16
 800379e:	2b10      	cmp	r3, #16
 80037a0:	d161      	bne.n	8003866 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	699a      	ldr	r2, [r3, #24]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f022 0210 	bic.w	r2, r2, #16
 80037b0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80037b2:	6a3b      	ldr	r3, [r7, #32]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	f003 020f 	and.w	r2, r3, #15
 80037be:	4613      	mov	r3, r2
 80037c0:	00db      	lsls	r3, r3, #3
 80037c2:	4413      	add	r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	4413      	add	r3, r2
 80037ce:	3304      	adds	r3, #4
 80037d0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	0c5b      	lsrs	r3, r3, #17
 80037d6:	f003 030f 	and.w	r3, r3, #15
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d124      	bne.n	8003828 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80037e4:	4013      	ands	r3, r2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d035      	beq.n	8003856 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	091b      	lsrs	r3, r3, #4
 80037f2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80037f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	461a      	mov	r2, r3
 80037fc:	6a38      	ldr	r0, [r7, #32]
 80037fe:	f006 fa0b 	bl	8009c18 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	691a      	ldr	r2, [r3, #16]
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	091b      	lsrs	r3, r3, #4
 800380a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800380e:	441a      	add	r2, r3
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	6a1a      	ldr	r2, [r3, #32]
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	091b      	lsrs	r3, r3, #4
 800381c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003820:	441a      	add	r2, r3
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	621a      	str	r2, [r3, #32]
 8003826:	e016      	b.n	8003856 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	0c5b      	lsrs	r3, r3, #17
 800382c:	f003 030f 	and.w	r3, r3, #15
 8003830:	2b06      	cmp	r3, #6
 8003832:	d110      	bne.n	8003856 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800383a:	2208      	movs	r2, #8
 800383c:	4619      	mov	r1, r3
 800383e:	6a38      	ldr	r0, [r7, #32]
 8003840:	f006 f9ea 	bl	8009c18 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	6a1a      	ldr	r2, [r3, #32]
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	091b      	lsrs	r3, r3, #4
 800384c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003850:	441a      	add	r2, r3
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	699a      	ldr	r2, [r3, #24]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f042 0210 	orr.w	r2, r2, #16
 8003864:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4618      	mov	r0, r3
 800386c:	f006 fa4d 	bl	8009d0a <USB_ReadInterrupts>
 8003870:	4603      	mov	r3, r0
 8003872:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003876:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800387a:	f040 80a7 	bne.w	80039cc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800387e:	2300      	movs	r3, #0
 8003880:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4618      	mov	r0, r3
 8003888:	f006 fa52 	bl	8009d30 <USB_ReadDevAllOutEpInterrupt>
 800388c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800388e:	e099      	b.n	80039c4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	2b00      	cmp	r3, #0
 8003898:	f000 808e 	beq.w	80039b8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038a2:	b2d2      	uxtb	r2, r2
 80038a4:	4611      	mov	r1, r2
 80038a6:	4618      	mov	r0, r3
 80038a8:	f006 fa76 	bl	8009d98 <USB_ReadDevOutEPInterrupt>
 80038ac:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	f003 0301 	and.w	r3, r3, #1
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00c      	beq.n	80038d2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80038b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ba:	015a      	lsls	r2, r3, #5
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	4413      	add	r3, r2
 80038c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038c4:	461a      	mov	r2, r3
 80038c6:	2301      	movs	r3, #1
 80038c8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80038ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 fd27 	bl	8004320 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	f003 0308 	and.w	r3, r3, #8
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00c      	beq.n	80038f6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80038dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038de:	015a      	lsls	r2, r3, #5
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	4413      	add	r3, r2
 80038e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038e8:	461a      	mov	r2, r3
 80038ea:	2308      	movs	r3, #8
 80038ec:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80038ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 fdfd 	bl	80044f0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	f003 0310 	and.w	r3, r3, #16
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d008      	beq.n	8003912 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003902:	015a      	lsls	r2, r3, #5
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	4413      	add	r3, r2
 8003908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800390c:	461a      	mov	r2, r3
 800390e:	2310      	movs	r3, #16
 8003910:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d030      	beq.n	800397e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800391c:	6a3b      	ldr	r3, [r7, #32]
 800391e:	695b      	ldr	r3, [r3, #20]
 8003920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003924:	2b80      	cmp	r3, #128	; 0x80
 8003926:	d109      	bne.n	800393c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	69fa      	ldr	r2, [r7, #28]
 8003932:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003936:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800393a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800393c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800393e:	4613      	mov	r3, r2
 8003940:	00db      	lsls	r3, r3, #3
 8003942:	4413      	add	r3, r2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	4413      	add	r3, r2
 800394e:	3304      	adds	r3, #4
 8003950:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	78db      	ldrb	r3, [r3, #3]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d108      	bne.n	800396c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	2200      	movs	r2, #0
 800395e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003962:	b2db      	uxtb	r3, r3
 8003964:	4619      	mov	r1, r3
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 fbf0 	bl	800414c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800396c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396e:	015a      	lsls	r2, r3, #5
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	4413      	add	r3, r2
 8003974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003978:	461a      	mov	r2, r3
 800397a:	2302      	movs	r3, #2
 800397c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	f003 0320 	and.w	r3, r3, #32
 8003984:	2b00      	cmp	r3, #0
 8003986:	d008      	beq.n	800399a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398a:	015a      	lsls	r2, r3, #5
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	4413      	add	r3, r2
 8003990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003994:	461a      	mov	r2, r3
 8003996:	2320      	movs	r3, #32
 8003998:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d009      	beq.n	80039b8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80039a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a6:	015a      	lsls	r2, r3, #5
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	4413      	add	r3, r2
 80039ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039b0:	461a      	mov	r2, r3
 80039b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039b6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80039b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ba:	3301      	adds	r3, #1
 80039bc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80039be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c0:	085b      	lsrs	r3, r3, #1
 80039c2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80039c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	f47f af62 	bne.w	8003890 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f006 f99a 	bl	8009d0a <USB_ReadInterrupts>
 80039d6:	4603      	mov	r3, r0
 80039d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039e0:	f040 80db 	bne.w	8003b9a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4618      	mov	r0, r3
 80039ea:	f006 f9bb 	bl	8009d64 <USB_ReadDevAllInEpInterrupt>
 80039ee:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80039f0:	2300      	movs	r3, #0
 80039f2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80039f4:	e0cd      	b.n	8003b92 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80039f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f000 80c2 	beq.w	8003b86 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a08:	b2d2      	uxtb	r2, r2
 8003a0a:	4611      	mov	r1, r2
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f006 f9e1 	bl	8009dd4 <USB_ReadDevInEPInterrupt>
 8003a12:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d057      	beq.n	8003ace <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a20:	f003 030f 	and.w	r3, r3, #15
 8003a24:	2201      	movs	r2, #1
 8003a26:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	43db      	mvns	r3, r3
 8003a38:	69f9      	ldr	r1, [r7, #28]
 8003a3a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a3e:	4013      	ands	r3, r2
 8003a40:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a44:	015a      	lsls	r2, r3, #5
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	4413      	add	r3, r2
 8003a4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a4e:	461a      	mov	r2, r3
 8003a50:	2301      	movs	r3, #1
 8003a52:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d132      	bne.n	8003ac2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003a5c:	6879      	ldr	r1, [r7, #4]
 8003a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a60:	4613      	mov	r3, r2
 8003a62:	00db      	lsls	r3, r3, #3
 8003a64:	4413      	add	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	440b      	add	r3, r1
 8003a6a:	334c      	adds	r3, #76	; 0x4c
 8003a6c:	6819      	ldr	r1, [r3, #0]
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a72:	4613      	mov	r3, r2
 8003a74:	00db      	lsls	r3, r3, #3
 8003a76:	4413      	add	r3, r2
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	4403      	add	r3, r0
 8003a7c:	3348      	adds	r3, #72	; 0x48
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4419      	add	r1, r3
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a86:	4613      	mov	r3, r2
 8003a88:	00db      	lsls	r3, r3, #3
 8003a8a:	4413      	add	r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	4403      	add	r3, r0
 8003a90:	334c      	adds	r3, #76	; 0x4c
 8003a92:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d113      	bne.n	8003ac2 <HAL_PCD_IRQHandler+0x3a2>
 8003a9a:	6879      	ldr	r1, [r7, #4]
 8003a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	00db      	lsls	r3, r3, #3
 8003aa2:	4413      	add	r3, r2
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	440b      	add	r3, r1
 8003aa8:	3354      	adds	r3, #84	; 0x54
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d108      	bne.n	8003ac2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6818      	ldr	r0, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003aba:	461a      	mov	r2, r3
 8003abc:	2101      	movs	r1, #1
 8003abe:	f006 f9e9 	bl	8009e94 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 fb01 	bl	80040d0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	f003 0308 	and.w	r3, r3, #8
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d008      	beq.n	8003aea <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ada:	015a      	lsls	r2, r3, #5
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	4413      	add	r3, r2
 8003ae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	2308      	movs	r3, #8
 8003ae8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	f003 0310 	and.w	r3, r3, #16
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d008      	beq.n	8003b06 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af6:	015a      	lsls	r2, r3, #5
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	4413      	add	r3, r2
 8003afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b00:	461a      	mov	r2, r3
 8003b02:	2310      	movs	r3, #16
 8003b04:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d008      	beq.n	8003b22 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b12:	015a      	lsls	r2, r3, #5
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	4413      	add	r3, r2
 8003b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	2340      	movs	r3, #64	; 0x40
 8003b20:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	f003 0302 	and.w	r3, r3, #2
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d023      	beq.n	8003b74 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003b2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b2e:	6a38      	ldr	r0, [r7, #32]
 8003b30:	f005 fee8 	bl	8009904 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b36:	4613      	mov	r3, r2
 8003b38:	00db      	lsls	r3, r3, #3
 8003b3a:	4413      	add	r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	3338      	adds	r3, #56	; 0x38
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	4413      	add	r3, r2
 8003b44:	3304      	adds	r3, #4
 8003b46:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	78db      	ldrb	r3, [r3, #3]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d108      	bne.n	8003b62 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	2200      	movs	r2, #0
 8003b54:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 fb01 	bl	8004164 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b64:	015a      	lsls	r2, r3, #5
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	4413      	add	r3, r2
 8003b6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b6e:	461a      	mov	r2, r3
 8003b70:	2302      	movs	r3, #2
 8003b72:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d003      	beq.n	8003b86 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003b7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 fb40 	bl	8004206 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b88:	3301      	adds	r3, #1
 8003b8a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b8e:	085b      	lsrs	r3, r3, #1
 8003b90:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f47f af2e 	bne.w	80039f6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f006 f8b3 	bl	8009d0a <USB_ReadInterrupts>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003baa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bae:	d122      	bne.n	8003bf6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	69fa      	ldr	r2, [r7, #28]
 8003bba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bbe:	f023 0301 	bic.w	r3, r3, #1
 8003bc2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d108      	bne.n	8003be0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003bd6:	2100      	movs	r1, #0
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 fcf3 	bl	80045c4 <HAL_PCDEx_LPM_Callback>
 8003bde:	e002      	b.n	8003be6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 faa9 	bl	8004138 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	695a      	ldr	r2, [r3, #20]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003bf4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f006 f885 	bl	8009d0a <USB_ReadInterrupts>
 8003c00:	4603      	mov	r3, r0
 8003c02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c0a:	d112      	bne.n	8003c32 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d102      	bne.n	8003c22 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 fa81 	bl	8004124 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	695a      	ldr	r2, [r3, #20]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003c30:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4618      	mov	r0, r3
 8003c38:	f006 f867 	bl	8009d0a <USB_ReadInterrupts>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c46:	d121      	bne.n	8003c8c <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	695a      	ldr	r2, [r3, #20]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003c56:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d111      	bne.n	8003c86 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c70:	089b      	lsrs	r3, r3, #2
 8003c72:	f003 020f 	and.w	r2, r3, #15
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003c7c:	2101      	movs	r1, #1
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 fca0 	bl	80045c4 <HAL_PCDEx_LPM_Callback>
 8003c84:	e002      	b.n	8003c8c <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 fa4c 	bl	8004124 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4618      	mov	r0, r3
 8003c92:	f006 f83a 	bl	8009d0a <USB_ReadInterrupts>
 8003c96:	4603      	mov	r3, r0
 8003c98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ca0:	f040 80b7 	bne.w	8003e12 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	69fa      	ldr	r2, [r7, #28]
 8003cae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cb2:	f023 0301 	bic.w	r3, r3, #1
 8003cb6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2110      	movs	r1, #16
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f005 fe20 	bl	8009904 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cc8:	e046      	b.n	8003d58 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ccc:	015a      	lsls	r2, r3, #5
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003cdc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce0:	015a      	lsls	r2, r3, #5
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cee:	0151      	lsls	r1, r2, #5
 8003cf0:	69fa      	ldr	r2, [r7, #28]
 8003cf2:	440a      	add	r2, r1
 8003cf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cf8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003cfc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d00:	015a      	lsls	r2, r3, #5
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	4413      	add	r3, r2
 8003d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d10:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d14:	015a      	lsls	r2, r3, #5
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	4413      	add	r3, r2
 8003d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d22:	0151      	lsls	r1, r2, #5
 8003d24:	69fa      	ldr	r2, [r7, #28]
 8003d26:	440a      	add	r2, r1
 8003d28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d2c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d30:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d34:	015a      	lsls	r2, r3, #5
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	4413      	add	r3, r2
 8003d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d42:	0151      	lsls	r1, r2, #5
 8003d44:	69fa      	ldr	r2, [r7, #28]
 8003d46:	440a      	add	r2, r1
 8003d48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d4c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d50:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d54:	3301      	adds	r3, #1
 8003d56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d3b3      	bcc.n	8003cca <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d68:	69db      	ldr	r3, [r3, #28]
 8003d6a:	69fa      	ldr	r2, [r7, #28]
 8003d6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d70:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003d74:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d016      	beq.n	8003dac <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d88:	69fa      	ldr	r2, [r7, #28]
 8003d8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d8e:	f043 030b 	orr.w	r3, r3, #11
 8003d92:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d9e:	69fa      	ldr	r2, [r7, #28]
 8003da0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003da4:	f043 030b 	orr.w	r3, r3, #11
 8003da8:	6453      	str	r3, [r2, #68]	; 0x44
 8003daa:	e015      	b.n	8003dd8 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	69fa      	ldr	r2, [r7, #28]
 8003db6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003dbe:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003dc2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	69fa      	ldr	r2, [r7, #28]
 8003dce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dd2:	f043 030b 	orr.w	r3, r3, #11
 8003dd6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	69fa      	ldr	r2, [r7, #28]
 8003de2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003de6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003dea:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6818      	ldr	r0, [r3, #0]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	f006 f849 	bl	8009e94 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	695a      	ldr	r2, [r3, #20]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003e10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f005 ff77 	bl	8009d0a <USB_ReadInterrupts>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e26:	d124      	bne.n	8003e72 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f006 f80d 	bl	8009e4c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f005 fde1 	bl	80099fe <USB_GetDevSpeed>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	461a      	mov	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681c      	ldr	r4, [r3, #0]
 8003e48:	f001 fe9a 	bl	8005b80 <HAL_RCC_GetHCLKFreq>
 8003e4c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	461a      	mov	r2, r3
 8003e56:	4620      	mov	r0, r4
 8003e58:	f005 fb06 	bl	8009468 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f000 f957 	bl	8004110 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	695a      	ldr	r2, [r3, #20]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003e70:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f005 ff47 	bl	8009d0a <USB_ReadInterrupts>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	f003 0308 	and.w	r3, r3, #8
 8003e82:	2b08      	cmp	r3, #8
 8003e84:	d10a      	bne.n	8003e9c <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 f938 	bl	80040fc <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	695a      	ldr	r2, [r3, #20]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f002 0208 	and.w	r2, r2, #8
 8003e9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f005 ff32 	bl	8009d0a <USB_ReadInterrupts>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eac:	2b80      	cmp	r3, #128	; 0x80
 8003eae:	d122      	bne.n	8003ef6 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003eb0:	6a3b      	ldr	r3, [r7, #32]
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003eb8:	6a3b      	ldr	r3, [r7, #32]
 8003eba:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	627b      	str	r3, [r7, #36]	; 0x24
 8003ec0:	e014      	b.n	8003eec <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003ec2:	6879      	ldr	r1, [r7, #4]
 8003ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	00db      	lsls	r3, r3, #3
 8003eca:	4413      	add	r3, r2
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	440b      	add	r3, r1
 8003ed0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d105      	bne.n	8003ee6 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	4619      	mov	r1, r3
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 f95f 	bl	80041a4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee8:	3301      	adds	r3, #1
 8003eea:	627b      	str	r3, [r7, #36]	; 0x24
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d3e5      	bcc.n	8003ec2 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f005 ff05 	bl	8009d0a <USB_ReadInterrupts>
 8003f00:	4603      	mov	r3, r0
 8003f02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f0a:	d13b      	bne.n	8003f84 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f10:	e02b      	b.n	8003f6a <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f14:	015a      	lsls	r2, r3, #5
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	4413      	add	r3, r2
 8003f1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f22:	6879      	ldr	r1, [r7, #4]
 8003f24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f26:	4613      	mov	r3, r2
 8003f28:	00db      	lsls	r3, r3, #3
 8003f2a:	4413      	add	r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	440b      	add	r3, r1
 8003f30:	3340      	adds	r3, #64	; 0x40
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d115      	bne.n	8003f64 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003f38:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	da12      	bge.n	8003f64 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003f3e:	6879      	ldr	r1, [r7, #4]
 8003f40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f42:	4613      	mov	r3, r2
 8003f44:	00db      	lsls	r3, r3, #3
 8003f46:	4413      	add	r3, r2
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	440b      	add	r3, r1
 8003f4c:	333f      	adds	r3, #63	; 0x3f
 8003f4e:	2201      	movs	r2, #1
 8003f50:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 f920 	bl	80041a4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f66:	3301      	adds	r3, #1
 8003f68:	627b      	str	r3, [r7, #36]	; 0x24
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d3ce      	bcc.n	8003f12 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	695a      	ldr	r2, [r3, #20]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003f82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f005 febe 	bl	8009d0a <USB_ReadInterrupts>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f98:	d155      	bne.n	8004046 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f9e:	e045      	b.n	800402c <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa2:	015a      	lsls	r2, r3, #5
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003fb0:	6879      	ldr	r1, [r7, #4]
 8003fb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	00db      	lsls	r3, r3, #3
 8003fb8:	4413      	add	r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	440b      	add	r3, r1
 8003fbe:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d12e      	bne.n	8004026 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003fc8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	da2b      	bge.n	8004026 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003fda:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d121      	bne.n	8004026 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003fe2:	6879      	ldr	r1, [r7, #4]
 8003fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	00db      	lsls	r3, r3, #3
 8003fea:	4413      	add	r3, r2
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	440b      	add	r3, r1
 8003ff0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003ff8:	6a3b      	ldr	r3, [r7, #32]
 8003ffa:	699b      	ldr	r3, [r3, #24]
 8003ffc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004000:	6a3b      	ldr	r3, [r7, #32]
 8004002:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004004:	6a3b      	ldr	r3, [r7, #32]
 8004006:	695b      	ldr	r3, [r3, #20]
 8004008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800400c:	2b00      	cmp	r3, #0
 800400e:	d10a      	bne.n	8004026 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	69fa      	ldr	r2, [r7, #28]
 800401a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800401e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004022:	6053      	str	r3, [r2, #4]
            break;
 8004024:	e007      	b.n	8004036 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004028:	3301      	adds	r3, #1
 800402a:	627b      	str	r3, [r7, #36]	; 0x24
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004032:	429a      	cmp	r2, r3
 8004034:	d3b4      	bcc.n	8003fa0 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	695a      	ldr	r2, [r3, #20]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004044:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4618      	mov	r0, r3
 800404c:	f005 fe5d 	bl	8009d0a <USB_ReadInterrupts>
 8004050:	4603      	mov	r3, r0
 8004052:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800405a:	d10a      	bne.n	8004072 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f000 f88d 	bl	800417c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	695a      	ldr	r2, [r3, #20]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004070:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4618      	mov	r0, r3
 8004078:	f005 fe47 	bl	8009d0a <USB_ReadInterrupts>
 800407c:	4603      	mov	r3, r0
 800407e:	f003 0304 	and.w	r3, r3, #4
 8004082:	2b04      	cmp	r3, #4
 8004084:	d115      	bne.n	80040b2 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	f003 0304 	and.w	r3, r3, #4
 8004094:	2b00      	cmp	r3, #0
 8004096:	d002      	beq.n	800409e <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f000 f879 	bl	8004190 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	6859      	ldr	r1, [r3, #4]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	605a      	str	r2, [r3, #4]
 80040ae:	e000      	b.n	80040b2 <HAL_PCD_IRQHandler+0x992>
      return;
 80040b0:	bf00      	nop
    }
  }
}
 80040b2:	3734      	adds	r7, #52	; 0x34
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd90      	pop	{r4, r7, pc}

080040b8 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	460b      	mov	r3, r1
 80040c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 80040c4:	bf00      	nop
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	460b      	mov	r3, r1
 80040da:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 80040dc:	bf00      	nop
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 80040f0:	bf00      	nop
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	460b      	mov	r3, r1
 8004156:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	460b      	mov	r3, r1
 800416e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 8004184:	bf00      	nop
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 8004198:	bf00      	nop
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	460b      	mov	r3, r1
 80041ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80041b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	da0c      	bge.n	80041d2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041b8:	78fb      	ldrb	r3, [r7, #3]
 80041ba:	f003 020f 	and.w	r2, r3, #15
 80041be:	4613      	mov	r3, r2
 80041c0:	00db      	lsls	r3, r3, #3
 80041c2:	4413      	add	r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	3338      	adds	r3, #56	; 0x38
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	4413      	add	r3, r2
 80041cc:	3304      	adds	r3, #4
 80041ce:	60fb      	str	r3, [r7, #12]
 80041d0:	e00c      	b.n	80041ec <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041d2:	78fb      	ldrb	r3, [r7, #3]
 80041d4:	f003 020f 	and.w	r2, r3, #15
 80041d8:	4613      	mov	r3, r2
 80041da:	00db      	lsls	r3, r3, #3
 80041dc:	4413      	add	r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	4413      	add	r3, r2
 80041e8:	3304      	adds	r3, #4
 80041ea:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68f9      	ldr	r1, [r7, #12]
 80041f2:	4618      	mov	r0, r3
 80041f4:	f005 fc28 	bl	8009a48 <USB_EPStopXfer>
 80041f8:	4603      	mov	r3, r0
 80041fa:	72fb      	strb	r3, [r7, #11]

  return ret;
 80041fc:	7afb      	ldrb	r3, [r7, #11]
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3710      	adds	r7, #16
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004206:	b580      	push	{r7, lr}
 8004208:	b08a      	sub	sp, #40	; 0x28
 800420a:	af02      	add	r7, sp, #8
 800420c:	6078      	str	r0, [r7, #4]
 800420e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800421a:	683a      	ldr	r2, [r7, #0]
 800421c:	4613      	mov	r3, r2
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	4413      	add	r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	3338      	adds	r3, #56	; 0x38
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	4413      	add	r3, r2
 800422a:	3304      	adds	r3, #4
 800422c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6a1a      	ldr	r2, [r3, #32]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	429a      	cmp	r2, r3
 8004238:	d901      	bls.n	800423e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e06c      	b.n	8004318 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	699a      	ldr	r2, [r3, #24]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	69fa      	ldr	r2, [r7, #28]
 8004250:	429a      	cmp	r2, r3
 8004252:	d902      	bls.n	800425a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	3303      	adds	r3, #3
 800425e:	089b      	lsrs	r3, r3, #2
 8004260:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004262:	e02b      	b.n	80042bc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	699a      	ldr	r2, [r3, #24]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6a1b      	ldr	r3, [r3, #32]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	69fa      	ldr	r2, [r7, #28]
 8004276:	429a      	cmp	r2, r3
 8004278:	d902      	bls.n	8004280 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	3303      	adds	r3, #3
 8004284:	089b      	lsrs	r3, r3, #2
 8004286:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6919      	ldr	r1, [r3, #16]
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	b2da      	uxtb	r2, r3
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004298:	b2db      	uxtb	r3, r3
 800429a:	9300      	str	r3, [sp, #0]
 800429c:	4603      	mov	r3, r0
 800429e:	6978      	ldr	r0, [r7, #20]
 80042a0:	f005 fc7c 	bl	8009b9c <USB_WritePacket>

    ep->xfer_buff  += len;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	691a      	ldr	r2, [r3, #16]
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	441a      	add	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6a1a      	ldr	r2, [r3, #32]
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	441a      	add	r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	015a      	lsls	r2, r3, #5
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	4413      	add	r3, r2
 80042c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d809      	bhi.n	80042e6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6a1a      	ldr	r2, [r3, #32]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80042da:	429a      	cmp	r2, r3
 80042dc:	d203      	bcs.n	80042e6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1be      	bne.n	8004264 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	699a      	ldr	r2, [r3, #24]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6a1b      	ldr	r3, [r3, #32]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d811      	bhi.n	8004316 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	f003 030f 	and.w	r3, r3, #15
 80042f8:	2201      	movs	r2, #1
 80042fa:	fa02 f303 	lsl.w	r3, r2, r3
 80042fe:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004306:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	43db      	mvns	r3, r3
 800430c:	6939      	ldr	r1, [r7, #16]
 800430e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004312:	4013      	ands	r3, r2
 8004314:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004316:	2300      	movs	r3, #0
}
 8004318:	4618      	mov	r0, r3
 800431a:	3720      	adds	r7, #32
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b088      	sub	sp, #32
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	333c      	adds	r3, #60	; 0x3c
 8004338:	3304      	adds	r3, #4
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	015a      	lsls	r2, r3, #5
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	4413      	add	r3, r2
 8004346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d17b      	bne.n	800444e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	f003 0308 	and.w	r3, r3, #8
 800435c:	2b00      	cmp	r3, #0
 800435e:	d015      	beq.n	800438c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	4a61      	ldr	r2, [pc, #388]	; (80044e8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004364:	4293      	cmp	r3, r2
 8004366:	f240 80b9 	bls.w	80044dc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004370:	2b00      	cmp	r3, #0
 8004372:	f000 80b3 	beq.w	80044dc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	015a      	lsls	r2, r3, #5
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	4413      	add	r3, r2
 800437e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004382:	461a      	mov	r2, r3
 8004384:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004388:	6093      	str	r3, [r2, #8]
 800438a:	e0a7      	b.n	80044dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	f003 0320 	and.w	r3, r3, #32
 8004392:	2b00      	cmp	r3, #0
 8004394:	d009      	beq.n	80043aa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	015a      	lsls	r2, r3, #5
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	4413      	add	r3, r2
 800439e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043a2:	461a      	mov	r2, r3
 80043a4:	2320      	movs	r3, #32
 80043a6:	6093      	str	r3, [r2, #8]
 80043a8:	e098      	b.n	80044dc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f040 8093 	bne.w	80044dc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	4a4b      	ldr	r2, [pc, #300]	; (80044e8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d90f      	bls.n	80043de <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00a      	beq.n	80043de <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	015a      	lsls	r2, r3, #5
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	4413      	add	r3, r2
 80043d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d4:	461a      	mov	r2, r3
 80043d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043da:	6093      	str	r3, [r2, #8]
 80043dc:	e07e      	b.n	80044dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80043de:	683a      	ldr	r2, [r7, #0]
 80043e0:	4613      	mov	r3, r2
 80043e2:	00db      	lsls	r3, r3, #3
 80043e4:	4413      	add	r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	4413      	add	r3, r2
 80043f0:	3304      	adds	r3, #4
 80043f2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	69da      	ldr	r2, [r3, #28]
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	0159      	lsls	r1, r3, #5
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	440b      	add	r3, r1
 8004400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800440a:	1ad2      	subs	r2, r2, r3
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d114      	bne.n	8004440 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d109      	bne.n	8004432 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6818      	ldr	r0, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004428:	461a      	mov	r2, r3
 800442a:	2101      	movs	r1, #1
 800442c:	f005 fd32 	bl	8009e94 <USB_EP0_OutStart>
 8004430:	e006      	b.n	8004440 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	691a      	ldr	r2, [r3, #16]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6a1b      	ldr	r3, [r3, #32]
 800443a:	441a      	add	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	b2db      	uxtb	r3, r3
 8004444:	4619      	mov	r1, r3
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f7ff fe36 	bl	80040b8 <HAL_PCD_DataOutStageCallback>
 800444c:	e046      	b.n	80044dc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	4a26      	ldr	r2, [pc, #152]	; (80044ec <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d124      	bne.n	80044a0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d00a      	beq.n	8004476 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	015a      	lsls	r2, r3, #5
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	4413      	add	r3, r2
 8004468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800446c:	461a      	mov	r2, r3
 800446e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004472:	6093      	str	r3, [r2, #8]
 8004474:	e032      	b.n	80044dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	f003 0320 	and.w	r3, r3, #32
 800447c:	2b00      	cmp	r3, #0
 800447e:	d008      	beq.n	8004492 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	015a      	lsls	r2, r3, #5
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	4413      	add	r3, r2
 8004488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800448c:	461a      	mov	r2, r3
 800448e:	2320      	movs	r3, #32
 8004490:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	b2db      	uxtb	r3, r3
 8004496:	4619      	mov	r1, r3
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f7ff fe0d 	bl	80040b8 <HAL_PCD_DataOutStageCallback>
 800449e:	e01d      	b.n	80044dc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d114      	bne.n	80044d0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80044a6:	6879      	ldr	r1, [r7, #4]
 80044a8:	683a      	ldr	r2, [r7, #0]
 80044aa:	4613      	mov	r3, r2
 80044ac:	00db      	lsls	r3, r3, #3
 80044ae:	4413      	add	r3, r2
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	440b      	add	r3, r1
 80044b4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d108      	bne.n	80044d0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6818      	ldr	r0, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80044c8:	461a      	mov	r2, r3
 80044ca:	2100      	movs	r1, #0
 80044cc:	f005 fce2 	bl	8009e94 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	4619      	mov	r1, r3
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f7ff fdee 	bl	80040b8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3720      	adds	r7, #32
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	4f54300a 	.word	0x4f54300a
 80044ec:	4f54310a 	.word	0x4f54310a

080044f0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b086      	sub	sp, #24
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	333c      	adds	r3, #60	; 0x3c
 8004508:	3304      	adds	r3, #4
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	015a      	lsls	r2, r3, #5
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	4413      	add	r3, r2
 8004516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	4a15      	ldr	r2, [pc, #84]	; (8004578 <PCD_EP_OutSetupPacket_int+0x88>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d90e      	bls.n	8004544 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800452c:	2b00      	cmp	r3, #0
 800452e:	d009      	beq.n	8004544 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	015a      	lsls	r2, r3, #5
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	4413      	add	r3, r2
 8004538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800453c:	461a      	mov	r2, r3
 800453e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004542:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f7ff fdcf 	bl	80040e8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	4a0a      	ldr	r2, [pc, #40]	; (8004578 <PCD_EP_OutSetupPacket_int+0x88>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d90c      	bls.n	800456c <PCD_EP_OutSetupPacket_int+0x7c>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d108      	bne.n	800456c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6818      	ldr	r0, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004564:	461a      	mov	r2, r3
 8004566:	2101      	movs	r1, #1
 8004568:	f005 fc94 	bl	8009e94 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3718      	adds	r7, #24
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	4f54300a 	.word	0x4f54300a

0800457c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800457c:	b480      	push	{r7}
 800457e:	b085      	sub	sp, #20
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2201      	movs	r2, #1
 800458e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045ae:	f043 0303 	orr.w	r3, r3, #3
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3714      	adds	r7, #20
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	460b      	mov	r3, r1
 80045ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80045e4:	4b34      	ldr	r3, [pc, #208]	; (80046b8 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80045e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80045ec:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80045ee:	68ba      	ldr	r2, [r7, #8]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d101      	bne.n	80045fa <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 80045f6:	2300      	movs	r3, #0
 80045f8:	e057      	b.n	80046aa <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004600:	d90a      	bls.n	8004618 <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8004602:	4b2d      	ldr	r3, [pc, #180]	; (80046b8 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4313      	orrs	r3, r2
 800460e:	4a2a      	ldr	r2, [pc, #168]	; (80046b8 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004610:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004614:	60d3      	str	r3, [r2, #12]
 8004616:	e007      	b.n	8004628 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8004618:	4b27      	ldr	r3, [pc, #156]	; (80046b8 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004620:	4925      	ldr	r1, [pc, #148]	; (80046b8 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4313      	orrs	r3, r2
 8004626:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004628:	4b24      	ldr	r3, [pc, #144]	; (80046bc <HAL_PWREx_ControlVoltageScaling+0xe0>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a24      	ldr	r2, [pc, #144]	; (80046c0 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800462e:	fba2 2303 	umull	r2, r3, r2, r3
 8004632:	099b      	lsrs	r3, r3, #6
 8004634:	2232      	movs	r2, #50	; 0x32
 8004636:	fb02 f303 	mul.w	r3, r2, r3
 800463a:	4a21      	ldr	r2, [pc, #132]	; (80046c0 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800463c:	fba2 2303 	umull	r2, r3, r2, r3
 8004640:	099b      	lsrs	r3, r3, #6
 8004642:	3301      	adds	r3, #1
 8004644:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004646:	e002      	b.n	800464e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	3b01      	subs	r3, #1
 800464c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800464e:	4b1a      	ldr	r3, [pc, #104]	; (80046b8 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d102      	bne.n	8004660 <HAL_PWREx_ControlVoltageScaling+0x84>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1f3      	bne.n	8004648 <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d01b      	beq.n	800469e <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004666:	4b15      	ldr	r3, [pc, #84]	; (80046bc <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a15      	ldr	r2, [pc, #84]	; (80046c0 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800466c:	fba2 2303 	umull	r2, r3, r2, r3
 8004670:	099b      	lsrs	r3, r3, #6
 8004672:	2232      	movs	r2, #50	; 0x32
 8004674:	fb02 f303 	mul.w	r3, r2, r3
 8004678:	4a11      	ldr	r2, [pc, #68]	; (80046c0 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800467a:	fba2 2303 	umull	r2, r3, r2, r3
 800467e:	099b      	lsrs	r3, r3, #6
 8004680:	3301      	adds	r3, #1
 8004682:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004684:	e002      	b.n	800468c <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	3b01      	subs	r3, #1
 800468a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800468c:	4b0a      	ldr	r3, [pc, #40]	; (80046b8 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800468e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004690:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d102      	bne.n	800469e <HAL_PWREx_ControlVoltageScaling+0xc2>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1f3      	bne.n	8004686 <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d101      	bne.n	80046a8 <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e000      	b.n	80046aa <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3714      	adds	r7, #20
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	46020800 	.word	0x46020800
 80046bc:	20000000 	.word	0x20000000
 80046c0:	10624dd3 	.word	0x10624dd3

080046c4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80046c4:	b480      	push	{r7}
 80046c6:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80046c8:	4b04      	ldr	r3, [pc, #16]	; (80046dc <HAL_PWREx_GetVoltageRange+0x18>)
 80046ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	46020800 	.word	0x46020800

080046e0 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b085      	sub	sp, #20
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80046e8:	4b22      	ldr	r3, [pc, #136]	; (8004774 <HAL_PWREx_ConfigSupply+0x94>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a22      	ldr	r2, [pc, #136]	; (8004778 <HAL_PWREx_ConfigSupply+0x98>)
 80046ee:	fba2 2303 	umull	r2, r3, r2, r3
 80046f2:	099b      	lsrs	r3, r3, #6
 80046f4:	2232      	movs	r2, #50	; 0x32
 80046f6:	fb02 f303 	mul.w	r3, r2, r3
 80046fa:	4a1f      	ldr	r2, [pc, #124]	; (8004778 <HAL_PWREx_ConfigSupply+0x98>)
 80046fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004700:	099b      	lsrs	r3, r3, #6
 8004702:	3301      	adds	r3, #1
 8004704:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d113      	bne.n	8004734 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800470c:	4b1b      	ldr	r3, [pc, #108]	; (800477c <HAL_PWREx_ConfigSupply+0x9c>)
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	4a1a      	ldr	r2, [pc, #104]	; (800477c <HAL_PWREx_ConfigSupply+0x9c>)
 8004712:	f023 0302 	bic.w	r3, r3, #2
 8004716:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004718:	e002      	b.n	8004720 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	3b01      	subs	r3, #1
 800471e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004720:	4b16      	ldr	r3, [pc, #88]	; (800477c <HAL_PWREx_ConfigSupply+0x9c>)
 8004722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004724:	f003 0302 	and.w	r3, r3, #2
 8004728:	2b02      	cmp	r3, #2
 800472a:	d116      	bne.n	800475a <HAL_PWREx_ConfigSupply+0x7a>
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1f3      	bne.n	800471a <HAL_PWREx_ConfigSupply+0x3a>
 8004732:	e012      	b.n	800475a <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004734:	4b11      	ldr	r3, [pc, #68]	; (800477c <HAL_PWREx_ConfigSupply+0x9c>)
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	4a10      	ldr	r2, [pc, #64]	; (800477c <HAL_PWREx_ConfigSupply+0x9c>)
 800473a:	f043 0302 	orr.w	r3, r3, #2
 800473e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004740:	e002      	b.n	8004748 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	3b01      	subs	r3, #1
 8004746:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004748:	4b0c      	ldr	r3, [pc, #48]	; (800477c <HAL_PWREx_ConfigSupply+0x9c>)
 800474a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800474c:	f003 0302 	and.w	r3, r3, #2
 8004750:	2b00      	cmp	r3, #0
 8004752:	d102      	bne.n	800475a <HAL_PWREx_ConfigSupply+0x7a>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1f3      	bne.n	8004742 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d101      	bne.n	8004764 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e000      	b.n	8004766 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3714      	adds	r7, #20
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	20000000 	.word	0x20000000
 8004778:	10624dd3 	.word	0x10624dd3
 800477c:	46020800 	.word	0x46020800

08004780 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004780:	b480      	push	{r7}
 8004782:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8004784:	4b05      	ldr	r3, [pc, #20]	; (800479c <HAL_PWREx_EnableVddUSB+0x1c>)
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	4a04      	ldr	r2, [pc, #16]	; (800479c <HAL_PWREx_EnableVddUSB+0x1c>)
 800478a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800478e:	6113      	str	r3, [r2, #16]
}
 8004790:	bf00      	nop
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr
 800479a:	bf00      	nop
 800479c:	46020800 	.word	0x46020800

080047a0 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80047a0:	b480      	push	{r7}
 80047a2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 80047a4:	4b05      	ldr	r3, [pc, #20]	; (80047bc <HAL_PWREx_EnableVddIO2+0x1c>)
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	4a04      	ldr	r2, [pc, #16]	; (80047bc <HAL_PWREx_EnableVddIO2+0x1c>)
 80047aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80047ae:	6113      	str	r3, [r2, #16]
}
 80047b0:	bf00      	nop
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	46020800 	.word	0x46020800

080047c0 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 80047c0:	b480      	push	{r7}
 80047c2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 80047c4:	4b05      	ldr	r3, [pc, #20]	; (80047dc <HAL_PWREx_EnableVddA+0x1c>)
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	4a04      	ldr	r2, [pc, #16]	; (80047dc <HAL_PWREx_EnableVddA+0x1c>)
 80047ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047ce:	6113      	str	r3, [r2, #16]
}
 80047d0:	bf00      	nop
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	46020800 	.word	0x46020800

080047e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b08e      	sub	sp, #56	; 0x38
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80047e8:	2300      	movs	r3, #0
 80047ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d102      	bne.n	80047fa <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	f000 bec3 	b.w	8005580 <HAL_RCC_OscConfig+0xda0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047fa:	4b9c      	ldr	r3, [pc, #624]	; (8004a6c <HAL_RCC_OscConfig+0x28c>)
 80047fc:	69db      	ldr	r3, [r3, #28]
 80047fe:	f003 030c 	and.w	r3, r3, #12
 8004802:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004804:	4b99      	ldr	r3, [pc, #612]	; (8004a6c <HAL_RCC_OscConfig+0x28c>)
 8004806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004808:	f003 0303 	and.w	r3, r3, #3
 800480c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0310 	and.w	r3, r3, #16
 8004816:	2b00      	cmp	r3, #0
 8004818:	f000 8172 	beq.w	8004b00 <HAL_RCC_OscConfig+0x320>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800481c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800481e:	2b00      	cmp	r3, #0
 8004820:	d007      	beq.n	8004832 <HAL_RCC_OscConfig+0x52>
 8004822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004824:	2b0c      	cmp	r3, #12
 8004826:	f040 80e4 	bne.w	80049f2 <HAL_RCC_OscConfig+0x212>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800482a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800482c:	2b01      	cmp	r3, #1
 800482e:	f040 80e0 	bne.w	80049f2 <HAL_RCC_OscConfig+0x212>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004832:	4b8e      	ldr	r3, [pc, #568]	; (8004a6c <HAL_RCC_OscConfig+0x28c>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0304 	and.w	r3, r3, #4
 800483a:	2b00      	cmp	r3, #0
 800483c:	d006      	beq.n	800484c <HAL_RCC_OscConfig+0x6c>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	69db      	ldr	r3, [r3, #28]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d102      	bne.n	800484c <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	f000 be9a 	b.w	8005580 <HAL_RCC_OscConfig+0xda0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004850:	4b86      	ldr	r3, [pc, #536]	; (8004a6c <HAL_RCC_OscConfig+0x28c>)
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004858:	2b00      	cmp	r3, #0
 800485a:	d004      	beq.n	8004866 <HAL_RCC_OscConfig+0x86>
 800485c:	4b83      	ldr	r3, [pc, #524]	; (8004a6c <HAL_RCC_OscConfig+0x28c>)
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004864:	e005      	b.n	8004872 <HAL_RCC_OscConfig+0x92>
 8004866:	4b81      	ldr	r3, [pc, #516]	; (8004a6c <HAL_RCC_OscConfig+0x28c>)
 8004868:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800486c:	041b      	lsls	r3, r3, #16
 800486e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004872:	4293      	cmp	r3, r2
 8004874:	d255      	bcs.n	8004922 <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004878:	2b00      	cmp	r3, #0
 800487a:	d10a      	bne.n	8004892 <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004880:	4618      	mov	r0, r3
 8004882:	f001 f9d3 	bl	8005c2c <RCC_SetFlashLatencyFromMSIRange>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d002      	beq.n	8004892 <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	f000 be77 	b.w	8005580 <HAL_RCC_OscConfig+0xda0>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004892:	4b76      	ldr	r3, [pc, #472]	; (8004a6c <HAL_RCC_OscConfig+0x28c>)
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	4a75      	ldr	r2, [pc, #468]	; (8004a6c <HAL_RCC_OscConfig+0x28c>)
 8004898:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800489c:	6093      	str	r3, [r2, #8]
 800489e:	4b73      	ldr	r3, [pc, #460]	; (8004a6c <HAL_RCC_OscConfig+0x28c>)
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048aa:	4970      	ldr	r1, [pc, #448]	; (8004a6c <HAL_RCC_OscConfig+0x28c>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80048b8:	d309      	bcc.n	80048ce <HAL_RCC_OscConfig+0xee>
 80048ba:	4b6c      	ldr	r3, [pc, #432]	; (8004a6c <HAL_RCC_OscConfig+0x28c>)
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	f023 021f 	bic.w	r2, r3, #31
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a1b      	ldr	r3, [r3, #32]
 80048c6:	4969      	ldr	r1, [pc, #420]	; (8004a6c <HAL_RCC_OscConfig+0x28c>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	60cb      	str	r3, [r1, #12]
 80048cc:	e07e      	b.n	80049cc <HAL_RCC_OscConfig+0x1ec>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	da0a      	bge.n	80048ec <HAL_RCC_OscConfig+0x10c>
 80048d6:	4b65      	ldr	r3, [pc, #404]	; (8004a6c <HAL_RCC_OscConfig+0x28c>)
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	015b      	lsls	r3, r3, #5
 80048e4:	4961      	ldr	r1, [pc, #388]	; (8004a6c <HAL_RCC_OscConfig+0x28c>)
 80048e6:	4313      	orrs	r3, r2
 80048e8:	60cb      	str	r3, [r1, #12]
 80048ea:	e06f      	b.n	80049cc <HAL_RCC_OscConfig+0x1ec>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048f4:	d30a      	bcc.n	800490c <HAL_RCC_OscConfig+0x12c>
 80048f6:	4b5d      	ldr	r3, [pc, #372]	; (8004a6c <HAL_RCC_OscConfig+0x28c>)
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a1b      	ldr	r3, [r3, #32]
 8004902:	029b      	lsls	r3, r3, #10
 8004904:	4959      	ldr	r1, [pc, #356]	; (8004a6c <HAL_RCC_OscConfig+0x28c>)
 8004906:	4313      	orrs	r3, r2
 8004908:	60cb      	str	r3, [r1, #12]
 800490a:	e05f      	b.n	80049cc <HAL_RCC_OscConfig+0x1ec>
 800490c:	4b57      	ldr	r3, [pc, #348]	; (8004a6c <HAL_RCC_OscConfig+0x28c>)
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a1b      	ldr	r3, [r3, #32]
 8004918:	03db      	lsls	r3, r3, #15
 800491a:	4954      	ldr	r1, [pc, #336]	; (8004a6c <HAL_RCC_OscConfig+0x28c>)
 800491c:	4313      	orrs	r3, r2
 800491e:	60cb      	str	r3, [r1, #12]
 8004920:	e054      	b.n	80049cc <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004922:	4b52      	ldr	r3, [pc, #328]	; (8004a6c <HAL_RCC_OscConfig+0x28c>)
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	4a51      	ldr	r2, [pc, #324]	; (8004a6c <HAL_RCC_OscConfig+0x28c>)
 8004928:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800492c:	6093      	str	r3, [r2, #8]
 800492e:	4b4f      	ldr	r3, [pc, #316]	; (8004a6c <HAL_RCC_OscConfig+0x28c>)
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493a:	494c      	ldr	r1, [pc, #304]	; (8004a6c <HAL_RCC_OscConfig+0x28c>)
 800493c:	4313      	orrs	r3, r2
 800493e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004944:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004948:	d309      	bcc.n	800495e <HAL_RCC_OscConfig+0x17e>
 800494a:	4b48      	ldr	r3, [pc, #288]	; (8004a6c <HAL_RCC_OscConfig+0x28c>)
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	f023 021f 	bic.w	r2, r3, #31
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a1b      	ldr	r3, [r3, #32]
 8004956:	4945      	ldr	r1, [pc, #276]	; (8004a6c <HAL_RCC_OscConfig+0x28c>)
 8004958:	4313      	orrs	r3, r2
 800495a:	60cb      	str	r3, [r1, #12]
 800495c:	e028      	b.n	80049b0 <HAL_RCC_OscConfig+0x1d0>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004962:	2b00      	cmp	r3, #0
 8004964:	da0a      	bge.n	800497c <HAL_RCC_OscConfig+0x19c>
 8004966:	4b41      	ldr	r3, [pc, #260]	; (8004a6c <HAL_RCC_OscConfig+0x28c>)
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	015b      	lsls	r3, r3, #5
 8004974:	493d      	ldr	r1, [pc, #244]	; (8004a6c <HAL_RCC_OscConfig+0x28c>)
 8004976:	4313      	orrs	r3, r2
 8004978:	60cb      	str	r3, [r1, #12]
 800497a:	e019      	b.n	80049b0 <HAL_RCC_OscConfig+0x1d0>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004984:	d30a      	bcc.n	800499c <HAL_RCC_OscConfig+0x1bc>
 8004986:	4b39      	ldr	r3, [pc, #228]	; (8004a6c <HAL_RCC_OscConfig+0x28c>)
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a1b      	ldr	r3, [r3, #32]
 8004992:	029b      	lsls	r3, r3, #10
 8004994:	4935      	ldr	r1, [pc, #212]	; (8004a6c <HAL_RCC_OscConfig+0x28c>)
 8004996:	4313      	orrs	r3, r2
 8004998:	60cb      	str	r3, [r1, #12]
 800499a:	e009      	b.n	80049b0 <HAL_RCC_OscConfig+0x1d0>
 800499c:	4b33      	ldr	r3, [pc, #204]	; (8004a6c <HAL_RCC_OscConfig+0x28c>)
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a1b      	ldr	r3, [r3, #32]
 80049a8:	03db      	lsls	r3, r3, #15
 80049aa:	4930      	ldr	r1, [pc, #192]	; (8004a6c <HAL_RCC_OscConfig+0x28c>)
 80049ac:	4313      	orrs	r3, r2
 80049ae:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80049b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d10a      	bne.n	80049cc <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ba:	4618      	mov	r0, r3
 80049bc:	f001 f936 	bl	8005c2c <RCC_SetFlashLatencyFromMSIRange>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d002      	beq.n	80049cc <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	f000 bdda 	b.w	8005580 <HAL_RCC_OscConfig+0xda0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80049cc:	f001 f8d8 	bl	8005b80 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80049d0:	4b27      	ldr	r3, [pc, #156]	; (8004a70 <HAL_RCC_OscConfig+0x290>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7fc fcc1 	bl	800135c <HAL_InitTick>
 80049da:	4603      	mov	r3, r0
 80049dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 80049e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f000 808a 	beq.w	8004afe <HAL_RCC_OscConfig+0x31e>
        {
          return status;
 80049ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80049ee:	f000 bdc7 	b.w	8005580 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	69db      	ldr	r3, [r3, #28]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d066      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x2e8>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80049fa:	4b1c      	ldr	r3, [pc, #112]	; (8004a6c <HAL_RCC_OscConfig+0x28c>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a1b      	ldr	r2, [pc, #108]	; (8004a6c <HAL_RCC_OscConfig+0x28c>)
 8004a00:	f043 0301 	orr.w	r3, r3, #1
 8004a04:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004a06:	f7fc fcf3 	bl	80013f0 <HAL_GetTick>
 8004a0a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004a0c:	e009      	b.n	8004a22 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a0e:	f7fc fcef 	bl	80013f0 <HAL_GetTick>
 8004a12:	4602      	mov	r2, r0
 8004a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d902      	bls.n	8004a22 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	f000 bdaf 	b.w	8005580 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004a22:	4b12      	ldr	r3, [pc, #72]	; (8004a6c <HAL_RCC_OscConfig+0x28c>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0304 	and.w	r3, r3, #4
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d0ef      	beq.n	8004a0e <HAL_RCC_OscConfig+0x22e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004a2e:	4b0f      	ldr	r3, [pc, #60]	; (8004a6c <HAL_RCC_OscConfig+0x28c>)
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	4a0e      	ldr	r2, [pc, #56]	; (8004a6c <HAL_RCC_OscConfig+0x28c>)
 8004a34:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004a38:	6093      	str	r3, [r2, #8]
 8004a3a:	4b0c      	ldr	r3, [pc, #48]	; (8004a6c <HAL_RCC_OscConfig+0x28c>)
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a46:	4909      	ldr	r1, [pc, #36]	; (8004a6c <HAL_RCC_OscConfig+0x28c>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a50:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004a54:	d30e      	bcc.n	8004a74 <HAL_RCC_OscConfig+0x294>
 8004a56:	4b05      	ldr	r3, [pc, #20]	; (8004a6c <HAL_RCC_OscConfig+0x28c>)
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	f023 021f 	bic.w	r2, r3, #31
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a1b      	ldr	r3, [r3, #32]
 8004a62:	4902      	ldr	r1, [pc, #8]	; (8004a6c <HAL_RCC_OscConfig+0x28c>)
 8004a64:	4313      	orrs	r3, r2
 8004a66:	60cb      	str	r3, [r1, #12]
 8004a68:	e04a      	b.n	8004b00 <HAL_RCC_OscConfig+0x320>
 8004a6a:	bf00      	nop
 8004a6c:	46020c00 	.word	0x46020c00
 8004a70:	20000004 	.word	0x20000004
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	da0a      	bge.n	8004a92 <HAL_RCC_OscConfig+0x2b2>
 8004a7c:	4b9b      	ldr	r3, [pc, #620]	; (8004cec <HAL_RCC_OscConfig+0x50c>)
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a1b      	ldr	r3, [r3, #32]
 8004a88:	015b      	lsls	r3, r3, #5
 8004a8a:	4998      	ldr	r1, [pc, #608]	; (8004cec <HAL_RCC_OscConfig+0x50c>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	60cb      	str	r3, [r1, #12]
 8004a90:	e036      	b.n	8004b00 <HAL_RCC_OscConfig+0x320>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a9a:	d30a      	bcc.n	8004ab2 <HAL_RCC_OscConfig+0x2d2>
 8004a9c:	4b93      	ldr	r3, [pc, #588]	; (8004cec <HAL_RCC_OscConfig+0x50c>)
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a1b      	ldr	r3, [r3, #32]
 8004aa8:	029b      	lsls	r3, r3, #10
 8004aaa:	4990      	ldr	r1, [pc, #576]	; (8004cec <HAL_RCC_OscConfig+0x50c>)
 8004aac:	4313      	orrs	r3, r2
 8004aae:	60cb      	str	r3, [r1, #12]
 8004ab0:	e026      	b.n	8004b00 <HAL_RCC_OscConfig+0x320>
 8004ab2:	4b8e      	ldr	r3, [pc, #568]	; (8004cec <HAL_RCC_OscConfig+0x50c>)
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	03db      	lsls	r3, r3, #15
 8004ac0:	498a      	ldr	r1, [pc, #552]	; (8004cec <HAL_RCC_OscConfig+0x50c>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	60cb      	str	r3, [r1, #12]
 8004ac6:	e01b      	b.n	8004b00 <HAL_RCC_OscConfig+0x320>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8004ac8:	4b88      	ldr	r3, [pc, #544]	; (8004cec <HAL_RCC_OscConfig+0x50c>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a87      	ldr	r2, [pc, #540]	; (8004cec <HAL_RCC_OscConfig+0x50c>)
 8004ace:	f023 0301 	bic.w	r3, r3, #1
 8004ad2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004ad4:	f7fc fc8c 	bl	80013f0 <HAL_GetTick>
 8004ad8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004ada:	e009      	b.n	8004af0 <HAL_RCC_OscConfig+0x310>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004adc:	f7fc fc88 	bl	80013f0 <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d902      	bls.n	8004af0 <HAL_RCC_OscConfig+0x310>
          {
            return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	f000 bd48 	b.w	8005580 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004af0:	4b7e      	ldr	r3, [pc, #504]	; (8004cec <HAL_RCC_OscConfig+0x50c>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0304 	and.w	r3, r3, #4
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1ef      	bne.n	8004adc <HAL_RCC_OscConfig+0x2fc>
 8004afc:	e000      	b.n	8004b00 <HAL_RCC_OscConfig+0x320>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004afe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0301 	and.w	r3, r3, #1
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	f000 8094 	beq.w	8004c36 <HAL_RCC_OscConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b10:	2b08      	cmp	r3, #8
 8004b12:	d005      	beq.n	8004b20 <HAL_RCC_OscConfig+0x340>
 8004b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b16:	2b0c      	cmp	r3, #12
 8004b18:	d110      	bne.n	8004b3c <HAL_RCC_OscConfig+0x35c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b1c:	2b03      	cmp	r3, #3
 8004b1e:	d10d      	bne.n	8004b3c <HAL_RCC_OscConfig+0x35c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b20:	4b72      	ldr	r3, [pc, #456]	; (8004cec <HAL_RCC_OscConfig+0x50c>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	f000 8083 	beq.w	8004c34 <HAL_RCC_OscConfig+0x454>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d17e      	bne.n	8004c34 <HAL_RCC_OscConfig+0x454>
      {
        return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	f000 bd22 	b.w	8005580 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b44:	d106      	bne.n	8004b54 <HAL_RCC_OscConfig+0x374>
 8004b46:	4b69      	ldr	r3, [pc, #420]	; (8004cec <HAL_RCC_OscConfig+0x50c>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a68      	ldr	r2, [pc, #416]	; (8004cec <HAL_RCC_OscConfig+0x50c>)
 8004b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b50:	6013      	str	r3, [r2, #0]
 8004b52:	e041      	b.n	8004bd8 <HAL_RCC_OscConfig+0x3f8>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b5c:	d112      	bne.n	8004b84 <HAL_RCC_OscConfig+0x3a4>
 8004b5e:	4b63      	ldr	r3, [pc, #396]	; (8004cec <HAL_RCC_OscConfig+0x50c>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a62      	ldr	r2, [pc, #392]	; (8004cec <HAL_RCC_OscConfig+0x50c>)
 8004b64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b68:	6013      	str	r3, [r2, #0]
 8004b6a:	4b60      	ldr	r3, [pc, #384]	; (8004cec <HAL_RCC_OscConfig+0x50c>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a5f      	ldr	r2, [pc, #380]	; (8004cec <HAL_RCC_OscConfig+0x50c>)
 8004b70:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004b74:	6013      	str	r3, [r2, #0]
 8004b76:	4b5d      	ldr	r3, [pc, #372]	; (8004cec <HAL_RCC_OscConfig+0x50c>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a5c      	ldr	r2, [pc, #368]	; (8004cec <HAL_RCC_OscConfig+0x50c>)
 8004b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b80:	6013      	str	r3, [r2, #0]
 8004b82:	e029      	b.n	8004bd8 <HAL_RCC_OscConfig+0x3f8>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8004b8c:	d112      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x3d4>
 8004b8e:	4b57      	ldr	r3, [pc, #348]	; (8004cec <HAL_RCC_OscConfig+0x50c>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a56      	ldr	r2, [pc, #344]	; (8004cec <HAL_RCC_OscConfig+0x50c>)
 8004b94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b98:	6013      	str	r3, [r2, #0]
 8004b9a:	4b54      	ldr	r3, [pc, #336]	; (8004cec <HAL_RCC_OscConfig+0x50c>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a53      	ldr	r2, [pc, #332]	; (8004cec <HAL_RCC_OscConfig+0x50c>)
 8004ba0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ba4:	6013      	str	r3, [r2, #0]
 8004ba6:	4b51      	ldr	r3, [pc, #324]	; (8004cec <HAL_RCC_OscConfig+0x50c>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a50      	ldr	r2, [pc, #320]	; (8004cec <HAL_RCC_OscConfig+0x50c>)
 8004bac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bb0:	6013      	str	r3, [r2, #0]
 8004bb2:	e011      	b.n	8004bd8 <HAL_RCC_OscConfig+0x3f8>
 8004bb4:	4b4d      	ldr	r3, [pc, #308]	; (8004cec <HAL_RCC_OscConfig+0x50c>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a4c      	ldr	r2, [pc, #304]	; (8004cec <HAL_RCC_OscConfig+0x50c>)
 8004bba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bbe:	6013      	str	r3, [r2, #0]
 8004bc0:	4b4a      	ldr	r3, [pc, #296]	; (8004cec <HAL_RCC_OscConfig+0x50c>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a49      	ldr	r2, [pc, #292]	; (8004cec <HAL_RCC_OscConfig+0x50c>)
 8004bc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bca:	6013      	str	r3, [r2, #0]
 8004bcc:	4b47      	ldr	r3, [pc, #284]	; (8004cec <HAL_RCC_OscConfig+0x50c>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a46      	ldr	r2, [pc, #280]	; (8004cec <HAL_RCC_OscConfig+0x50c>)
 8004bd2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004bd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d014      	beq.n	8004c0a <HAL_RCC_OscConfig+0x42a>
      {
        tickstart = HAL_GetTick();
 8004be0:	f7fc fc06 	bl	80013f0 <HAL_GetTick>
 8004be4:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004be6:	e009      	b.n	8004bfc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004be8:	f7fc fc02 	bl	80013f0 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	2b64      	cmp	r3, #100	; 0x64
 8004bf4:	d902      	bls.n	8004bfc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	f000 bcc2 	b.w	8005580 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bfc:	4b3b      	ldr	r3, [pc, #236]	; (8004cec <HAL_RCC_OscConfig+0x50c>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d0ef      	beq.n	8004be8 <HAL_RCC_OscConfig+0x408>
 8004c08:	e015      	b.n	8004c36 <HAL_RCC_OscConfig+0x456>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8004c0a:	f7fc fbf1 	bl	80013f0 <HAL_GetTick>
 8004c0e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c10:	e009      	b.n	8004c26 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c12:	f7fc fbed 	bl	80013f0 <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	2b64      	cmp	r3, #100	; 0x64
 8004c1e:	d902      	bls.n	8004c26 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	f000 bcad 	b.w	8005580 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c26:	4b31      	ldr	r3, [pc, #196]	; (8004cec <HAL_RCC_OscConfig+0x50c>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d1ef      	bne.n	8004c12 <HAL_RCC_OscConfig+0x432>
 8004c32:	e000      	b.n	8004c36 <HAL_RCC_OscConfig+0x456>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0302 	and.w	r3, r3, #2
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d066      	beq.n	8004d10 <HAL_RCC_OscConfig+0x530>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c44:	2b04      	cmp	r3, #4
 8004c46:	d005      	beq.n	8004c54 <HAL_RCC_OscConfig+0x474>
 8004c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4a:	2b0c      	cmp	r3, #12
 8004c4c:	d11a      	bne.n	8004c84 <HAL_RCC_OscConfig+0x4a4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d117      	bne.n	8004c84 <HAL_RCC_OscConfig+0x4a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c54:	4b25      	ldr	r3, [pc, #148]	; (8004cec <HAL_RCC_OscConfig+0x50c>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d006      	beq.n	8004c6e <HAL_RCC_OscConfig+0x48e>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d102      	bne.n	8004c6e <HAL_RCC_OscConfig+0x48e>
      {
        return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	f000 bc89 	b.w	8005580 <HAL_RCC_OscConfig+0xda0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004c6e:	4b1f      	ldr	r3, [pc, #124]	; (8004cec <HAL_RCC_OscConfig+0x50c>)
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	041b      	lsls	r3, r3, #16
 8004c7c:	491b      	ldr	r1, [pc, #108]	; (8004cec <HAL_RCC_OscConfig+0x50c>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c82:	e045      	b.n	8004d10 <HAL_RCC_OscConfig+0x530>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d024      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x4f6>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8004c8c:	4b17      	ldr	r3, [pc, #92]	; (8004cec <HAL_RCC_OscConfig+0x50c>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a16      	ldr	r2, [pc, #88]	; (8004cec <HAL_RCC_OscConfig+0x50c>)
 8004c92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c96:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004c98:	f7fc fbaa 	bl	80013f0 <HAL_GetTick>
 8004c9c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c9e:	e009      	b.n	8004cb4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ca0:	f7fc fba6 	bl	80013f0 <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d902      	bls.n	8004cb4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	f000 bc66 	b.w	8005580 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cb4:	4b0d      	ldr	r3, [pc, #52]	; (8004cec <HAL_RCC_OscConfig+0x50c>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d0ef      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x4c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004cc0:	4b0a      	ldr	r3, [pc, #40]	; (8004cec <HAL_RCC_OscConfig+0x50c>)
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	041b      	lsls	r3, r3, #16
 8004cce:	4907      	ldr	r1, [pc, #28]	; (8004cec <HAL_RCC_OscConfig+0x50c>)
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	610b      	str	r3, [r1, #16]
 8004cd4:	e01c      	b.n	8004d10 <HAL_RCC_OscConfig+0x530>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8004cd6:	4b05      	ldr	r3, [pc, #20]	; (8004cec <HAL_RCC_OscConfig+0x50c>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a04      	ldr	r2, [pc, #16]	; (8004cec <HAL_RCC_OscConfig+0x50c>)
 8004cdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ce0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004ce2:	f7fc fb85 	bl	80013f0 <HAL_GetTick>
 8004ce6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ce8:	e00c      	b.n	8004d04 <HAL_RCC_OscConfig+0x524>
 8004cea:	bf00      	nop
 8004cec:	46020c00 	.word	0x46020c00
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cf0:	f7fc fb7e 	bl	80013f0 <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d902      	bls.n	8004d04 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	f000 bc3e 	b.w	8005580 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d04:	4baf      	ldr	r3, [pc, #700]	; (8004fc4 <HAL_RCC_OscConfig+0x7e4>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d1ef      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0308 	and.w	r3, r3, #8
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	f000 80c7 	beq.w	8004eac <HAL_RCC_OscConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d24:	4ba7      	ldr	r3, [pc, #668]	; (8004fc4 <HAL_RCC_OscConfig+0x7e4>)
 8004d26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d2a:	f003 0304 	and.w	r3, r3, #4
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d111      	bne.n	8004d56 <HAL_RCC_OscConfig+0x576>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d32:	4ba4      	ldr	r3, [pc, #656]	; (8004fc4 <HAL_RCC_OscConfig+0x7e4>)
 8004d34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d38:	4aa2      	ldr	r2, [pc, #648]	; (8004fc4 <HAL_RCC_OscConfig+0x7e4>)
 8004d3a:	f043 0304 	orr.w	r3, r3, #4
 8004d3e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004d42:	4ba0      	ldr	r3, [pc, #640]	; (8004fc4 <HAL_RCC_OscConfig+0x7e4>)
 8004d44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d48:	f003 0304 	and.w	r3, r3, #4
 8004d4c:	617b      	str	r3, [r7, #20]
 8004d4e:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8004d50:	2301      	movs	r3, #1
 8004d52:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004d56:	4b9c      	ldr	r3, [pc, #624]	; (8004fc8 <HAL_RCC_OscConfig+0x7e8>)
 8004d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d5a:	f003 0301 	and.w	r3, r3, #1
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d118      	bne.n	8004d94 <HAL_RCC_OscConfig+0x5b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004d62:	4b99      	ldr	r3, [pc, #612]	; (8004fc8 <HAL_RCC_OscConfig+0x7e8>)
 8004d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d66:	4a98      	ldr	r2, [pc, #608]	; (8004fc8 <HAL_RCC_OscConfig+0x7e8>)
 8004d68:	f043 0301 	orr.w	r3, r3, #1
 8004d6c:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d6e:	f7fc fb3f 	bl	80013f0 <HAL_GetTick>
 8004d72:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004d74:	e008      	b.n	8004d88 <HAL_RCC_OscConfig+0x5a8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d76:	f7fc fb3b 	bl	80013f0 <HAL_GetTick>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d901      	bls.n	8004d88 <HAL_RCC_OscConfig+0x5a8>
        {
          return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e3fb      	b.n	8005580 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004d88:	4b8f      	ldr	r3, [pc, #572]	; (8004fc8 <HAL_RCC_OscConfig+0x7e8>)
 8004d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d8c:	f003 0301 	and.w	r3, r3, #1
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d0f0      	beq.n	8004d76 <HAL_RCC_OscConfig+0x596>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	695b      	ldr	r3, [r3, #20]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d05f      	beq.n	8004e5c <HAL_RCC_OscConfig+0x67c>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8004d9c:	4b89      	ldr	r3, [pc, #548]	; (8004fc4 <HAL_RCC_OscConfig+0x7e4>)
 8004d9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004da2:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	699a      	ldr	r2, [r3, #24]
 8004da8:	6a3b      	ldr	r3, [r7, #32]
 8004daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d037      	beq.n	8004e22 <HAL_RCC_OscConfig+0x642>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004db2:	6a3b      	ldr	r3, [r7, #32]
 8004db4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d006      	beq.n	8004dca <HAL_RCC_OscConfig+0x5ea>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8004dbc:	6a3b      	ldr	r3, [r7, #32]
 8004dbe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d101      	bne.n	8004dca <HAL_RCC_OscConfig+0x5ea>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e3da      	b.n	8005580 <HAL_RCC_OscConfig+0xda0>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8004dca:	6a3b      	ldr	r3, [r7, #32]
 8004dcc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d01b      	beq.n	8004e0c <HAL_RCC_OscConfig+0x62c>
        {
          __HAL_RCC_LSI_DISABLE();
 8004dd4:	4b7b      	ldr	r3, [pc, #492]	; (8004fc4 <HAL_RCC_OscConfig+0x7e4>)
 8004dd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004dda:	4a7a      	ldr	r2, [pc, #488]	; (8004fc4 <HAL_RCC_OscConfig+0x7e4>)
 8004ddc:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8004de0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8004de4:	f7fc fb04 	bl	80013f0 <HAL_GetTick>
 8004de8:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004dea:	e008      	b.n	8004dfe <HAL_RCC_OscConfig+0x61e>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dec:	f7fc fb00 	bl	80013f0 <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d901      	bls.n	8004dfe <HAL_RCC_OscConfig+0x61e>
            {
              return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e3c0      	b.n	8005580 <HAL_RCC_OscConfig+0xda0>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004dfe:	4b71      	ldr	r3, [pc, #452]	; (8004fc4 <HAL_RCC_OscConfig+0x7e4>)
 8004e00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d1ef      	bne.n	8004dec <HAL_RCC_OscConfig+0x60c>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8004e0c:	4b6d      	ldr	r3, [pc, #436]	; (8004fc4 <HAL_RCC_OscConfig+0x7e4>)
 8004e0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e12:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	496a      	ldr	r1, [pc, #424]	; (8004fc4 <HAL_RCC_OscConfig+0x7e4>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8004e22:	4b68      	ldr	r3, [pc, #416]	; (8004fc4 <HAL_RCC_OscConfig+0x7e4>)
 8004e24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e28:	4a66      	ldr	r2, [pc, #408]	; (8004fc4 <HAL_RCC_OscConfig+0x7e4>)
 8004e2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e2e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8004e32:	f7fc fadd 	bl	80013f0 <HAL_GetTick>
 8004e36:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004e38:	e008      	b.n	8004e4c <HAL_RCC_OscConfig+0x66c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e3a:	f7fc fad9 	bl	80013f0 <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d901      	bls.n	8004e4c <HAL_RCC_OscConfig+0x66c>
        {
          return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e399      	b.n	8005580 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004e4c:	4b5d      	ldr	r3, [pc, #372]	; (8004fc4 <HAL_RCC_OscConfig+0x7e4>)
 8004e4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d0ef      	beq.n	8004e3a <HAL_RCC_OscConfig+0x65a>
 8004e5a:	e01b      	b.n	8004e94 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8004e5c:	4b59      	ldr	r3, [pc, #356]	; (8004fc4 <HAL_RCC_OscConfig+0x7e4>)
 8004e5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e62:	4a58      	ldr	r2, [pc, #352]	; (8004fc4 <HAL_RCC_OscConfig+0x7e4>)
 8004e64:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8004e68:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8004e6c:	f7fc fac0 	bl	80013f0 <HAL_GetTick>
 8004e70:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004e72:	e008      	b.n	8004e86 <HAL_RCC_OscConfig+0x6a6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e74:	f7fc fabc 	bl	80013f0 <HAL_GetTick>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d901      	bls.n	8004e86 <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	e37c      	b.n	8005580 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004e86:	4b4f      	ldr	r3, [pc, #316]	; (8004fc4 <HAL_RCC_OscConfig+0x7e4>)
 8004e88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d1ef      	bne.n	8004e74 <HAL_RCC_OscConfig+0x694>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e94:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d107      	bne.n	8004eac <HAL_RCC_OscConfig+0x6cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e9c:	4b49      	ldr	r3, [pc, #292]	; (8004fc4 <HAL_RCC_OscConfig+0x7e4>)
 8004e9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ea2:	4a48      	ldr	r2, [pc, #288]	; (8004fc4 <HAL_RCC_OscConfig+0x7e4>)
 8004ea4:	f023 0304 	bic.w	r3, r3, #4
 8004ea8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0304 	and.w	r3, r3, #4
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f000 8112 	beq.w	80050de <HAL_RCC_OscConfig+0x8fe>
  {
    FlagStatus pwrclkchanged = RESET;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ec0:	4b40      	ldr	r3, [pc, #256]	; (8004fc4 <HAL_RCC_OscConfig+0x7e4>)
 8004ec2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ec6:	f003 0304 	and.w	r3, r3, #4
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d111      	bne.n	8004ef2 <HAL_RCC_OscConfig+0x712>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ece:	4b3d      	ldr	r3, [pc, #244]	; (8004fc4 <HAL_RCC_OscConfig+0x7e4>)
 8004ed0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ed4:	4a3b      	ldr	r2, [pc, #236]	; (8004fc4 <HAL_RCC_OscConfig+0x7e4>)
 8004ed6:	f043 0304 	orr.w	r3, r3, #4
 8004eda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004ede:	4b39      	ldr	r3, [pc, #228]	; (8004fc4 <HAL_RCC_OscConfig+0x7e4>)
 8004ee0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ee4:	f003 0304 	and.w	r3, r3, #4
 8004ee8:	613b      	str	r3, [r7, #16]
 8004eea:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8004eec:	2301      	movs	r3, #1
 8004eee:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004ef2:	4b35      	ldr	r3, [pc, #212]	; (8004fc8 <HAL_RCC_OscConfig+0x7e8>)
 8004ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d118      	bne.n	8004f30 <HAL_RCC_OscConfig+0x750>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004efe:	4b32      	ldr	r3, [pc, #200]	; (8004fc8 <HAL_RCC_OscConfig+0x7e8>)
 8004f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f02:	4a31      	ldr	r2, [pc, #196]	; (8004fc8 <HAL_RCC_OscConfig+0x7e8>)
 8004f04:	f043 0301 	orr.w	r3, r3, #1
 8004f08:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f0a:	f7fc fa71 	bl	80013f0 <HAL_GetTick>
 8004f0e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004f10:	e008      	b.n	8004f24 <HAL_RCC_OscConfig+0x744>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f12:	f7fc fa6d 	bl	80013f0 <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d901      	bls.n	8004f24 <HAL_RCC_OscConfig+0x744>
        {
          return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e32d      	b.n	8005580 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004f24:	4b28      	ldr	r3, [pc, #160]	; (8004fc8 <HAL_RCC_OscConfig+0x7e8>)
 8004f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f28:	f003 0301 	and.w	r3, r3, #1
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d0f0      	beq.n	8004f12 <HAL_RCC_OscConfig+0x732>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	f003 0301 	and.w	r3, r3, #1
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d01f      	beq.n	8004f7c <HAL_RCC_OscConfig+0x79c>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	f003 0304 	and.w	r3, r3, #4
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d010      	beq.n	8004f6a <HAL_RCC_OscConfig+0x78a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004f48:	4b1e      	ldr	r3, [pc, #120]	; (8004fc4 <HAL_RCC_OscConfig+0x7e4>)
 8004f4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f4e:	4a1d      	ldr	r2, [pc, #116]	; (8004fc4 <HAL_RCC_OscConfig+0x7e4>)
 8004f50:	f043 0304 	orr.w	r3, r3, #4
 8004f54:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004f58:	4b1a      	ldr	r3, [pc, #104]	; (8004fc4 <HAL_RCC_OscConfig+0x7e4>)
 8004f5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f5e:	4a19      	ldr	r2, [pc, #100]	; (8004fc4 <HAL_RCC_OscConfig+0x7e4>)
 8004f60:	f043 0301 	orr.w	r3, r3, #1
 8004f64:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004f68:	e018      	b.n	8004f9c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004f6a:	4b16      	ldr	r3, [pc, #88]	; (8004fc4 <HAL_RCC_OscConfig+0x7e4>)
 8004f6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f70:	4a14      	ldr	r2, [pc, #80]	; (8004fc4 <HAL_RCC_OscConfig+0x7e4>)
 8004f72:	f043 0301 	orr.w	r3, r3, #1
 8004f76:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004f7a:	e00f      	b.n	8004f9c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004f7c:	4b11      	ldr	r3, [pc, #68]	; (8004fc4 <HAL_RCC_OscConfig+0x7e4>)
 8004f7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f82:	4a10      	ldr	r2, [pc, #64]	; (8004fc4 <HAL_RCC_OscConfig+0x7e4>)
 8004f84:	f023 0301 	bic.w	r3, r3, #1
 8004f88:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004f8c:	4b0d      	ldr	r3, [pc, #52]	; (8004fc4 <HAL_RCC_OscConfig+0x7e4>)
 8004f8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f92:	4a0c      	ldr	r2, [pc, #48]	; (8004fc4 <HAL_RCC_OscConfig+0x7e4>)
 8004f94:	f023 0304 	bic.w	r3, r3, #4
 8004f98:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d058      	beq.n	8005056 <HAL_RCC_OscConfig+0x876>
    {
      tickstart = HAL_GetTick();
 8004fa4:	f7fc fa24 	bl	80013f0 <HAL_GetTick>
 8004fa8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004faa:	e00f      	b.n	8004fcc <HAL_RCC_OscConfig+0x7ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fac:	f7fc fa20 	bl	80013f0 <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d906      	bls.n	8004fcc <HAL_RCC_OscConfig+0x7ec>
        {
          return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e2de      	b.n	8005580 <HAL_RCC_OscConfig+0xda0>
 8004fc2:	bf00      	nop
 8004fc4:	46020c00 	.word	0x46020c00
 8004fc8:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fcc:	4b9c      	ldr	r3, [pc, #624]	; (8005240 <HAL_RCC_OscConfig+0xa60>)
 8004fce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004fd2:	f003 0302 	and.w	r3, r3, #2
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d0e8      	beq.n	8004fac <HAL_RCC_OscConfig+0x7cc>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d01b      	beq.n	800501e <HAL_RCC_OscConfig+0x83e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004fe6:	4b96      	ldr	r3, [pc, #600]	; (8005240 <HAL_RCC_OscConfig+0xa60>)
 8004fe8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004fec:	4a94      	ldr	r2, [pc, #592]	; (8005240 <HAL_RCC_OscConfig+0xa60>)
 8004fee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ff2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004ff6:	e00a      	b.n	800500e <HAL_RCC_OscConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ff8:	f7fc f9fa 	bl	80013f0 <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	f241 3288 	movw	r2, #5000	; 0x1388
 8005006:	4293      	cmp	r3, r2
 8005008:	d901      	bls.n	800500e <HAL_RCC_OscConfig+0x82e>
          {
            return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e2b8      	b.n	8005580 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800500e:	4b8c      	ldr	r3, [pc, #560]	; (8005240 <HAL_RCC_OscConfig+0xa60>)
 8005010:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005014:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005018:	2b00      	cmp	r3, #0
 800501a:	d0ed      	beq.n	8004ff8 <HAL_RCC_OscConfig+0x818>
 800501c:	e053      	b.n	80050c6 <HAL_RCC_OscConfig+0x8e6>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800501e:	4b88      	ldr	r3, [pc, #544]	; (8005240 <HAL_RCC_OscConfig+0xa60>)
 8005020:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005024:	4a86      	ldr	r2, [pc, #536]	; (8005240 <HAL_RCC_OscConfig+0xa60>)
 8005026:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800502a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800502e:	e00a      	b.n	8005046 <HAL_RCC_OscConfig+0x866>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005030:	f7fc f9de 	bl	80013f0 <HAL_GetTick>
 8005034:	4602      	mov	r2, r0
 8005036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	f241 3288 	movw	r2, #5000	; 0x1388
 800503e:	4293      	cmp	r3, r2
 8005040:	d901      	bls.n	8005046 <HAL_RCC_OscConfig+0x866>
          {
            return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e29c      	b.n	8005580 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005046:	4b7e      	ldr	r3, [pc, #504]	; (8005240 <HAL_RCC_OscConfig+0xa60>)
 8005048:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800504c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005050:	2b00      	cmp	r3, #0
 8005052:	d1ed      	bne.n	8005030 <HAL_RCC_OscConfig+0x850>
 8005054:	e037      	b.n	80050c6 <HAL_RCC_OscConfig+0x8e6>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8005056:	f7fc f9cb 	bl	80013f0 <HAL_GetTick>
 800505a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800505c:	e00a      	b.n	8005074 <HAL_RCC_OscConfig+0x894>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800505e:	f7fc f9c7 	bl	80013f0 <HAL_GetTick>
 8005062:	4602      	mov	r2, r0
 8005064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	f241 3288 	movw	r2, #5000	; 0x1388
 800506c:	4293      	cmp	r3, r2
 800506e:	d901      	bls.n	8005074 <HAL_RCC_OscConfig+0x894>
        {
          return HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	e285      	b.n	8005580 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005074:	4b72      	ldr	r3, [pc, #456]	; (8005240 <HAL_RCC_OscConfig+0xa60>)
 8005076:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800507a:	f003 0302 	and.w	r3, r3, #2
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1ed      	bne.n	800505e <HAL_RCC_OscConfig+0x87e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8005082:	4b6f      	ldr	r3, [pc, #444]	; (8005240 <HAL_RCC_OscConfig+0xa60>)
 8005084:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005088:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800508c:	2b00      	cmp	r3, #0
 800508e:	d01a      	beq.n	80050c6 <HAL_RCC_OscConfig+0x8e6>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005090:	4b6b      	ldr	r3, [pc, #428]	; (8005240 <HAL_RCC_OscConfig+0xa60>)
 8005092:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005096:	4a6a      	ldr	r2, [pc, #424]	; (8005240 <HAL_RCC_OscConfig+0xa60>)
 8005098:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800509c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80050a0:	e00a      	b.n	80050b8 <HAL_RCC_OscConfig+0x8d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050a2:	f7fc f9a5 	bl	80013f0 <HAL_GetTick>
 80050a6:	4602      	mov	r2, r0
 80050a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d901      	bls.n	80050b8 <HAL_RCC_OscConfig+0x8d8>
          {
            return HAL_TIMEOUT;
 80050b4:	2303      	movs	r3, #3
 80050b6:	e263      	b.n	8005580 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80050b8:	4b61      	ldr	r3, [pc, #388]	; (8005240 <HAL_RCC_OscConfig+0xa60>)
 80050ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80050be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d1ed      	bne.n	80050a2 <HAL_RCC_OscConfig+0x8c2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80050c6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d107      	bne.n	80050de <HAL_RCC_OscConfig+0x8fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050ce:	4b5c      	ldr	r3, [pc, #368]	; (8005240 <HAL_RCC_OscConfig+0xa60>)
 80050d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050d4:	4a5a      	ldr	r2, [pc, #360]	; (8005240 <HAL_RCC_OscConfig+0xa60>)
 80050d6:	f023 0304 	bic.w	r3, r3, #4
 80050da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0320 	and.w	r3, r3, #32
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d036      	beq.n	8005158 <HAL_RCC_OscConfig+0x978>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d019      	beq.n	8005126 <HAL_RCC_OscConfig+0x946>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80050f2:	4b53      	ldr	r3, [pc, #332]	; (8005240 <HAL_RCC_OscConfig+0xa60>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a52      	ldr	r2, [pc, #328]	; (8005240 <HAL_RCC_OscConfig+0xa60>)
 80050f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80050fc:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80050fe:	f7fc f977 	bl	80013f0 <HAL_GetTick>
 8005102:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005104:	e008      	b.n	8005118 <HAL_RCC_OscConfig+0x938>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005106:	f7fc f973 	bl	80013f0 <HAL_GetTick>
 800510a:	4602      	mov	r2, r0
 800510c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	2b02      	cmp	r3, #2
 8005112:	d901      	bls.n	8005118 <HAL_RCC_OscConfig+0x938>
        {
          return HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	e233      	b.n	8005580 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005118:	4b49      	ldr	r3, [pc, #292]	; (8005240 <HAL_RCC_OscConfig+0xa60>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d0f0      	beq.n	8005106 <HAL_RCC_OscConfig+0x926>
 8005124:	e018      	b.n	8005158 <HAL_RCC_OscConfig+0x978>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8005126:	4b46      	ldr	r3, [pc, #280]	; (8005240 <HAL_RCC_OscConfig+0xa60>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a45      	ldr	r2, [pc, #276]	; (8005240 <HAL_RCC_OscConfig+0xa60>)
 800512c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005130:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005132:	f7fc f95d 	bl	80013f0 <HAL_GetTick>
 8005136:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005138:	e008      	b.n	800514c <HAL_RCC_OscConfig+0x96c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800513a:	f7fc f959 	bl	80013f0 <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	2b02      	cmp	r3, #2
 8005146:	d901      	bls.n	800514c <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e219      	b.n	8005580 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800514c:	4b3c      	ldr	r3, [pc, #240]	; (8005240 <HAL_RCC_OscConfig+0xa60>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1f0      	bne.n	800513a <HAL_RCC_OscConfig+0x95a>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005160:	2b00      	cmp	r3, #0
 8005162:	d036      	beq.n	80051d2 <HAL_RCC_OscConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005168:	2b00      	cmp	r3, #0
 800516a:	d019      	beq.n	80051a0 <HAL_RCC_OscConfig+0x9c0>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800516c:	4b34      	ldr	r3, [pc, #208]	; (8005240 <HAL_RCC_OscConfig+0xa60>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a33      	ldr	r2, [pc, #204]	; (8005240 <HAL_RCC_OscConfig+0xa60>)
 8005172:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005176:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005178:	f7fc f93a 	bl	80013f0 <HAL_GetTick>
 800517c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800517e:	e008      	b.n	8005192 <HAL_RCC_OscConfig+0x9b2>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8005180:	f7fc f936 	bl	80013f0 <HAL_GetTick>
 8005184:	4602      	mov	r2, r0
 8005186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	2b02      	cmp	r3, #2
 800518c:	d901      	bls.n	8005192 <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e1f6      	b.n	8005580 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8005192:	4b2b      	ldr	r3, [pc, #172]	; (8005240 <HAL_RCC_OscConfig+0xa60>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d0f0      	beq.n	8005180 <HAL_RCC_OscConfig+0x9a0>
 800519e:	e018      	b.n	80051d2 <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80051a0:	4b27      	ldr	r3, [pc, #156]	; (8005240 <HAL_RCC_OscConfig+0xa60>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a26      	ldr	r2, [pc, #152]	; (8005240 <HAL_RCC_OscConfig+0xa60>)
 80051a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051aa:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80051ac:	f7fc f920 	bl	80013f0 <HAL_GetTick>
 80051b0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80051b2:	e008      	b.n	80051c6 <HAL_RCC_OscConfig+0x9e6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80051b4:	f7fc f91c 	bl	80013f0 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d901      	bls.n	80051c6 <HAL_RCC_OscConfig+0x9e6>
        {
          return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e1dc      	b.n	8005580 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80051c6:	4b1e      	ldr	r3, [pc, #120]	; (8005240 <HAL_RCC_OscConfig+0xa60>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d1f0      	bne.n	80051b4 <HAL_RCC_OscConfig+0x9d4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d07f      	beq.n	80052de <HAL_RCC_OscConfig+0xafe>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d062      	beq.n	80052ac <HAL_RCC_OscConfig+0xacc>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80051e6:	4b16      	ldr	r3, [pc, #88]	; (8005240 <HAL_RCC_OscConfig+0xa60>)
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	4a15      	ldr	r2, [pc, #84]	; (8005240 <HAL_RCC_OscConfig+0xa60>)
 80051ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80051f0:	6093      	str	r3, [r2, #8]
 80051f2:	4b13      	ldr	r3, [pc, #76]	; (8005240 <HAL_RCC_OscConfig+0xa60>)
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051fe:	4910      	ldr	r1, [pc, #64]	; (8005240 <HAL_RCC_OscConfig+0xa60>)
 8005200:	4313      	orrs	r3, r2
 8005202:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005208:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800520c:	d309      	bcc.n	8005222 <HAL_RCC_OscConfig+0xa42>
 800520e:	4b0c      	ldr	r3, [pc, #48]	; (8005240 <HAL_RCC_OscConfig+0xa60>)
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	f023 021f 	bic.w	r2, r3, #31
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a1b      	ldr	r3, [r3, #32]
 800521a:	4909      	ldr	r1, [pc, #36]	; (8005240 <HAL_RCC_OscConfig+0xa60>)
 800521c:	4313      	orrs	r3, r2
 800521e:	60cb      	str	r3, [r1, #12]
 8005220:	e02a      	b.n	8005278 <HAL_RCC_OscConfig+0xa98>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005226:	2b00      	cmp	r3, #0
 8005228:	da0c      	bge.n	8005244 <HAL_RCC_OscConfig+0xa64>
 800522a:	4b05      	ldr	r3, [pc, #20]	; (8005240 <HAL_RCC_OscConfig+0xa60>)
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a1b      	ldr	r3, [r3, #32]
 8005236:	015b      	lsls	r3, r3, #5
 8005238:	4901      	ldr	r1, [pc, #4]	; (8005240 <HAL_RCC_OscConfig+0xa60>)
 800523a:	4313      	orrs	r3, r2
 800523c:	60cb      	str	r3, [r1, #12]
 800523e:	e01b      	b.n	8005278 <HAL_RCC_OscConfig+0xa98>
 8005240:	46020c00 	.word	0x46020c00
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005248:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800524c:	d30a      	bcc.n	8005264 <HAL_RCC_OscConfig+0xa84>
 800524e:	4ba5      	ldr	r3, [pc, #660]	; (80054e4 <HAL_RCC_OscConfig+0xd04>)
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a1b      	ldr	r3, [r3, #32]
 800525a:	029b      	lsls	r3, r3, #10
 800525c:	49a1      	ldr	r1, [pc, #644]	; (80054e4 <HAL_RCC_OscConfig+0xd04>)
 800525e:	4313      	orrs	r3, r2
 8005260:	60cb      	str	r3, [r1, #12]
 8005262:	e009      	b.n	8005278 <HAL_RCC_OscConfig+0xa98>
 8005264:	4b9f      	ldr	r3, [pc, #636]	; (80054e4 <HAL_RCC_OscConfig+0xd04>)
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a1b      	ldr	r3, [r3, #32]
 8005270:	03db      	lsls	r3, r3, #15
 8005272:	499c      	ldr	r1, [pc, #624]	; (80054e4 <HAL_RCC_OscConfig+0xd04>)
 8005274:	4313      	orrs	r3, r2
 8005276:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8005278:	4b9a      	ldr	r3, [pc, #616]	; (80054e4 <HAL_RCC_OscConfig+0xd04>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a99      	ldr	r2, [pc, #612]	; (80054e4 <HAL_RCC_OscConfig+0xd04>)
 800527e:	f043 0310 	orr.w	r3, r3, #16
 8005282:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005284:	f7fc f8b4 	bl	80013f0 <HAL_GetTick>
 8005288:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800528a:	e008      	b.n	800529e <HAL_RCC_OscConfig+0xabe>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800528c:	f7fc f8b0 	bl	80013f0 <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	2b02      	cmp	r3, #2
 8005298:	d901      	bls.n	800529e <HAL_RCC_OscConfig+0xabe>
        {
          return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e170      	b.n	8005580 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800529e:	4b91      	ldr	r3, [pc, #580]	; (80054e4 <HAL_RCC_OscConfig+0xd04>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 0320 	and.w	r3, r3, #32
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d0f0      	beq.n	800528c <HAL_RCC_OscConfig+0xaac>
 80052aa:	e018      	b.n	80052de <HAL_RCC_OscConfig+0xafe>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80052ac:	4b8d      	ldr	r3, [pc, #564]	; (80054e4 <HAL_RCC_OscConfig+0xd04>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a8c      	ldr	r2, [pc, #560]	; (80054e4 <HAL_RCC_OscConfig+0xd04>)
 80052b2:	f023 0310 	bic.w	r3, r3, #16
 80052b6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80052b8:	f7fc f89a 	bl	80013f0 <HAL_GetTick>
 80052bc:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80052be:	e008      	b.n	80052d2 <HAL_RCC_OscConfig+0xaf2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80052c0:	f7fc f896 	bl	80013f0 <HAL_GetTick>
 80052c4:	4602      	mov	r2, r0
 80052c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	d901      	bls.n	80052d2 <HAL_RCC_OscConfig+0xaf2>
        {
          return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e156      	b.n	8005580 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80052d2:	4b84      	ldr	r3, [pc, #528]	; (80054e4 <HAL_RCC_OscConfig+0xd04>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0320 	and.w	r3, r3, #32
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d1f0      	bne.n	80052c0 <HAL_RCC_OscConfig+0xae0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	f000 814b 	beq.w	800557e <HAL_RCC_OscConfig+0xd9e>
  {
    FlagStatus  pwrclkchanged = RESET;
 80052e8:	2300      	movs	r3, #0
 80052ea:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052ee:	4b7d      	ldr	r3, [pc, #500]	; (80054e4 <HAL_RCC_OscConfig+0xd04>)
 80052f0:	69db      	ldr	r3, [r3, #28]
 80052f2:	f003 030c 	and.w	r3, r3, #12
 80052f6:	2b0c      	cmp	r3, #12
 80052f8:	f000 80fa 	beq.w	80054f0 <HAL_RCC_OscConfig+0xd10>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005300:	2b02      	cmp	r3, #2
 8005302:	f040 80cc 	bne.w	800549e <HAL_RCC_OscConfig+0xcbe>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005306:	4b77      	ldr	r3, [pc, #476]	; (80054e4 <HAL_RCC_OscConfig+0xd04>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a76      	ldr	r2, [pc, #472]	; (80054e4 <HAL_RCC_OscConfig+0xd04>)
 800530c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005310:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005312:	f7fc f86d 	bl	80013f0 <HAL_GetTick>
 8005316:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005318:	e008      	b.n	800532c <HAL_RCC_OscConfig+0xb4c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800531a:	f7fc f869 	bl	80013f0 <HAL_GetTick>
 800531e:	4602      	mov	r2, r0
 8005320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	2b02      	cmp	r3, #2
 8005326:	d901      	bls.n	800532c <HAL_RCC_OscConfig+0xb4c>
          {
            return HAL_TIMEOUT;
 8005328:	2303      	movs	r3, #3
 800532a:	e129      	b.n	8005580 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800532c:	4b6d      	ldr	r3, [pc, #436]	; (80054e4 <HAL_RCC_OscConfig+0xd04>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d1f0      	bne.n	800531a <HAL_RCC_OscConfig+0xb3a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005338:	4b6a      	ldr	r3, [pc, #424]	; (80054e4 <HAL_RCC_OscConfig+0xd04>)
 800533a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800533e:	f003 0304 	and.w	r3, r3, #4
 8005342:	2b00      	cmp	r3, #0
 8005344:	d111      	bne.n	800536a <HAL_RCC_OscConfig+0xb8a>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8005346:	4b67      	ldr	r3, [pc, #412]	; (80054e4 <HAL_RCC_OscConfig+0xd04>)
 8005348:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800534c:	4a65      	ldr	r2, [pc, #404]	; (80054e4 <HAL_RCC_OscConfig+0xd04>)
 800534e:	f043 0304 	orr.w	r3, r3, #4
 8005352:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005356:	4b63      	ldr	r3, [pc, #396]	; (80054e4 <HAL_RCC_OscConfig+0xd04>)
 8005358:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800535c:	f003 0304 	and.w	r3, r3, #4
 8005360:	60fb      	str	r3, [r7, #12]
 8005362:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8005364:	2301      	movs	r3, #1
 8005366:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800536a:	4b5f      	ldr	r3, [pc, #380]	; (80054e8 <HAL_RCC_OscConfig+0xd08>)
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005372:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005376:	d102      	bne.n	800537e <HAL_RCC_OscConfig+0xb9e>
        {
          pwrboosten = SET;
 8005378:	2301      	movs	r3, #1
 800537a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800537e:	4b5a      	ldr	r3, [pc, #360]	; (80054e8 <HAL_RCC_OscConfig+0xd08>)
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	4a59      	ldr	r2, [pc, #356]	; (80054e8 <HAL_RCC_OscConfig+0xd08>)
 8005384:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005388:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800538a:	4b56      	ldr	r3, [pc, #344]	; (80054e4 <HAL_RCC_OscConfig+0xd04>)
 800538c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800538e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005392:	f023 0303 	bic.w	r3, r3, #3
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800539e:	3a01      	subs	r2, #1
 80053a0:	0212      	lsls	r2, r2, #8
 80053a2:	4311      	orrs	r1, r2
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80053a8:	430a      	orrs	r2, r1
 80053aa:	494e      	ldr	r1, [pc, #312]	; (80054e4 <HAL_RCC_OscConfig+0xd04>)
 80053ac:	4313      	orrs	r3, r2
 80053ae:	628b      	str	r3, [r1, #40]	; 0x28
 80053b0:	4b4c      	ldr	r3, [pc, #304]	; (80054e4 <HAL_RCC_OscConfig+0xd04>)
 80053b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053b4:	4b4d      	ldr	r3, [pc, #308]	; (80054ec <HAL_RCC_OscConfig+0xd0c>)
 80053b6:	4013      	ands	r3, r2
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80053bc:	3a01      	subs	r2, #1
 80053be:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80053c6:	3a01      	subs	r2, #1
 80053c8:	0252      	lsls	r2, r2, #9
 80053ca:	b292      	uxth	r2, r2
 80053cc:	4311      	orrs	r1, r2
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80053d2:	3a01      	subs	r2, #1
 80053d4:	0412      	lsls	r2, r2, #16
 80053d6:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80053da:	4311      	orrs	r1, r2
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80053e0:	3a01      	subs	r2, #1
 80053e2:	0612      	lsls	r2, r2, #24
 80053e4:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80053e8:	430a      	orrs	r2, r1
 80053ea:	493e      	ldr	r1, [pc, #248]	; (80054e4 <HAL_RCC_OscConfig+0xd04>)
 80053ec:	4313      	orrs	r3, r2
 80053ee:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 80053f0:	4b3c      	ldr	r3, [pc, #240]	; (80054e4 <HAL_RCC_OscConfig+0xd04>)
 80053f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f4:	4a3b      	ldr	r2, [pc, #236]	; (80054e4 <HAL_RCC_OscConfig+0xd04>)
 80053f6:	f023 0310 	bic.w	r3, r3, #16
 80053fa:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80053fc:	4b39      	ldr	r3, [pc, #228]	; (80054e4 <HAL_RCC_OscConfig+0xd04>)
 80053fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005400:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005404:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800540c:	00d2      	lsls	r2, r2, #3
 800540e:	4935      	ldr	r1, [pc, #212]	; (80054e4 <HAL_RCC_OscConfig+0xd04>)
 8005410:	4313      	orrs	r3, r2
 8005412:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005414:	4b33      	ldr	r3, [pc, #204]	; (80054e4 <HAL_RCC_OscConfig+0xd04>)
 8005416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005418:	4a32      	ldr	r2, [pc, #200]	; (80054e4 <HAL_RCC_OscConfig+0xd04>)
 800541a:	f043 0310 	orr.w	r3, r3, #16
 800541e:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8005420:	4b30      	ldr	r3, [pc, #192]	; (80054e4 <HAL_RCC_OscConfig+0xd04>)
 8005422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005424:	f023 020c 	bic.w	r2, r3, #12
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800542c:	492d      	ldr	r1, [pc, #180]	; (80054e4 <HAL_RCC_OscConfig+0xd04>)
 800542e:	4313      	orrs	r3, r2
 8005430:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8005432:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005436:	2b01      	cmp	r3, #1
 8005438:	d105      	bne.n	8005446 <HAL_RCC_OscConfig+0xc66>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800543a:	4b2b      	ldr	r3, [pc, #172]	; (80054e8 <HAL_RCC_OscConfig+0xd08>)
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	4a2a      	ldr	r2, [pc, #168]	; (80054e8 <HAL_RCC_OscConfig+0xd08>)
 8005440:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005444:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8005446:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800544a:	2b01      	cmp	r3, #1
 800544c:	d107      	bne.n	800545e <HAL_RCC_OscConfig+0xc7e>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800544e:	4b25      	ldr	r3, [pc, #148]	; (80054e4 <HAL_RCC_OscConfig+0xd04>)
 8005450:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005454:	4a23      	ldr	r2, [pc, #140]	; (80054e4 <HAL_RCC_OscConfig+0xd04>)
 8005456:	f023 0304 	bic.w	r3, r3, #4
 800545a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800545e:	4b21      	ldr	r3, [pc, #132]	; (80054e4 <HAL_RCC_OscConfig+0xd04>)
 8005460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005462:	4a20      	ldr	r2, [pc, #128]	; (80054e4 <HAL_RCC_OscConfig+0xd04>)
 8005464:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005468:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800546a:	4b1e      	ldr	r3, [pc, #120]	; (80054e4 <HAL_RCC_OscConfig+0xd04>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a1d      	ldr	r2, [pc, #116]	; (80054e4 <HAL_RCC_OscConfig+0xd04>)
 8005470:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005474:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005476:	f7fb ffbb 	bl	80013f0 <HAL_GetTick>
 800547a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800547c:	e008      	b.n	8005490 <HAL_RCC_OscConfig+0xcb0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800547e:	f7fb ffb7 	bl	80013f0 <HAL_GetTick>
 8005482:	4602      	mov	r2, r0
 8005484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005486:	1ad3      	subs	r3, r2, r3
 8005488:	2b02      	cmp	r3, #2
 800548a:	d901      	bls.n	8005490 <HAL_RCC_OscConfig+0xcb0>
          {
            return HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	e077      	b.n	8005580 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005490:	4b14      	ldr	r3, [pc, #80]	; (80054e4 <HAL_RCC_OscConfig+0xd04>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005498:	2b00      	cmp	r3, #0
 800549a:	d0f0      	beq.n	800547e <HAL_RCC_OscConfig+0xc9e>
 800549c:	e06f      	b.n	800557e <HAL_RCC_OscConfig+0xd9e>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800549e:	4b11      	ldr	r3, [pc, #68]	; (80054e4 <HAL_RCC_OscConfig+0xd04>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a10      	ldr	r2, [pc, #64]	; (80054e4 <HAL_RCC_OscConfig+0xd04>)
 80054a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054a8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80054aa:	f7fb ffa1 	bl	80013f0 <HAL_GetTick>
 80054ae:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80054b0:	e008      	b.n	80054c4 <HAL_RCC_OscConfig+0xce4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054b2:	f7fb ff9d 	bl	80013f0 <HAL_GetTick>
 80054b6:	4602      	mov	r2, r0
 80054b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ba:	1ad3      	subs	r3, r2, r3
 80054bc:	2b02      	cmp	r3, #2
 80054be:	d901      	bls.n	80054c4 <HAL_RCC_OscConfig+0xce4>
          {
            return HAL_TIMEOUT;
 80054c0:	2303      	movs	r3, #3
 80054c2:	e05d      	b.n	8005580 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80054c4:	4b07      	ldr	r3, [pc, #28]	; (80054e4 <HAL_RCC_OscConfig+0xd04>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d1f0      	bne.n	80054b2 <HAL_RCC_OscConfig+0xcd2>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80054d0:	4b04      	ldr	r3, [pc, #16]	; (80054e4 <HAL_RCC_OscConfig+0xd04>)
 80054d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d4:	4a03      	ldr	r2, [pc, #12]	; (80054e4 <HAL_RCC_OscConfig+0xd04>)
 80054d6:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80054da:	f023 0303 	bic.w	r3, r3, #3
 80054de:	6293      	str	r3, [r2, #40]	; 0x28
 80054e0:	e04d      	b.n	800557e <HAL_RCC_OscConfig+0xd9e>
 80054e2:	bf00      	nop
 80054e4:	46020c00 	.word	0x46020c00
 80054e8:	46020800 	.word	0x46020800
 80054ec:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80054f0:	4b25      	ldr	r3, [pc, #148]	; (8005588 <HAL_RCC_OscConfig+0xda8>)
 80054f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f4:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80054f6:	4b24      	ldr	r3, [pc, #144]	; (8005588 <HAL_RCC_OscConfig+0xda8>)
 80054f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054fa:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005500:	2b01      	cmp	r3, #1
 8005502:	d03a      	beq.n	800557a <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	f003 0203 	and.w	r2, r3, #3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800550e:	429a      	cmp	r2, r3
 8005510:	d133      	bne.n	800557a <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	0a1b      	lsrs	r3, r3, #8
 8005516:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005520:	429a      	cmp	r2, r3
 8005522:	d12a      	bne.n	800557a <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	0b1b      	lsrs	r3, r3, #12
 8005528:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8005530:	429a      	cmp	r2, r3
 8005532:	d122      	bne.n	800557a <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800553e:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8005540:	429a      	cmp	r2, r3
 8005542:	d11a      	bne.n	800557a <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	0a5b      	lsrs	r3, r3, #9
 8005548:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005550:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005552:	429a      	cmp	r2, r3
 8005554:	d111      	bne.n	800557a <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	0c1b      	lsrs	r3, r3, #16
 800555a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005562:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005564:	429a      	cmp	r2, r3
 8005566:	d108      	bne.n	800557a <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	0e1b      	lsrs	r3, r3, #24
 800556c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005574:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005576:	429a      	cmp	r2, r3
 8005578:	d001      	beq.n	800557e <HAL_RCC_OscConfig+0xd9e>
      {
        return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e000      	b.n	8005580 <HAL_RCC_OscConfig+0xda0>
      }
    }
  }
  return HAL_OK;
 800557e:	2300      	movs	r3, #0
}
 8005580:	4618      	mov	r0, r3
 8005582:	3738      	adds	r7, #56	; 0x38
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}
 8005588:	46020c00 	.word	0x46020c00

0800558c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b086      	sub	sp, #24
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d101      	bne.n	80055a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e1d9      	b.n	8005954 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80055a0:	4b9b      	ldr	r3, [pc, #620]	; (8005810 <HAL_RCC_ClockConfig+0x284>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 030f 	and.w	r3, r3, #15
 80055a8:	683a      	ldr	r2, [r7, #0]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d910      	bls.n	80055d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055ae:	4b98      	ldr	r3, [pc, #608]	; (8005810 <HAL_RCC_ClockConfig+0x284>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f023 020f 	bic.w	r2, r3, #15
 80055b6:	4996      	ldr	r1, [pc, #600]	; (8005810 <HAL_RCC_ClockConfig+0x284>)
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055be:	4b94      	ldr	r3, [pc, #592]	; (8005810 <HAL_RCC_ClockConfig+0x284>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 030f 	and.w	r3, r3, #15
 80055c6:	683a      	ldr	r2, [r7, #0]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d001      	beq.n	80055d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e1c1      	b.n	8005954 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0310 	and.w	r3, r3, #16
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d010      	beq.n	80055fe <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	695a      	ldr	r2, [r3, #20]
 80055e0:	4b8c      	ldr	r3, [pc, #560]	; (8005814 <HAL_RCC_ClockConfig+0x288>)
 80055e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d908      	bls.n	80055fe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80055ec:	4b89      	ldr	r3, [pc, #548]	; (8005814 <HAL_RCC_ClockConfig+0x288>)
 80055ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	695b      	ldr	r3, [r3, #20]
 80055f8:	4986      	ldr	r1, [pc, #536]	; (8005814 <HAL_RCC_ClockConfig+0x288>)
 80055fa:	4313      	orrs	r3, r2
 80055fc:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0308 	and.w	r3, r3, #8
 8005606:	2b00      	cmp	r3, #0
 8005608:	d012      	beq.n	8005630 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	691a      	ldr	r2, [r3, #16]
 800560e:	4b81      	ldr	r3, [pc, #516]	; (8005814 <HAL_RCC_ClockConfig+0x288>)
 8005610:	6a1b      	ldr	r3, [r3, #32]
 8005612:	091b      	lsrs	r3, r3, #4
 8005614:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005618:	429a      	cmp	r2, r3
 800561a:	d909      	bls.n	8005630 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800561c:	4b7d      	ldr	r3, [pc, #500]	; (8005814 <HAL_RCC_ClockConfig+0x288>)
 800561e:	6a1b      	ldr	r3, [r3, #32]
 8005620:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	011b      	lsls	r3, r3, #4
 800562a:	497a      	ldr	r1, [pc, #488]	; (8005814 <HAL_RCC_ClockConfig+0x288>)
 800562c:	4313      	orrs	r3, r2
 800562e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0304 	and.w	r3, r3, #4
 8005638:	2b00      	cmp	r3, #0
 800563a:	d010      	beq.n	800565e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	68da      	ldr	r2, [r3, #12]
 8005640:	4b74      	ldr	r3, [pc, #464]	; (8005814 <HAL_RCC_ClockConfig+0x288>)
 8005642:	6a1b      	ldr	r3, [r3, #32]
 8005644:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005648:	429a      	cmp	r2, r3
 800564a:	d908      	bls.n	800565e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800564c:	4b71      	ldr	r3, [pc, #452]	; (8005814 <HAL_RCC_ClockConfig+0x288>)
 800564e:	6a1b      	ldr	r3, [r3, #32]
 8005650:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	496e      	ldr	r1, [pc, #440]	; (8005814 <HAL_RCC_ClockConfig+0x288>)
 800565a:	4313      	orrs	r3, r2
 800565c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 0302 	and.w	r3, r3, #2
 8005666:	2b00      	cmp	r3, #0
 8005668:	d010      	beq.n	800568c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	689a      	ldr	r2, [r3, #8]
 800566e:	4b69      	ldr	r3, [pc, #420]	; (8005814 <HAL_RCC_ClockConfig+0x288>)
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	f003 030f 	and.w	r3, r3, #15
 8005676:	429a      	cmp	r2, r3
 8005678:	d908      	bls.n	800568c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800567a:	4b66      	ldr	r3, [pc, #408]	; (8005814 <HAL_RCC_ClockConfig+0x288>)
 800567c:	6a1b      	ldr	r3, [r3, #32]
 800567e:	f023 020f 	bic.w	r2, r3, #15
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	4963      	ldr	r1, [pc, #396]	; (8005814 <HAL_RCC_ClockConfig+0x288>)
 8005688:	4313      	orrs	r3, r2
 800568a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0301 	and.w	r3, r3, #1
 8005694:	2b00      	cmp	r3, #0
 8005696:	f000 80d2 	beq.w	800583e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800569a:	2300      	movs	r3, #0
 800569c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	2b03      	cmp	r3, #3
 80056a4:	d143      	bne.n	800572e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056a6:	4b5b      	ldr	r3, [pc, #364]	; (8005814 <HAL_RCC_ClockConfig+0x288>)
 80056a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056ac:	f003 0304 	and.w	r3, r3, #4
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d110      	bne.n	80056d6 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80056b4:	4b57      	ldr	r3, [pc, #348]	; (8005814 <HAL_RCC_ClockConfig+0x288>)
 80056b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056ba:	4a56      	ldr	r2, [pc, #344]	; (8005814 <HAL_RCC_ClockConfig+0x288>)
 80056bc:	f043 0304 	orr.w	r3, r3, #4
 80056c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80056c4:	4b53      	ldr	r3, [pc, #332]	; (8005814 <HAL_RCC_ClockConfig+0x288>)
 80056c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056ca:	f003 0304 	and.w	r3, r3, #4
 80056ce:	60bb      	str	r3, [r7, #8]
 80056d0:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80056d2:	2301      	movs	r3, #1
 80056d4:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80056d6:	f7fb fe8b 	bl	80013f0 <HAL_GetTick>
 80056da:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80056dc:	4b4e      	ldr	r3, [pc, #312]	; (8005818 <HAL_RCC_ClockConfig+0x28c>)
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d00f      	beq.n	8005708 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80056e8:	e008      	b.n	80056fc <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80056ea:	f7fb fe81 	bl	80013f0 <HAL_GetTick>
 80056ee:	4602      	mov	r2, r0
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d901      	bls.n	80056fc <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80056f8:	2303      	movs	r3, #3
 80056fa:	e12b      	b.n	8005954 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80056fc:	4b46      	ldr	r3, [pc, #280]	; (8005818 <HAL_RCC_ClockConfig+0x28c>)
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d0f0      	beq.n	80056ea <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005708:	7dfb      	ldrb	r3, [r7, #23]
 800570a:	2b01      	cmp	r3, #1
 800570c:	d107      	bne.n	800571e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800570e:	4b41      	ldr	r3, [pc, #260]	; (8005814 <HAL_RCC_ClockConfig+0x288>)
 8005710:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005714:	4a3f      	ldr	r2, [pc, #252]	; (8005814 <HAL_RCC_ClockConfig+0x288>)
 8005716:	f023 0304 	bic.w	r3, r3, #4
 800571a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800571e:	4b3d      	ldr	r3, [pc, #244]	; (8005814 <HAL_RCC_ClockConfig+0x288>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d121      	bne.n	800576e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e112      	b.n	8005954 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	2b02      	cmp	r3, #2
 8005734:	d107      	bne.n	8005746 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005736:	4b37      	ldr	r3, [pc, #220]	; (8005814 <HAL_RCC_ClockConfig+0x288>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d115      	bne.n	800576e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e106      	b.n	8005954 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d107      	bne.n	800575e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800574e:	4b31      	ldr	r3, [pc, #196]	; (8005814 <HAL_RCC_ClockConfig+0x288>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 0304 	and.w	r3, r3, #4
 8005756:	2b00      	cmp	r3, #0
 8005758:	d109      	bne.n	800576e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e0fa      	b.n	8005954 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800575e:	4b2d      	ldr	r3, [pc, #180]	; (8005814 <HAL_RCC_ClockConfig+0x288>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005766:	2b00      	cmp	r3, #0
 8005768:	d101      	bne.n	800576e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e0f2      	b.n	8005954 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800576e:	4b29      	ldr	r3, [pc, #164]	; (8005814 <HAL_RCC_ClockConfig+0x288>)
 8005770:	69db      	ldr	r3, [r3, #28]
 8005772:	f023 0203 	bic.w	r2, r3, #3
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	4926      	ldr	r1, [pc, #152]	; (8005814 <HAL_RCC_ClockConfig+0x288>)
 800577c:	4313      	orrs	r3, r2
 800577e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8005780:	f7fb fe36 	bl	80013f0 <HAL_GetTick>
 8005784:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	2b03      	cmp	r3, #3
 800578c:	d112      	bne.n	80057b4 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800578e:	e00a      	b.n	80057a6 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005790:	f7fb fe2e 	bl	80013f0 <HAL_GetTick>
 8005794:	4602      	mov	r2, r0
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	f241 3288 	movw	r2, #5000	; 0x1388
 800579e:	4293      	cmp	r3, r2
 80057a0:	d901      	bls.n	80057a6 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80057a2:	2303      	movs	r3, #3
 80057a4:	e0d6      	b.n	8005954 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057a6:	4b1b      	ldr	r3, [pc, #108]	; (8005814 <HAL_RCC_ClockConfig+0x288>)
 80057a8:	69db      	ldr	r3, [r3, #28]
 80057aa:	f003 030c 	and.w	r3, r3, #12
 80057ae:	2b0c      	cmp	r3, #12
 80057b0:	d1ee      	bne.n	8005790 <HAL_RCC_ClockConfig+0x204>
 80057b2:	e044      	b.n	800583e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d112      	bne.n	80057e2 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80057bc:	e00a      	b.n	80057d4 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057be:	f7fb fe17 	bl	80013f0 <HAL_GetTick>
 80057c2:	4602      	mov	r2, r0
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d901      	bls.n	80057d4 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80057d0:	2303      	movs	r3, #3
 80057d2:	e0bf      	b.n	8005954 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80057d4:	4b0f      	ldr	r3, [pc, #60]	; (8005814 <HAL_RCC_ClockConfig+0x288>)
 80057d6:	69db      	ldr	r3, [r3, #28]
 80057d8:	f003 030c 	and.w	r3, r3, #12
 80057dc:	2b08      	cmp	r3, #8
 80057de:	d1ee      	bne.n	80057be <HAL_RCC_ClockConfig+0x232>
 80057e0:	e02d      	b.n	800583e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d123      	bne.n	8005832 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80057ea:	e00a      	b.n	8005802 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057ec:	f7fb fe00 	bl	80013f0 <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d901      	bls.n	8005802 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e0a8      	b.n	8005954 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005802:	4b04      	ldr	r3, [pc, #16]	; (8005814 <HAL_RCC_ClockConfig+0x288>)
 8005804:	69db      	ldr	r3, [r3, #28]
 8005806:	f003 030c 	and.w	r3, r3, #12
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1ee      	bne.n	80057ec <HAL_RCC_ClockConfig+0x260>
 800580e:	e016      	b.n	800583e <HAL_RCC_ClockConfig+0x2b2>
 8005810:	40022000 	.word	0x40022000
 8005814:	46020c00 	.word	0x46020c00
 8005818:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800581c:	f7fb fde8 	bl	80013f0 <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	f241 3288 	movw	r2, #5000	; 0x1388
 800582a:	4293      	cmp	r3, r2
 800582c:	d901      	bls.n	8005832 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e090      	b.n	8005954 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005832:	4b4a      	ldr	r3, [pc, #296]	; (800595c <HAL_RCC_ClockConfig+0x3d0>)
 8005834:	69db      	ldr	r3, [r3, #28]
 8005836:	f003 030c 	and.w	r3, r3, #12
 800583a:	2b04      	cmp	r3, #4
 800583c:	d1ee      	bne.n	800581c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 0302 	and.w	r3, r3, #2
 8005846:	2b00      	cmp	r3, #0
 8005848:	d010      	beq.n	800586c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	689a      	ldr	r2, [r3, #8]
 800584e:	4b43      	ldr	r3, [pc, #268]	; (800595c <HAL_RCC_ClockConfig+0x3d0>)
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	f003 030f 	and.w	r3, r3, #15
 8005856:	429a      	cmp	r2, r3
 8005858:	d208      	bcs.n	800586c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800585a:	4b40      	ldr	r3, [pc, #256]	; (800595c <HAL_RCC_ClockConfig+0x3d0>)
 800585c:	6a1b      	ldr	r3, [r3, #32]
 800585e:	f023 020f 	bic.w	r2, r3, #15
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	493d      	ldr	r1, [pc, #244]	; (800595c <HAL_RCC_ClockConfig+0x3d0>)
 8005868:	4313      	orrs	r3, r2
 800586a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800586c:	4b3c      	ldr	r3, [pc, #240]	; (8005960 <HAL_RCC_ClockConfig+0x3d4>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 030f 	and.w	r3, r3, #15
 8005874:	683a      	ldr	r2, [r7, #0]
 8005876:	429a      	cmp	r2, r3
 8005878:	d210      	bcs.n	800589c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800587a:	4b39      	ldr	r3, [pc, #228]	; (8005960 <HAL_RCC_ClockConfig+0x3d4>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f023 020f 	bic.w	r2, r3, #15
 8005882:	4937      	ldr	r1, [pc, #220]	; (8005960 <HAL_RCC_ClockConfig+0x3d4>)
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	4313      	orrs	r3, r2
 8005888:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800588a:	4b35      	ldr	r3, [pc, #212]	; (8005960 <HAL_RCC_ClockConfig+0x3d4>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 030f 	and.w	r3, r3, #15
 8005892:	683a      	ldr	r2, [r7, #0]
 8005894:	429a      	cmp	r2, r3
 8005896:	d001      	beq.n	800589c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e05b      	b.n	8005954 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0304 	and.w	r3, r3, #4
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d010      	beq.n	80058ca <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	68da      	ldr	r2, [r3, #12]
 80058ac:	4b2b      	ldr	r3, [pc, #172]	; (800595c <HAL_RCC_ClockConfig+0x3d0>)
 80058ae:	6a1b      	ldr	r3, [r3, #32]
 80058b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d208      	bcs.n	80058ca <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80058b8:	4b28      	ldr	r3, [pc, #160]	; (800595c <HAL_RCC_ClockConfig+0x3d0>)
 80058ba:	6a1b      	ldr	r3, [r3, #32]
 80058bc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	4925      	ldr	r1, [pc, #148]	; (800595c <HAL_RCC_ClockConfig+0x3d0>)
 80058c6:	4313      	orrs	r3, r2
 80058c8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 0308 	and.w	r3, r3, #8
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d012      	beq.n	80058fc <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	691a      	ldr	r2, [r3, #16]
 80058da:	4b20      	ldr	r3, [pc, #128]	; (800595c <HAL_RCC_ClockConfig+0x3d0>)
 80058dc:	6a1b      	ldr	r3, [r3, #32]
 80058de:	091b      	lsrs	r3, r3, #4
 80058e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d209      	bcs.n	80058fc <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80058e8:	4b1c      	ldr	r3, [pc, #112]	; (800595c <HAL_RCC_ClockConfig+0x3d0>)
 80058ea:	6a1b      	ldr	r3, [r3, #32]
 80058ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	011b      	lsls	r3, r3, #4
 80058f6:	4919      	ldr	r1, [pc, #100]	; (800595c <HAL_RCC_ClockConfig+0x3d0>)
 80058f8:	4313      	orrs	r3, r2
 80058fa:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 0310 	and.w	r3, r3, #16
 8005904:	2b00      	cmp	r3, #0
 8005906:	d010      	beq.n	800592a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	695a      	ldr	r2, [r3, #20]
 800590c:	4b13      	ldr	r3, [pc, #76]	; (800595c <HAL_RCC_ClockConfig+0x3d0>)
 800590e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005910:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005914:	429a      	cmp	r2, r3
 8005916:	d208      	bcs.n	800592a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8005918:	4b10      	ldr	r3, [pc, #64]	; (800595c <HAL_RCC_ClockConfig+0x3d0>)
 800591a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	695b      	ldr	r3, [r3, #20]
 8005924:	490d      	ldr	r1, [pc, #52]	; (800595c <HAL_RCC_ClockConfig+0x3d0>)
 8005926:	4313      	orrs	r3, r2
 8005928:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800592a:	f000 f821 	bl	8005970 <HAL_RCC_GetSysClockFreq>
 800592e:	4602      	mov	r2, r0
 8005930:	4b0a      	ldr	r3, [pc, #40]	; (800595c <HAL_RCC_ClockConfig+0x3d0>)
 8005932:	6a1b      	ldr	r3, [r3, #32]
 8005934:	f003 030f 	and.w	r3, r3, #15
 8005938:	490a      	ldr	r1, [pc, #40]	; (8005964 <HAL_RCC_ClockConfig+0x3d8>)
 800593a:	5ccb      	ldrb	r3, [r1, r3]
 800593c:	fa22 f303 	lsr.w	r3, r2, r3
 8005940:	4a09      	ldr	r2, [pc, #36]	; (8005968 <HAL_RCC_ClockConfig+0x3dc>)
 8005942:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005944:	4b09      	ldr	r3, [pc, #36]	; (800596c <HAL_RCC_ClockConfig+0x3e0>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4618      	mov	r0, r3
 800594a:	f7fb fd07 	bl	800135c <HAL_InitTick>
 800594e:	4603      	mov	r3, r0
 8005950:	73fb      	strb	r3, [r7, #15]

  return status;
 8005952:	7bfb      	ldrb	r3, [r7, #15]
}
 8005954:	4618      	mov	r0, r3
 8005956:	3718      	adds	r7, #24
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}
 800595c:	46020c00 	.word	0x46020c00
 8005960:	40022000 	.word	0x40022000
 8005964:	0800a9e0 	.word	0x0800a9e0
 8005968:	20000000 	.word	0x20000000
 800596c:	20000004 	.word	0x20000004

08005970 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005970:	b480      	push	{r7}
 8005972:	b08b      	sub	sp, #44	; 0x2c
 8005974:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8005976:	2300      	movs	r3, #0
 8005978:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800597a:	2300      	movs	r3, #0
 800597c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800597e:	4b7b      	ldr	r3, [pc, #492]	; (8005b6c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005980:	69db      	ldr	r3, [r3, #28]
 8005982:	f003 030c 	and.w	r3, r3, #12
 8005986:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005988:	4b78      	ldr	r3, [pc, #480]	; (8005b6c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800598a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800598c:	f003 0303 	and.w	r3, r3, #3
 8005990:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d005      	beq.n	80059a4 <HAL_RCC_GetSysClockFreq+0x34>
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	2b0c      	cmp	r3, #12
 800599c:	d121      	bne.n	80059e2 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d11e      	bne.n	80059e2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80059a4:	4b71      	ldr	r3, [pc, #452]	; (8005b6c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d107      	bne.n	80059c0 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80059b0:	4b6e      	ldr	r3, [pc, #440]	; (8005b6c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80059b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80059b6:	0b1b      	lsrs	r3, r3, #12
 80059b8:	f003 030f 	and.w	r3, r3, #15
 80059bc:	627b      	str	r3, [r7, #36]	; 0x24
 80059be:	e005      	b.n	80059cc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80059c0:	4b6a      	ldr	r3, [pc, #424]	; (8005b6c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	0f1b      	lsrs	r3, r3, #28
 80059c6:	f003 030f 	and.w	r3, r3, #15
 80059ca:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80059cc:	4a68      	ldr	r2, [pc, #416]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x200>)
 80059ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059d4:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d110      	bne.n	80059fe <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80059dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059de:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80059e0:	e00d      	b.n	80059fe <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80059e2:	4b62      	ldr	r3, [pc, #392]	; (8005b6c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80059e4:	69db      	ldr	r3, [r3, #28]
 80059e6:	f003 030c 	and.w	r3, r3, #12
 80059ea:	2b04      	cmp	r3, #4
 80059ec:	d102      	bne.n	80059f4 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80059ee:	4b61      	ldr	r3, [pc, #388]	; (8005b74 <HAL_RCC_GetSysClockFreq+0x204>)
 80059f0:	623b      	str	r3, [r7, #32]
 80059f2:	e004      	b.n	80059fe <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	2b08      	cmp	r3, #8
 80059f8:	d101      	bne.n	80059fe <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80059fa:	4b5e      	ldr	r3, [pc, #376]	; (8005b74 <HAL_RCC_GetSysClockFreq+0x204>)
 80059fc:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059fe:	69bb      	ldr	r3, [r7, #24]
 8005a00:	2b0c      	cmp	r3, #12
 8005a02:	f040 80ac 	bne.w	8005b5e <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005a06:	4b59      	ldr	r3, [pc, #356]	; (8005b6c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a0a:	f003 0303 	and.w	r3, r3, #3
 8005a0e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005a10:	4b56      	ldr	r3, [pc, #344]	; (8005b6c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a14:	0a1b      	lsrs	r3, r3, #8
 8005a16:	f003 030f 	and.w	r3, r3, #15
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005a1e:	4b53      	ldr	r3, [pc, #332]	; (8005b6c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a22:	091b      	lsrs	r3, r3, #4
 8005a24:	f003 0301 	and.w	r3, r3, #1
 8005a28:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005a2a:	4b50      	ldr	r3, [pc, #320]	; (8005b6c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a2e:	08db      	lsrs	r3, r3, #3
 8005a30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a34:	68ba      	ldr	r2, [r7, #8]
 8005a36:	fb02 f303 	mul.w	r3, r2, r3
 8005a3a:	ee07 3a90 	vmov	s15, r3
 8005a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a42:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	f000 8086 	beq.w	8005b5a <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d003      	beq.n	8005a5c <HAL_RCC_GetSysClockFreq+0xec>
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	2b03      	cmp	r3, #3
 8005a58:	d022      	beq.n	8005aa0 <HAL_RCC_GetSysClockFreq+0x130>
 8005a5a:	e043      	b.n	8005ae4 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	ee07 3a90 	vmov	s15, r3
 8005a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a66:	eddf 6a44 	vldr	s13, [pc, #272]	; 8005b78 <HAL_RCC_GetSysClockFreq+0x208>
 8005a6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a6e:	4b3f      	ldr	r3, [pc, #252]	; (8005b6c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a76:	ee07 3a90 	vmov	s15, r3
 8005a7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005a7e:	ed97 6a01 	vldr	s12, [r7, #4]
 8005a82:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005b7c <HAL_RCC_GetSysClockFreq+0x20c>
 8005a86:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005a8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005a8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a92:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005a96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a9a:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8005a9e:	e046      	b.n	8005b2e <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	ee07 3a90 	vmov	s15, r3
 8005aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aaa:	eddf 6a33 	vldr	s13, [pc, #204]	; 8005b78 <HAL_RCC_GetSysClockFreq+0x208>
 8005aae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ab2:	4b2e      	ldr	r3, [pc, #184]	; (8005b6c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005aba:	ee07 3a90 	vmov	s15, r3
 8005abe:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005ac2:	ed97 6a01 	vldr	s12, [r7, #4]
 8005ac6:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8005b7c <HAL_RCC_GetSysClockFreq+0x20c>
 8005aca:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005ace:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005ad2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ade:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8005ae2:	e024      	b.n	8005b2e <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae6:	ee07 3a90 	vmov	s15, r3
 8005aea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	ee07 3a90 	vmov	s15, r3
 8005af4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005af8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005afc:	4b1b      	ldr	r3, [pc, #108]	; (8005b6c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b04:	ee07 3a90 	vmov	s15, r3
 8005b08:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005b0c:	ed97 6a01 	vldr	s12, [r7, #4]
 8005b10:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8005b7c <HAL_RCC_GetSysClockFreq+0x20c>
 8005b14:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005b18:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005b1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b20:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005b24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b28:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8005b2c:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8005b2e:	4b0f      	ldr	r3, [pc, #60]	; (8005b6c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b32:	0e1b      	lsrs	r3, r3, #24
 8005b34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b38:	3301      	adds	r3, #1
 8005b3a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	ee07 3a90 	vmov	s15, r3
 8005b42:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005b46:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b52:	ee17 3a90 	vmov	r3, s15
 8005b56:	623b      	str	r3, [r7, #32]
 8005b58:	e001      	b.n	8005b5e <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 8005b5e:	6a3b      	ldr	r3, [r7, #32]
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	372c      	adds	r7, #44	; 0x2c
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr
 8005b6c:	46020c00 	.word	0x46020c00
 8005b70:	0800a9f8 	.word	0x0800a9f8
 8005b74:	00f42400 	.word	0x00f42400
 8005b78:	4b742400 	.word	0x4b742400
 8005b7c:	46000000 	.word	0x46000000

08005b80 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005b84:	f7ff fef4 	bl	8005970 <HAL_RCC_GetSysClockFreq>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	4b07      	ldr	r3, [pc, #28]	; (8005ba8 <HAL_RCC_GetHCLKFreq+0x28>)
 8005b8c:	6a1b      	ldr	r3, [r3, #32]
 8005b8e:	f003 030f 	and.w	r3, r3, #15
 8005b92:	4906      	ldr	r1, [pc, #24]	; (8005bac <HAL_RCC_GetHCLKFreq+0x2c>)
 8005b94:	5ccb      	ldrb	r3, [r1, r3]
 8005b96:	fa22 f303 	lsr.w	r3, r2, r3
 8005b9a:	4a05      	ldr	r2, [pc, #20]	; (8005bb0 <HAL_RCC_GetHCLKFreq+0x30>)
 8005b9c:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8005b9e:	4b04      	ldr	r3, [pc, #16]	; (8005bb0 <HAL_RCC_GetHCLKFreq+0x30>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	46020c00 	.word	0x46020c00
 8005bac:	0800a9e0 	.word	0x0800a9e0
 8005bb0:	20000000 	.word	0x20000000

08005bb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8005bb8:	f7ff ffe2 	bl	8005b80 <HAL_RCC_GetHCLKFreq>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	4b05      	ldr	r3, [pc, #20]	; (8005bd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005bc0:	6a1b      	ldr	r3, [r3, #32]
 8005bc2:	091b      	lsrs	r3, r3, #4
 8005bc4:	f003 0307 	and.w	r3, r3, #7
 8005bc8:	4903      	ldr	r1, [pc, #12]	; (8005bd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005bca:	5ccb      	ldrb	r3, [r1, r3]
 8005bcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	46020c00 	.word	0x46020c00
 8005bd8:	0800a9f0 	.word	0x0800a9f0

08005bdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8005be0:	f7ff ffce 	bl	8005b80 <HAL_RCC_GetHCLKFreq>
 8005be4:	4602      	mov	r2, r0
 8005be6:	4b05      	ldr	r3, [pc, #20]	; (8005bfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	0a1b      	lsrs	r3, r3, #8
 8005bec:	f003 0307 	and.w	r3, r3, #7
 8005bf0:	4903      	ldr	r1, [pc, #12]	; (8005c00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005bf2:	5ccb      	ldrb	r3, [r1, r3]
 8005bf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	46020c00 	.word	0x46020c00
 8005c00:	0800a9f0 	.word	0x0800a9f0

08005c04 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8005c08:	f7ff ffba 	bl	8005b80 <HAL_RCC_GetHCLKFreq>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	4b05      	ldr	r3, [pc, #20]	; (8005c24 <HAL_RCC_GetPCLK3Freq+0x20>)
 8005c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c12:	091b      	lsrs	r3, r3, #4
 8005c14:	f003 0307 	and.w	r3, r3, #7
 8005c18:	4903      	ldr	r1, [pc, #12]	; (8005c28 <HAL_RCC_GetPCLK3Freq+0x24>)
 8005c1a:	5ccb      	ldrb	r3, [r1, r3]
 8005c1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	46020c00 	.word	0x46020c00
 8005c28:	0800a9f0 	.word	0x0800a9f0

08005c2c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b086      	sub	sp, #24
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005c34:	4b3e      	ldr	r3, [pc, #248]	; (8005d30 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005c36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c3a:	f003 0304 	and.w	r3, r3, #4
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d003      	beq.n	8005c4a <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005c42:	f7fe fd3f 	bl	80046c4 <HAL_PWREx_GetVoltageRange>
 8005c46:	6178      	str	r0, [r7, #20]
 8005c48:	e019      	b.n	8005c7e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c4a:	4b39      	ldr	r3, [pc, #228]	; (8005d30 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005c4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c50:	4a37      	ldr	r2, [pc, #220]	; (8005d30 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005c52:	f043 0304 	orr.w	r3, r3, #4
 8005c56:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005c5a:	4b35      	ldr	r3, [pc, #212]	; (8005d30 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005c5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c60:	f003 0304 	and.w	r3, r3, #4
 8005c64:	60fb      	str	r3, [r7, #12]
 8005c66:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005c68:	f7fe fd2c 	bl	80046c4 <HAL_PWREx_GetVoltageRange>
 8005c6c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005c6e:	4b30      	ldr	r3, [pc, #192]	; (8005d30 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005c70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c74:	4a2e      	ldr	r2, [pc, #184]	; (8005d30 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005c76:	f023 0304 	bic.w	r3, r3, #4
 8005c7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005c84:	d003      	beq.n	8005c8e <RCC_SetFlashLatencyFromMSIRange+0x62>
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c8c:	d109      	bne.n	8005ca2 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c94:	d202      	bcs.n	8005c9c <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8005c96:	2301      	movs	r3, #1
 8005c98:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005c9a:	e033      	b.n	8005d04 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005ca0:	e030      	b.n	8005d04 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ca8:	d208      	bcs.n	8005cbc <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cb0:	d102      	bne.n	8005cb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	613b      	str	r3, [r7, #16]
 8005cb6:	e025      	b.n	8005d04 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e035      	b.n	8005d28 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cc2:	d90f      	bls.n	8005ce4 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d109      	bne.n	8005cde <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005cd0:	d902      	bls.n	8005cd8 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	613b      	str	r3, [r7, #16]
 8005cd6:	e015      	b.n	8005d04 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8005cd8:	2301      	movs	r3, #1
 8005cda:	613b      	str	r3, [r7, #16]
 8005cdc:	e012      	b.n	8005d04 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8005cde:	2300      	movs	r3, #0
 8005ce0:	613b      	str	r3, [r7, #16]
 8005ce2:	e00f      	b.n	8005d04 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cea:	d109      	bne.n	8005d00 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cf2:	d102      	bne.n	8005cfa <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	613b      	str	r3, [r7, #16]
 8005cf8:	e004      	b.n	8005d04 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8005cfa:	2302      	movs	r3, #2
 8005cfc:	613b      	str	r3, [r7, #16]
 8005cfe:	e001      	b.n	8005d04 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8005d00:	2301      	movs	r3, #1
 8005d02:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005d04:	4b0b      	ldr	r3, [pc, #44]	; (8005d34 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f023 020f 	bic.w	r2, r3, #15
 8005d0c:	4909      	ldr	r1, [pc, #36]	; (8005d34 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8005d14:	4b07      	ldr	r3, [pc, #28]	; (8005d34 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 030f 	and.w	r3, r3, #15
 8005d1c:	693a      	ldr	r2, [r7, #16]
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d001      	beq.n	8005d26 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	e000      	b.n	8005d28 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3718      	adds	r7, #24
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	46020c00 	.word	0x46020c00
 8005d34:	40022000 	.word	0x40022000

08005d38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8005d38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d3c:	b0ba      	sub	sp, #232	; 0xe8
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005d44:	2300      	movs	r3, #0
 8005d46:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d58:	f002 0401 	and.w	r4, r2, #1
 8005d5c:	2500      	movs	r5, #0
 8005d5e:	ea54 0305 	orrs.w	r3, r4, r5
 8005d62:	d00b      	beq.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8005d64:	4bcb      	ldr	r3, [pc, #812]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005d6a:	f023 0103 	bic.w	r1, r3, #3
 8005d6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d74:	4ac7      	ldr	r2, [pc, #796]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d76:	430b      	orrs	r3, r1
 8005d78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d84:	f002 0802 	and.w	r8, r2, #2
 8005d88:	f04f 0900 	mov.w	r9, #0
 8005d8c:	ea58 0309 	orrs.w	r3, r8, r9
 8005d90:	d00b      	beq.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8005d92:	4bc0      	ldr	r3, [pc, #768]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005d98:	f023 010c 	bic.w	r1, r3, #12
 8005d9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005da2:	4abc      	ldr	r2, [pc, #752]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005da4:	430b      	orrs	r3, r1
 8005da6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005daa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db2:	f002 0a04 	and.w	sl, r2, #4
 8005db6:	f04f 0b00 	mov.w	fp, #0
 8005dba:	ea5a 030b 	orrs.w	r3, sl, fp
 8005dbe:	d00b      	beq.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8005dc0:	4bb4      	ldr	r3, [pc, #720]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005dc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005dc6:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005dca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dd0:	4ab0      	ldr	r2, [pc, #704]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005dd2:	430b      	orrs	r3, r1
 8005dd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005dd8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de0:	f002 0308 	and.w	r3, r2, #8
 8005de4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005de8:	2300      	movs	r3, #0
 8005dea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005dee:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005df2:	460b      	mov	r3, r1
 8005df4:	4313      	orrs	r3, r2
 8005df6:	d00b      	beq.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8005df8:	4ba6      	ldr	r3, [pc, #664]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005dfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005dfe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005e02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e08:	4aa2      	ldr	r2, [pc, #648]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e0a:	430b      	orrs	r3, r1
 8005e0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005e10:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e18:	f002 0310 	and.w	r3, r2, #16
 8005e1c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e20:	2300      	movs	r3, #0
 8005e22:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005e26:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005e2a:	460b      	mov	r3, r1
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	d00b      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8005e30:	4b98      	ldr	r3, [pc, #608]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005e36:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005e3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e40:	4a94      	ldr	r2, [pc, #592]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e42:	430b      	orrs	r3, r1
 8005e44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005e48:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e50:	f002 0320 	and.w	r3, r2, #32
 8005e54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e58:	2300      	movs	r3, #0
 8005e5a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005e5e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005e62:	460b      	mov	r3, r1
 8005e64:	4313      	orrs	r3, r2
 8005e66:	d00b      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8005e68:	4b8a      	ldr	r3, [pc, #552]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005e6e:	f023 0107 	bic.w	r1, r3, #7
 8005e72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e78:	4a86      	ldr	r2, [pc, #536]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e7a:	430b      	orrs	r3, r1
 8005e7c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e88:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005e8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e90:	2300      	movs	r3, #0
 8005e92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e96:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005e9a:	460b      	mov	r3, r1
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	d00b      	beq.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8005ea0:	4b7c      	ldr	r3, [pc, #496]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ea2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ea6:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8005eaa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005eae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005eb0:	4a78      	ldr	r2, [pc, #480]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005eb2:	430b      	orrs	r3, r1
 8005eb4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005eb8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005ec4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005ec8:	2300      	movs	r3, #0
 8005eca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005ece:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005ed2:	460b      	mov	r3, r1
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	d00b      	beq.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8005ed8:	4b6e      	ldr	r3, [pc, #440]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ede:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ee2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ee6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ee8:	4a6a      	ldr	r2, [pc, #424]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005eea:	430b      	orrs	r3, r1
 8005eec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005ef0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef8:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8005efc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005f00:	2300      	movs	r3, #0
 8005f02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005f06:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005f0a:	460b      	mov	r3, r1
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	d00b      	beq.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8005f10:	4b60      	ldr	r3, [pc, #384]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005f16:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005f1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f20:	4a5c      	ldr	r2, [pc, #368]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f22:	430b      	orrs	r3, r1
 8005f24:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005f28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f30:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005f34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005f38:	2300      	movs	r3, #0
 8005f3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005f3e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005f42:	460b      	mov	r3, r1
 8005f44:	4313      	orrs	r3, r2
 8005f46:	d00b      	beq.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8005f48:	4b52      	ldr	r3, [pc, #328]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f4e:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8005f52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f58:	4a4e      	ldr	r2, [pc, #312]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f5a:	430b      	orrs	r3, r1
 8005f5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005f60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f68:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8005f6c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f70:	2300      	movs	r3, #0
 8005f72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005f76:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005f7a:	460b      	mov	r3, r1
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	d00b      	beq.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8005f80:	4b44      	ldr	r3, [pc, #272]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005f86:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8005f8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f90:	4a40      	ldr	r2, [pc, #256]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f92:	430b      	orrs	r3, r1
 8005f94:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005f98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa0:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8005fa4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005fa8:	2300      	movs	r3, #0
 8005faa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005fae:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	d00b      	beq.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8005fb8:	4b36      	ldr	r3, [pc, #216]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005fbe:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8005fc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005fc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fc8:	4a32      	ldr	r2, [pc, #200]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005fca:	430b      	orrs	r3, r1
 8005fcc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8005fd0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd8:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005fdc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005fe6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8005fea:	460b      	mov	r3, r1
 8005fec:	4313      	orrs	r3, r2
 8005fee:	d00c      	beq.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8005ff0:	4b28      	ldr	r3, [pc, #160]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ff2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005ff6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005ffa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ffe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006002:	4a24      	ldr	r2, [pc, #144]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006004:	430b      	orrs	r3, r1
 8006006:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800600a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800600e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006012:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006016:	67bb      	str	r3, [r7, #120]	; 0x78
 8006018:	2300      	movs	r3, #0
 800601a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800601c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006020:	460b      	mov	r3, r1
 8006022:	4313      	orrs	r3, r2
 8006024:	d04f      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8006026:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800602a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800602e:	2b80      	cmp	r3, #128	; 0x80
 8006030:	d02d      	beq.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x356>
 8006032:	2b80      	cmp	r3, #128	; 0x80
 8006034:	d827      	bhi.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006036:	2b60      	cmp	r3, #96	; 0x60
 8006038:	d02e      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800603a:	2b60      	cmp	r3, #96	; 0x60
 800603c:	d823      	bhi.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800603e:	2b40      	cmp	r3, #64	; 0x40
 8006040:	d006      	beq.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8006042:	2b40      	cmp	r3, #64	; 0x40
 8006044:	d81f      	bhi.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006046:	2b00      	cmp	r3, #0
 8006048:	d009      	beq.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x326>
 800604a:	2b20      	cmp	r3, #32
 800604c:	d011      	beq.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800604e:	e01a      	b.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006050:	4b10      	ldr	r3, [pc, #64]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006054:	4a0f      	ldr	r2, [pc, #60]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006056:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800605a:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800605c:	e01d      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800605e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006062:	3308      	adds	r3, #8
 8006064:	4618      	mov	r0, r3
 8006066:	f002 f981 	bl	800836c <RCCEx_PLL2_Config>
 800606a:	4603      	mov	r3, r0
 800606c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006070:	e013      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006072:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006076:	332c      	adds	r3, #44	; 0x2c
 8006078:	4618      	mov	r0, r3
 800607a:	f002 fa0f 	bl	800849c <RCCEx_PLL3_Config>
 800607e:	4603      	mov	r3, r0
 8006080:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006084:	e009      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800608c:	e005      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 800608e:	bf00      	nop
 8006090:	e003      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8006092:	bf00      	nop
 8006094:	46020c00 	.word	0x46020c00
        break;
 8006098:	bf00      	nop
    }

    if (ret == HAL_OK)
 800609a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d10d      	bne.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80060a2:	4bb6      	ldr	r3, [pc, #728]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80060a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80060a8:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 80060ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80060b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060b4:	4ab1      	ldr	r2, [pc, #708]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80060b6:	430b      	orrs	r3, r1
 80060b8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80060bc:	e003      	b.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060be:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80060c2:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80060c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80060ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ce:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80060d2:	673b      	str	r3, [r7, #112]	; 0x70
 80060d4:	2300      	movs	r3, #0
 80060d6:	677b      	str	r3, [r7, #116]	; 0x74
 80060d8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80060dc:	460b      	mov	r3, r1
 80060de:	4313      	orrs	r3, r2
 80060e0:	d053      	beq.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80060e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80060e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060ee:	d033      	beq.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80060f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060f4:	d82c      	bhi.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80060f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060fa:	d02f      	beq.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x424>
 80060fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006100:	d826      	bhi.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8006102:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006106:	d008      	beq.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8006108:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800610c:	d820      	bhi.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800610e:	2b00      	cmp	r3, #0
 8006110:	d00a      	beq.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 8006112:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006116:	d011      	beq.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8006118:	e01a      	b.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800611a:	4b98      	ldr	r3, [pc, #608]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800611c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800611e:	4a97      	ldr	r2, [pc, #604]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006124:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006126:	e01a      	b.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006128:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800612c:	3308      	adds	r3, #8
 800612e:	4618      	mov	r0, r3
 8006130:	f002 f91c 	bl	800836c <RCCEx_PLL2_Config>
 8006134:	4603      	mov	r3, r0
 8006136:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800613a:	e010      	b.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800613c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006140:	332c      	adds	r3, #44	; 0x2c
 8006142:	4618      	mov	r0, r3
 8006144:	f002 f9aa 	bl	800849c <RCCEx_PLL3_Config>
 8006148:	4603      	mov	r3, r0
 800614a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800614e:	e006      	b.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006156:	e002      	b.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8006158:	bf00      	nop
 800615a:	e000      	b.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 800615c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800615e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006162:	2b00      	cmp	r3, #0
 8006164:	d10d      	bne.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8006166:	4b85      	ldr	r3, [pc, #532]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006168:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800616c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8006170:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006174:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006178:	4a80      	ldr	r2, [pc, #512]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800617a:	430b      	orrs	r3, r1
 800617c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006180:	e003      	b.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006182:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006186:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800618a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800618e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006192:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006196:	66bb      	str	r3, [r7, #104]	; 0x68
 8006198:	2300      	movs	r3, #0
 800619a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800619c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80061a0:	460b      	mov	r3, r1
 80061a2:	4313      	orrs	r3, r2
 80061a4:	d046      	beq.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80061a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80061aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80061ae:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80061b2:	d028      	beq.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80061b4:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80061b8:	d821      	bhi.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80061ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061be:	d022      	beq.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80061c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061c4:	d81b      	bhi.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80061c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80061ca:	d01c      	beq.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80061cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80061d0:	d815      	bhi.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80061d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061d6:	d008      	beq.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80061d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061dc:	d80f      	bhi.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d011      	beq.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80061e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061e6:	d00e      	beq.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80061e8:	e009      	b.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80061ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80061ee:	3308      	adds	r3, #8
 80061f0:	4618      	mov	r0, r3
 80061f2:	f002 f8bb 	bl	800836c <RCCEx_PLL2_Config>
 80061f6:	4603      	mov	r3, r0
 80061f8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80061fc:	e004      	b.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006204:	e000      	b.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 8006206:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006208:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800620c:	2b00      	cmp	r3, #0
 800620e:	d10d      	bne.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8006210:	4b5a      	ldr	r3, [pc, #360]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006212:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006216:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800621a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800621e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006222:	4a56      	ldr	r2, [pc, #344]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006224:	430b      	orrs	r3, r1
 8006226:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800622a:	e003      	b.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800622c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006230:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8006234:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800623c:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006240:	663b      	str	r3, [r7, #96]	; 0x60
 8006242:	2300      	movs	r3, #0
 8006244:	667b      	str	r3, [r7, #100]	; 0x64
 8006246:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800624a:	460b      	mov	r3, r1
 800624c:	4313      	orrs	r3, r2
 800624e:	d03f      	beq.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8006250:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006258:	2b04      	cmp	r3, #4
 800625a:	d81e      	bhi.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x562>
 800625c:	a201      	add	r2, pc, #4	; (adr r2, 8006264 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 800625e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006262:	bf00      	nop
 8006264:	080062a3 	.word	0x080062a3
 8006268:	08006279 	.word	0x08006279
 800626c:	08006287 	.word	0x08006287
 8006270:	080062a3 	.word	0x080062a3
 8006274:	080062a3 	.word	0x080062a3
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006278:	4b40      	ldr	r3, [pc, #256]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800627a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800627c:	4a3f      	ldr	r2, [pc, #252]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800627e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006282:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8006284:	e00e      	b.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006286:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800628a:	332c      	adds	r3, #44	; 0x2c
 800628c:	4618      	mov	r0, r3
 800628e:	f002 f905 	bl	800849c <RCCEx_PLL3_Config>
 8006292:	4603      	mov	r3, r0
 8006294:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006298:	e004      	b.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80062a0:	e000      	b.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 80062a2:	bf00      	nop
    }
    if (ret == HAL_OK)
 80062a4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d10d      	bne.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80062ac:	4b33      	ldr	r3, [pc, #204]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80062ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80062b2:	f023 0107 	bic.w	r1, r3, #7
 80062b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062be:	4a2f      	ldr	r2, [pc, #188]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80062c0:	430b      	orrs	r3, r1
 80062c2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80062c6:	e003      	b.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062c8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80062cc:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80062d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d8:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80062dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80062de:	2300      	movs	r3, #0
 80062e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062e2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80062e6:	460b      	mov	r3, r1
 80062e8:	4313      	orrs	r3, r2
 80062ea:	d04d      	beq.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 80062ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80062f8:	d028      	beq.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x614>
 80062fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80062fe:	d821      	bhi.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8006300:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006304:	d024      	beq.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8006306:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800630a:	d81b      	bhi.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800630c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006310:	d00e      	beq.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8006312:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006316:	d815      	bhi.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8006318:	2b00      	cmp	r3, #0
 800631a:	d01b      	beq.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 800631c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006320:	d110      	bne.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006322:	4b16      	ldr	r3, [pc, #88]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006326:	4a15      	ldr	r2, [pc, #84]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800632c:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800632e:	e012      	b.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006330:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006334:	332c      	adds	r3, #44	; 0x2c
 8006336:	4618      	mov	r0, r3
 8006338:	f002 f8b0 	bl	800849c <RCCEx_PLL3_Config>
 800633c:	4603      	mov	r3, r0
 800633e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006342:	e008      	b.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800634a:	e004      	b.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800634c:	bf00      	nop
 800634e:	e002      	b.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8006350:	bf00      	nop
 8006352:	e000      	b.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8006354:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006356:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800635a:	2b00      	cmp	r3, #0
 800635c:	d110      	bne.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800635e:	4b07      	ldr	r3, [pc, #28]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006360:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006364:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006368:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800636c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006370:	4a02      	ldr	r2, [pc, #8]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006372:	430b      	orrs	r3, r1
 8006374:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006378:	e006      	b.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x650>
 800637a:	bf00      	nop
 800637c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006380:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006384:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006388:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800638c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006390:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006394:	653b      	str	r3, [r7, #80]	; 0x50
 8006396:	2300      	movs	r3, #0
 8006398:	657b      	str	r3, [r7, #84]	; 0x54
 800639a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800639e:	460b      	mov	r3, r1
 80063a0:	4313      	orrs	r3, r2
 80063a2:	f000 80b5 	beq.w	8006510 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063a6:	2300      	movs	r3, #0
 80063a8:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80063ac:	4b9d      	ldr	r3, [pc, #628]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80063ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063b2:	f003 0304 	and.w	r3, r3, #4
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d113      	bne.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063ba:	4b9a      	ldr	r3, [pc, #616]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80063bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063c0:	4a98      	ldr	r2, [pc, #608]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80063c2:	f043 0304 	orr.w	r3, r3, #4
 80063c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80063ca:	4b96      	ldr	r3, [pc, #600]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80063cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063d0:	f003 0304 	and.w	r3, r3, #4
 80063d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80063d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 80063dc:	2301      	movs	r3, #1
 80063de:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80063e2:	4b91      	ldr	r3, [pc, #580]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80063e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063e6:	4a90      	ldr	r2, [pc, #576]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80063e8:	f043 0301 	orr.w	r3, r3, #1
 80063ec:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80063ee:	f7fa ffff 	bl	80013f0 <HAL_GetTick>
 80063f2:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80063f6:	e00b      	b.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063f8:	f7fa fffa 	bl	80013f0 <HAL_GetTick>
 80063fc:	4602      	mov	r2, r0
 80063fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006402:	1ad3      	subs	r3, r2, r3
 8006404:	2b02      	cmp	r3, #2
 8006406:	d903      	bls.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 8006408:	2303      	movs	r3, #3
 800640a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800640e:	e005      	b.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006410:	4b85      	ldr	r3, [pc, #532]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8006412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006414:	f003 0301 	and.w	r3, r3, #1
 8006418:	2b00      	cmp	r3, #0
 800641a:	d0ed      	beq.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 800641c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006420:	2b00      	cmp	r3, #0
 8006422:	d165      	bne.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006424:	4b7f      	ldr	r3, [pc, #508]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006426:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800642a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800642e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8006432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006436:	2b00      	cmp	r3, #0
 8006438:	d023      	beq.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 800643a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800643e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8006442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006446:	4293      	cmp	r3, r2
 8006448:	d01b      	beq.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800644a:	4b76      	ldr	r3, [pc, #472]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800644c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006450:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006454:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006458:	4b72      	ldr	r3, [pc, #456]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800645a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800645e:	4a71      	ldr	r2, [pc, #452]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006464:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006468:	4b6e      	ldr	r3, [pc, #440]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800646a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800646e:	4a6d      	ldr	r2, [pc, #436]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006470:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006474:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006478:	4a6a      	ldr	r2, [pc, #424]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800647a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800647e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006486:	f003 0301 	and.w	r3, r3, #1
 800648a:	2b00      	cmp	r3, #0
 800648c:	d019      	beq.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800648e:	f7fa ffaf 	bl	80013f0 <HAL_GetTick>
 8006492:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006496:	e00d      	b.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006498:	f7fa ffaa 	bl	80013f0 <HAL_GetTick>
 800649c:	4602      	mov	r2, r0
 800649e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064a2:	1ad2      	subs	r2, r2, r3
 80064a4:	f241 3388 	movw	r3, #5000	; 0x1388
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d903      	bls.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 80064ac:	2303      	movs	r3, #3
 80064ae:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 80064b2:	e006      	b.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064b4:	4b5b      	ldr	r3, [pc, #364]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80064b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80064ba:	f003 0302 	and.w	r3, r3, #2
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d0ea      	beq.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 80064c2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d10d      	bne.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80064ca:	4b56      	ldr	r3, [pc, #344]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80064cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80064d0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80064d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064d8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80064dc:	4a51      	ldr	r2, [pc, #324]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80064de:	430b      	orrs	r3, r1
 80064e0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80064e4:	e008      	b.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80064e6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80064ea:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 80064ee:	e003      	b.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064f0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80064f4:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80064f8:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d107      	bne.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006500:	4b48      	ldr	r3, [pc, #288]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006502:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006506:	4a47      	ldr	r2, [pc, #284]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006508:	f023 0304 	bic.w	r3, r3, #4
 800650c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8006510:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006518:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800651c:	64bb      	str	r3, [r7, #72]	; 0x48
 800651e:	2300      	movs	r3, #0
 8006520:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006522:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006526:	460b      	mov	r3, r1
 8006528:	4313      	orrs	r3, r2
 800652a:	d042      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800652c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006530:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006534:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006538:	d022      	beq.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x848>
 800653a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800653e:	d81b      	bhi.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8006540:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006544:	d011      	beq.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x832>
 8006546:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800654a:	d815      	bhi.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x840>
 800654c:	2b00      	cmp	r3, #0
 800654e:	d019      	beq.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8006550:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006554:	d110      	bne.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006556:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800655a:	3308      	adds	r3, #8
 800655c:	4618      	mov	r0, r3
 800655e:	f001 ff05 	bl	800836c <RCCEx_PLL2_Config>
 8006562:	4603      	mov	r3, r0
 8006564:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006568:	e00d      	b.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800656a:	4b2e      	ldr	r3, [pc, #184]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800656c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800656e:	4a2d      	ldr	r2, [pc, #180]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006570:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006574:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8006576:	e006      	b.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800657e:	e002      	b.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8006580:	bf00      	nop
 8006582:	e000      	b.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8006584:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006586:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800658a:	2b00      	cmp	r3, #0
 800658c:	d10d      	bne.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800658e:	4b25      	ldr	r3, [pc, #148]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006590:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006594:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8006598:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800659c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80065a0:	4a20      	ldr	r2, [pc, #128]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80065a2:	430b      	orrs	r3, r1
 80065a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80065a8:	e003      	b.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065aa:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80065ae:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80065b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ba:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80065be:	643b      	str	r3, [r7, #64]	; 0x40
 80065c0:	2300      	movs	r3, #0
 80065c2:	647b      	str	r3, [r7, #68]	; 0x44
 80065c4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80065c8:	460b      	mov	r3, r1
 80065ca:	4313      	orrs	r3, r2
 80065cc:	d032      	beq.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80065ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80065d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065da:	d00b      	beq.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80065dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065e0:	d804      	bhi.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d008      	beq.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 80065e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065ea:	d007      	beq.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80065f2:	e004      	b.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80065f4:	bf00      	nop
 80065f6:	e002      	b.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80065f8:	bf00      	nop
 80065fa:	e000      	b.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80065fc:	bf00      	nop
    }
    if (ret == HAL_OK)
 80065fe:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006602:	2b00      	cmp	r3, #0
 8006604:	d112      	bne.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8006606:	4b07      	ldr	r3, [pc, #28]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006608:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800660c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006610:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006614:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006618:	4a02      	ldr	r2, [pc, #8]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800661a:	430b      	orrs	r3, r1
 800661c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006620:	e008      	b.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 8006622:	bf00      	nop
 8006624:	46020c00 	.word	0x46020c00
 8006628:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800662c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006630:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8006634:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663c:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8006640:	63bb      	str	r3, [r7, #56]	; 0x38
 8006642:	2300      	movs	r3, #0
 8006644:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006646:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800664a:	460b      	mov	r3, r1
 800664c:	4313      	orrs	r3, r2
 800664e:	d00c      	beq.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8006650:	4b98      	ldr	r3, [pc, #608]	; (80068b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006652:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006656:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 800665a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800665e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006662:	4a94      	ldr	r2, [pc, #592]	; (80068b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006664:	430b      	orrs	r3, r1
 8006666:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800666a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800666e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006672:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006676:	633b      	str	r3, [r7, #48]	; 0x30
 8006678:	2300      	movs	r3, #0
 800667a:	637b      	str	r3, [r7, #52]	; 0x34
 800667c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006680:	460b      	mov	r3, r1
 8006682:	4313      	orrs	r3, r2
 8006684:	d019      	beq.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8006686:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800668a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800668e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006692:	d105      	bne.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006694:	4b87      	ldr	r3, [pc, #540]	; (80068b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006698:	4a86      	ldr	r2, [pc, #536]	; (80068b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800669a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800669e:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80066a0:	4b84      	ldr	r3, [pc, #528]	; (80068b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80066a2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80066a6:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80066aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80066b2:	4a80      	ldr	r2, [pc, #512]	; (80068b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80066b4:	430b      	orrs	r3, r1
 80066b6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80066ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c2:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80066c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80066c8:	2300      	movs	r3, #0
 80066ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066cc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80066d0:	460b      	mov	r3, r1
 80066d2:	4313      	orrs	r3, r2
 80066d4:	d00c      	beq.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80066d6:	4b77      	ldr	r3, [pc, #476]	; (80068b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80066d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80066dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80066e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80066e8:	4972      	ldr	r1, [pc, #456]	; (80068b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80066ea:	4313      	orrs	r3, r2
 80066ec:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80066f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80066fc:	623b      	str	r3, [r7, #32]
 80066fe:	2300      	movs	r3, #0
 8006700:	627b      	str	r3, [r7, #36]	; 0x24
 8006702:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006706:	460b      	mov	r3, r1
 8006708:	4313      	orrs	r3, r2
 800670a:	d00c      	beq.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800670c:	4b69      	ldr	r3, [pc, #420]	; (80068b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800670e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006712:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006716:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800671a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800671e:	4965      	ldr	r1, [pc, #404]	; (80068b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006720:	4313      	orrs	r3, r2
 8006722:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8006726:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800672a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672e:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006732:	61bb      	str	r3, [r7, #24]
 8006734:	2300      	movs	r3, #0
 8006736:	61fb      	str	r3, [r7, #28]
 8006738:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800673c:	460b      	mov	r3, r1
 800673e:	4313      	orrs	r3, r2
 8006740:	d00c      	beq.n	800675c <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8006742:	4b5c      	ldr	r3, [pc, #368]	; (80068b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006744:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006748:	f023 0218 	bic.w	r2, r3, #24
 800674c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006750:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006754:	4957      	ldr	r1, [pc, #348]	; (80068b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006756:	4313      	orrs	r3, r2
 8006758:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800675c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006764:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8006768:	613b      	str	r3, [r7, #16]
 800676a:	2300      	movs	r3, #0
 800676c:	617b      	str	r3, [r7, #20]
 800676e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006772:	460b      	mov	r3, r1
 8006774:	4313      	orrs	r3, r2
 8006776:	d032      	beq.n	80067de <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8006778:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800677c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006780:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006784:	d105      	bne.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006786:	4b4b      	ldr	r3, [pc, #300]	; (80068b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800678a:	4a4a      	ldr	r2, [pc, #296]	; (80068b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800678c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006790:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8006792:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006796:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800679a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800679e:	d108      	bne.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80067a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067a4:	3308      	adds	r3, #8
 80067a6:	4618      	mov	r0, r3
 80067a8:	f001 fde0 	bl	800836c <RCCEx_PLL2_Config>
 80067ac:	4603      	mov	r3, r0
 80067ae:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 80067b2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d10d      	bne.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80067ba:	4b3e      	ldr	r3, [pc, #248]	; (80068b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80067bc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80067c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80067c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80067cc:	4939      	ldr	r1, [pc, #228]	; (80068b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80067ce:	4313      	orrs	r3, r2
 80067d0:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80067d4:	e003      	b.n	80067de <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067d6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80067da:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80067de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e6:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 80067ea:	60bb      	str	r3, [r7, #8]
 80067ec:	2300      	movs	r3, #0
 80067ee:	60fb      	str	r3, [r7, #12]
 80067f0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80067f4:	460b      	mov	r3, r1
 80067f6:	4313      	orrs	r3, r2
 80067f8:	d03a      	beq.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80067fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006802:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006806:	d00e      	beq.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8006808:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800680c:	d815      	bhi.n	800683a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800680e:	2b00      	cmp	r3, #0
 8006810:	d017      	beq.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8006812:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006816:	d110      	bne.n	800683a <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006818:	4b26      	ldr	r3, [pc, #152]	; (80068b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800681a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800681c:	4a25      	ldr	r2, [pc, #148]	; (80068b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800681e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006822:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006824:	e00e      	b.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006826:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800682a:	3308      	adds	r3, #8
 800682c:	4618      	mov	r0, r3
 800682e:	f001 fd9d 	bl	800836c <RCCEx_PLL2_Config>
 8006832:	4603      	mov	r3, r0
 8006834:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006838:	e004      	b.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006840:	e000      	b.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 8006842:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006844:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006848:	2b00      	cmp	r3, #0
 800684a:	d10d      	bne.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800684c:	4b19      	ldr	r3, [pc, #100]	; (80068b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800684e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006852:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006856:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800685a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800685e:	4915      	ldr	r1, [pc, #84]	; (80068b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006860:	4313      	orrs	r3, r2
 8006862:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8006866:	e003      	b.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006868:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800686c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8006870:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006878:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800687c:	603b      	str	r3, [r7, #0]
 800687e:	2300      	movs	r3, #0
 8006880:	607b      	str	r3, [r7, #4]
 8006882:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006886:	460b      	mov	r3, r1
 8006888:	4313      	orrs	r3, r2
 800688a:	d00c      	beq.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800688c:	4b09      	ldr	r3, [pc, #36]	; (80068b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800688e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006892:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8006896:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800689a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800689e:	4905      	ldr	r1, [pc, #20]	; (80068b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80068a0:	4313      	orrs	r3, r2
 80068a2:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80068a6:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	37e8      	adds	r7, #232	; 0xe8
 80068ae:	46bd      	mov	sp, r7
 80068b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068b4:	46020c00 	.word	0x46020c00

080068b8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b089      	sub	sp, #36	; 0x24
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80068c0:	4bac      	ldr	r3, [pc, #688]	; (8006b74 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80068c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068c8:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80068ca:	4baa      	ldr	r3, [pc, #680]	; (8006b74 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80068cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ce:	f003 0303 	and.w	r3, r3, #3
 80068d2:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80068d4:	4ba7      	ldr	r3, [pc, #668]	; (8006b74 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80068d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068d8:	0a1b      	lsrs	r3, r3, #8
 80068da:	f003 030f 	and.w	r3, r3, #15
 80068de:	3301      	adds	r3, #1
 80068e0:	613b      	str	r3, [r7, #16]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 80068e2:	4ba4      	ldr	r3, [pc, #656]	; (8006b74 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80068e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e6:	f003 0310 	and.w	r3, r3, #16
 80068ea:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80068ec:	4ba1      	ldr	r3, [pc, #644]	; (8006b74 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80068ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f0:	08db      	lsrs	r3, r3, #3
 80068f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80068f6:	68fa      	ldr	r2, [r7, #12]
 80068f8:	fb02 f303 	mul.w	r3, r2, r3
 80068fc:	ee07 3a90 	vmov	s15, r3
 8006900:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006904:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	2b00      	cmp	r3, #0
 800690c:	f000 8123 	beq.w	8006b56 <HAL_RCCEx_GetPLL1ClockFreq+0x29e>
  {
    switch (pll1source)
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	2b03      	cmp	r3, #3
 8006914:	d062      	beq.n	80069dc <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	2b03      	cmp	r3, #3
 800691a:	f200 8081 	bhi.w	8006a20 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	2b01      	cmp	r3, #1
 8006922:	d024      	beq.n	800696e <HAL_RCCEx_GetPLL1ClockFreq+0xb6>
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	2b02      	cmp	r3, #2
 8006928:	d17a      	bne.n	8006a20 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	ee07 3a90 	vmov	s15, r3
 8006930:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006934:	eddf 6a90 	vldr	s13, [pc, #576]	; 8006b78 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8006938:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800693c:	4b8d      	ldr	r3, [pc, #564]	; (8006b74 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800693e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006940:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006944:	ee07 3a90 	vmov	s15, r3
 8006948:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800694c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006950:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8006b7c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8006954:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006958:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800695c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006960:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006964:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006968:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800696c:	e08f      	b.n	8006a8e <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800696e:	4b81      	ldr	r3, [pc, #516]	; (8006b74 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006976:	2b00      	cmp	r3, #0
 8006978:	d005      	beq.n	8006986 <HAL_RCCEx_GetPLL1ClockFreq+0xce>
 800697a:	4b7e      	ldr	r3, [pc, #504]	; (8006b74 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	0f1b      	lsrs	r3, r3, #28
 8006980:	f003 030f 	and.w	r3, r3, #15
 8006984:	e006      	b.n	8006994 <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 8006986:	4b7b      	ldr	r3, [pc, #492]	; (8006b74 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006988:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800698c:	041b      	lsls	r3, r3, #16
 800698e:	0f1b      	lsrs	r3, r3, #28
 8006990:	f003 030f 	and.w	r3, r3, #15
 8006994:	4a7a      	ldr	r2, [pc, #488]	; (8006b80 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8006996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800699a:	ee07 3a90 	vmov	s15, r3
 800699e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	ee07 3a90 	vmov	s15, r3
 80069a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80069b0:	69bb      	ldr	r3, [r7, #24]
 80069b2:	ee07 3a90 	vmov	s15, r3
 80069b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80069be:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8006b7c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 80069c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80069d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80069da:	e058      	b.n	8006a8e <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	ee07 3a90 	vmov	s15, r3
 80069e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069e6:	eddf 6a64 	vldr	s13, [pc, #400]	; 8006b78 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 80069ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069ee:	4b61      	ldr	r3, [pc, #388]	; (8006b74 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80069f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069f6:	ee07 3a90 	vmov	s15, r3
 80069fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80069fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a02:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8006b7c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8006a06:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006a0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a12:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a1e:	e036      	b.n	8006a8e <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006a20:	4b54      	ldr	r3, [pc, #336]	; (8006b74 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d005      	beq.n	8006a38 <HAL_RCCEx_GetPLL1ClockFreq+0x180>
 8006a2c:	4b51      	ldr	r3, [pc, #324]	; (8006b74 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	0f1b      	lsrs	r3, r3, #28
 8006a32:	f003 030f 	and.w	r3, r3, #15
 8006a36:	e006      	b.n	8006a46 <HAL_RCCEx_GetPLL1ClockFreq+0x18e>
 8006a38:	4b4e      	ldr	r3, [pc, #312]	; (8006b74 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006a3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006a3e:	041b      	lsls	r3, r3, #16
 8006a40:	0f1b      	lsrs	r3, r3, #28
 8006a42:	f003 030f 	and.w	r3, r3, #15
 8006a46:	4a4e      	ldr	r2, [pc, #312]	; (8006b80 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8006a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a4c:	ee07 3a90 	vmov	s15, r3
 8006a50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	ee07 3a90 	vmov	s15, r3
 8006a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	ee07 3a90 	vmov	s15, r3
 8006a68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a6c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a70:	eddf 5a42 	vldr	s11, [pc, #264]	; 8006b7c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8006a74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a80:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006a84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a88:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a8c:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8006a8e:	4b39      	ldr	r3, [pc, #228]	; (8006b74 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d017      	beq.n	8006aca <HAL_RCCEx_GetPLL1ClockFreq+0x212>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006a9a:	4b36      	ldr	r3, [pc, #216]	; (8006b74 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a9e:	0a5b      	lsrs	r3, r3, #9
 8006aa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006aa4:	ee07 3a90 	vmov	s15, r3
 8006aa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8006aac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006ab0:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006ab4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ab8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006abc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ac0:	ee17 2a90 	vmov	r2, s15
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	601a      	str	r2, [r3, #0]
 8006ac8:	e002      	b.n	8006ad0 <HAL_RCCEx_GetPLL1ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8006ad0:	4b28      	ldr	r3, [pc, #160]	; (8006b74 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d017      	beq.n	8006b0c <HAL_RCCEx_GetPLL1ClockFreq+0x254>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006adc:	4b25      	ldr	r3, [pc, #148]	; (8006b74 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ae0:	0c1b      	lsrs	r3, r3, #16
 8006ae2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ae6:	ee07 3a90 	vmov	s15, r3
 8006aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8006aee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006af2:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006af6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006afa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006afe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b02:	ee17 2a90 	vmov	r2, s15
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	605a      	str	r2, [r3, #4]
 8006b0a:	e002      	b.n	8006b12 <HAL_RCCEx_GetPLL1ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8006b12:	4b18      	ldr	r3, [pc, #96]	; (8006b74 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d017      	beq.n	8006b4e <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006b1e:	4b15      	ldr	r3, [pc, #84]	; (8006b74 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b22:	0e1b      	lsrs	r3, r3, #24
 8006b24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b28:	ee07 3a90 	vmov	s15, r3
 8006b2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8006b30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b34:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006b38:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b44:	ee17 2a90 	vmov	r2, s15
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006b4c:	e00c      	b.n	8006b68 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	609a      	str	r2, [r3, #8]
}
 8006b54:	e008      	b.n	8006b68 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	609a      	str	r2, [r3, #8]
}
 8006b68:	bf00      	nop
 8006b6a:	3724      	adds	r7, #36	; 0x24
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr
 8006b74:	46020c00 	.word	0x46020c00
 8006b78:	4b742400 	.word	0x4b742400
 8006b7c:	46000000 	.word	0x46000000
 8006b80:	0800a9f8 	.word	0x0800a9f8

08006b84 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b089      	sub	sp, #36	; 0x24
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8006b8c:	4bac      	ldr	r3, [pc, #688]	; (8006e40 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b94:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8006b96:	4baa      	ldr	r3, [pc, #680]	; (8006e40 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b9a:	f003 0303 	and.w	r3, r3, #3
 8006b9e:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8006ba0:	4ba7      	ldr	r3, [pc, #668]	; (8006e40 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba4:	0a1b      	lsrs	r3, r3, #8
 8006ba6:	f003 030f 	and.w	r3, r3, #15
 8006baa:	3301      	adds	r3, #1
 8006bac:	613b      	str	r3, [r7, #16]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8006bae:	4ba4      	ldr	r3, [pc, #656]	; (8006e40 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb2:	f003 0310 	and.w	r3, r3, #16
 8006bb6:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8006bb8:	4ba1      	ldr	r3, [pc, #644]	; (8006e40 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bbc:	08db      	lsrs	r3, r3, #3
 8006bbe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006bc2:	68fa      	ldr	r2, [r7, #12]
 8006bc4:	fb02 f303 	mul.w	r3, r2, r3
 8006bc8:	ee07 3a90 	vmov	s15, r3
 8006bcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bd0:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	f000 8123 	beq.w	8006e22 <HAL_RCCEx_GetPLL2ClockFreq+0x29e>
  {
    switch (pll2source)
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	2b03      	cmp	r3, #3
 8006be0:	d062      	beq.n	8006ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	2b03      	cmp	r3, #3
 8006be6:	f200 8081 	bhi.w	8006cec <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d024      	beq.n	8006c3a <HAL_RCCEx_GetPLL2ClockFreq+0xb6>
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	2b02      	cmp	r3, #2
 8006bf4:	d17a      	bne.n	8006cec <HAL_RCCEx_GetPLL2ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	ee07 3a90 	vmov	s15, r3
 8006bfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c00:	eddf 6a90 	vldr	s13, [pc, #576]	; 8006e44 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 8006c04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c08:	4b8d      	ldr	r3, [pc, #564]	; (8006e40 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c10:	ee07 3a90 	vmov	s15, r3
 8006c14:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c18:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c1c:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8006e48 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8006c20:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006c24:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006c30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c34:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c38:	e08f      	b.n	8006d5a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006c3a:	4b81      	ldr	r3, [pc, #516]	; (8006e40 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d005      	beq.n	8006c52 <HAL_RCCEx_GetPLL2ClockFreq+0xce>
 8006c46:	4b7e      	ldr	r3, [pc, #504]	; (8006e40 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	0f1b      	lsrs	r3, r3, #28
 8006c4c:	f003 030f 	and.w	r3, r3, #15
 8006c50:	e006      	b.n	8006c60 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
 8006c52:	4b7b      	ldr	r3, [pc, #492]	; (8006e40 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006c54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006c58:	041b      	lsls	r3, r3, #16
 8006c5a:	0f1b      	lsrs	r3, r3, #28
 8006c5c:	f003 030f 	and.w	r3, r3, #15
 8006c60:	4a7a      	ldr	r2, [pc, #488]	; (8006e4c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8006c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c66:	ee07 3a90 	vmov	s15, r3
 8006c6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	ee07 3a90 	vmov	s15, r3
 8006c74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c7c:	69bb      	ldr	r3, [r7, #24]
 8006c7e:	ee07 3a90 	vmov	s15, r3
 8006c82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c86:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c8a:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8006e48 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8006c8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ca2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ca6:	e058      	b.n	8006d5a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	ee07 3a90 	vmov	s15, r3
 8006cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cb2:	eddf 6a64 	vldr	s13, [pc, #400]	; 8006e44 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 8006cb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cba:	4b61      	ldr	r3, [pc, #388]	; (8006e40 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cc2:	ee07 3a90 	vmov	s15, r3
 8006cc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8006cca:	ed97 6a02 	vldr	s12, [r7, #8]
 8006cce:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8006e48 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8006cd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006cd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8006cda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cde:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006ce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ce6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cea:	e036      	b.n	8006d5a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006cec:	4b54      	ldr	r3, [pc, #336]	; (8006e40 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d005      	beq.n	8006d04 <HAL_RCCEx_GetPLL2ClockFreq+0x180>
 8006cf8:	4b51      	ldr	r3, [pc, #324]	; (8006e40 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	0f1b      	lsrs	r3, r3, #28
 8006cfe:	f003 030f 	and.w	r3, r3, #15
 8006d02:	e006      	b.n	8006d12 <HAL_RCCEx_GetPLL2ClockFreq+0x18e>
 8006d04:	4b4e      	ldr	r3, [pc, #312]	; (8006e40 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006d06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006d0a:	041b      	lsls	r3, r3, #16
 8006d0c:	0f1b      	lsrs	r3, r3, #28
 8006d0e:	f003 030f 	and.w	r3, r3, #15
 8006d12:	4a4e      	ldr	r2, [pc, #312]	; (8006e4c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8006d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d18:	ee07 3a90 	vmov	s15, r3
 8006d1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	ee07 3a90 	vmov	s15, r3
 8006d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006d2e:	69bb      	ldr	r3, [r7, #24]
 8006d30:	ee07 3a90 	vmov	s15, r3
 8006d34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d38:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d3c:	eddf 5a42 	vldr	s11, [pc, #264]	; 8006e48 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8006d40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006d50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d54:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d58:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8006d5a:	4b39      	ldr	r3, [pc, #228]	; (8006e40 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d017      	beq.n	8006d96 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006d66:	4b36      	ldr	r3, [pc, #216]	; (8006e40 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d6a:	0a5b      	lsrs	r3, r3, #9
 8006d6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d70:	ee07 3a90 	vmov	s15, r3
 8006d74:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8006d78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d7c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006d80:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d8c:	ee17 2a90 	vmov	r2, s15
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	601a      	str	r2, [r3, #0]
 8006d94:	e002      	b.n	8006d9c <HAL_RCCEx_GetPLL2ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8006d9c:	4b28      	ldr	r3, [pc, #160]	; (8006e40 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d017      	beq.n	8006dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006da8:	4b25      	ldr	r3, [pc, #148]	; (8006e40 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006daa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dac:	0c1b      	lsrs	r3, r3, #16
 8006dae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006db2:	ee07 3a90 	vmov	s15, r3
 8006db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8006dba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006dbe:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006dc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006dc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006dca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006dce:	ee17 2a90 	vmov	r2, s15
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	605a      	str	r2, [r3, #4]
 8006dd6:	e002      	b.n	8006dde <HAL_RCCEx_GetPLL2ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8006dde:	4b18      	ldr	r3, [pc, #96]	; (8006e40 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d017      	beq.n	8006e1a <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006dea:	4b15      	ldr	r3, [pc, #84]	; (8006e40 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dee:	0e1b      	lsrs	r3, r3, #24
 8006df0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006df4:	ee07 3a90 	vmov	s15, r3
 8006df8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8006dfc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e00:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006e04:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e10:	ee17 2a90 	vmov	r2, s15
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006e18:	e00c      	b.n	8006e34 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	609a      	str	r2, [r3, #8]
}
 8006e20:	e008      	b.n	8006e34 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2200      	movs	r2, #0
 8006e32:	609a      	str	r2, [r3, #8]
}
 8006e34:	bf00      	nop
 8006e36:	3724      	adds	r7, #36	; 0x24
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr
 8006e40:	46020c00 	.word	0x46020c00
 8006e44:	4b742400 	.word	0x4b742400
 8006e48:	46000000 	.word	0x46000000
 8006e4c:	0800a9f8 	.word	0x0800a9f8

08006e50 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b089      	sub	sp, #36	; 0x24
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8006e58:	4bac      	ldr	r3, [pc, #688]	; (800710c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e60:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8006e62:	4baa      	ldr	r3, [pc, #680]	; (800710c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e66:	f003 0303 	and.w	r3, r3, #3
 8006e6a:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8006e6c:	4ba7      	ldr	r3, [pc, #668]	; (800710c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e70:	0a1b      	lsrs	r3, r3, #8
 8006e72:	f003 030f 	and.w	r3, r3, #15
 8006e76:	3301      	adds	r3, #1
 8006e78:	613b      	str	r3, [r7, #16]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8006e7a:	4ba4      	ldr	r3, [pc, #656]	; (800710c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e7e:	f003 0310 	and.w	r3, r3, #16
 8006e82:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8006e84:	4ba1      	ldr	r3, [pc, #644]	; (800710c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006e86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e88:	08db      	lsrs	r3, r3, #3
 8006e8a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e8e:	68fa      	ldr	r2, [r7, #12]
 8006e90:	fb02 f303 	mul.w	r3, r2, r3
 8006e94:	ee07 3a90 	vmov	s15, r3
 8006e98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e9c:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	f000 8123 	beq.w	80070ee <HAL_RCCEx_GetPLL3ClockFreq+0x29e>
  {
    switch (pll3source)
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	2b03      	cmp	r3, #3
 8006eac:	d062      	beq.n	8006f74 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	2b03      	cmp	r3, #3
 8006eb2:	f200 8081 	bhi.w	8006fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d024      	beq.n	8006f06 <HAL_RCCEx_GetPLL3ClockFreq+0xb6>
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	2b02      	cmp	r3, #2
 8006ec0:	d17a      	bne.n	8006fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	ee07 3a90 	vmov	s15, r3
 8006ec8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ecc:	eddf 6a90 	vldr	s13, [pc, #576]	; 8007110 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 8006ed0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ed4:	4b8d      	ldr	r3, [pc, #564]	; (800710c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ed8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006edc:	ee07 3a90 	vmov	s15, r3
 8006ee0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ee4:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ee8:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8007114 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8006eec:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006ef0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ef4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ef8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006efc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f00:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 8006f04:	e08f      	b.n	8007026 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006f06:	4b81      	ldr	r3, [pc, #516]	; (800710c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d005      	beq.n	8006f1e <HAL_RCCEx_GetPLL3ClockFreq+0xce>
 8006f12:	4b7e      	ldr	r3, [pc, #504]	; (800710c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	0f1b      	lsrs	r3, r3, #28
 8006f18:	f003 030f 	and.w	r3, r3, #15
 8006f1c:	e006      	b.n	8006f2c <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
 8006f1e:	4b7b      	ldr	r3, [pc, #492]	; (800710c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006f20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006f24:	041b      	lsls	r3, r3, #16
 8006f26:	0f1b      	lsrs	r3, r3, #28
 8006f28:	f003 030f 	and.w	r3, r3, #15
 8006f2c:	4a7a      	ldr	r2, [pc, #488]	; (8007118 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8006f2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f32:	ee07 3a90 	vmov	s15, r3
 8006f36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	ee07 3a90 	vmov	s15, r3
 8006f40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	ee07 3a90 	vmov	s15, r3
 8006f4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f52:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f56:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8007114 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8006f5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f66:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f72:	e058      	b.n	8007026 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	ee07 3a90 	vmov	s15, r3
 8006f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f7e:	eddf 6a64 	vldr	s13, [pc, #400]	; 8007110 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 8006f82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f86:	4b61      	ldr	r3, [pc, #388]	; (800710c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f8e:	ee07 3a90 	vmov	s15, r3
 8006f92:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f96:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f9a:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8007114 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8006f9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006fa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8006fa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006faa:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fb6:	e036      	b.n	8007026 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006fb8:	4b54      	ldr	r3, [pc, #336]	; (800710c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d005      	beq.n	8006fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x180>
 8006fc4:	4b51      	ldr	r3, [pc, #324]	; (800710c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	0f1b      	lsrs	r3, r3, #28
 8006fca:	f003 030f 	and.w	r3, r3, #15
 8006fce:	e006      	b.n	8006fde <HAL_RCCEx_GetPLL3ClockFreq+0x18e>
 8006fd0:	4b4e      	ldr	r3, [pc, #312]	; (800710c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006fd2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006fd6:	041b      	lsls	r3, r3, #16
 8006fd8:	0f1b      	lsrs	r3, r3, #28
 8006fda:	f003 030f 	and.w	r3, r3, #15
 8006fde:	4a4e      	ldr	r2, [pc, #312]	; (8007118 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8006fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fe4:	ee07 3a90 	vmov	s15, r3
 8006fe8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	ee07 3a90 	vmov	s15, r3
 8006ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ff6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	ee07 3a90 	vmov	s15, r3
 8007000:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007004:	ed97 6a02 	vldr	s12, [r7, #8]
 8007008:	eddf 5a42 	vldr	s11, [pc, #264]	; 8007114 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800700c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007010:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007014:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007018:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800701c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007020:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007024:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8007026:	4b39      	ldr	r3, [pc, #228]	; (800710c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800702a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800702e:	2b00      	cmp	r3, #0
 8007030:	d017      	beq.n	8007062 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007032:	4b36      	ldr	r3, [pc, #216]	; (800710c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007036:	0a5b      	lsrs	r3, r3, #9
 8007038:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800703c:	ee07 3a90 	vmov	s15, r3
 8007040:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8007044:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007048:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800704c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007050:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007054:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007058:	ee17 2a90 	vmov	r2, s15
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	601a      	str	r2, [r3, #0]
 8007060:	e002      	b.n	8007068 <HAL_RCCEx_GetPLL3ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2200      	movs	r2, #0
 8007066:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8007068:	4b28      	ldr	r3, [pc, #160]	; (800710c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800706a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800706c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007070:	2b00      	cmp	r3, #0
 8007072:	d017      	beq.n	80070a4 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007074:	4b25      	ldr	r3, [pc, #148]	; (800710c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007078:	0c1b      	lsrs	r3, r3, #16
 800707a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800707e:	ee07 3a90 	vmov	s15, r3
 8007082:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8007086:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800708a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800708e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007092:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007096:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800709a:	ee17 2a90 	vmov	r2, s15
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	605a      	str	r2, [r3, #4]
 80070a2:	e002      	b.n	80070aa <HAL_RCCEx_GetPLL3ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2200      	movs	r2, #0
 80070a8:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80070aa:	4b18      	ldr	r3, [pc, #96]	; (800710c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80070ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d017      	beq.n	80070e6 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80070b6:	4b15      	ldr	r3, [pc, #84]	; (800710c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80070b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ba:	0e1b      	lsrs	r3, r3, #24
 80070bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070c0:	ee07 3a90 	vmov	s15, r3
 80070c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 80070c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80070cc:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80070d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80070d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070dc:	ee17 2a90 	vmov	r2, s15
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 80070e4:	e00c      	b.n	8007100 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2200      	movs	r2, #0
 80070ea:	609a      	str	r2, [r3, #8]
}
 80070ec:	e008      	b.n	8007100 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	609a      	str	r2, [r3, #8]
}
 8007100:	bf00      	nop
 8007102:	3724      	adds	r7, #36	; 0x24
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr
 800710c:	46020c00 	.word	0x46020c00
 8007110:	4b742400 	.word	0x4b742400
 8007114:	46000000 	.word	0x46000000
 8007118:	0800a9f8 	.word	0x0800a9f8

0800711c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_FDCAN1 FDCAN1 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_DAC1 DAC1 peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b08e      	sub	sp, #56	; 0x38
 8007120:	af00      	add	r7, sp, #0
 8007122:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8007126:	e9d7 2300 	ldrd	r2, r3, [r7]
 800712a:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 800712e:	430b      	orrs	r3, r1
 8007130:	d145      	bne.n	80071be <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8007132:	4ba7      	ldr	r3, [pc, #668]	; (80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007134:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007138:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800713c:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800713e:	4ba4      	ldr	r3, [pc, #656]	; (80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007140:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007144:	f003 0302 	and.w	r3, r3, #2
 8007148:	2b02      	cmp	r3, #2
 800714a:	d108      	bne.n	800715e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800714c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007152:	d104      	bne.n	800715e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8007154:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007158:	637b      	str	r3, [r7, #52]	; 0x34
 800715a:	f001 b8fc 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800715e:	4b9c      	ldr	r3, [pc, #624]	; (80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007160:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007164:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007168:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800716c:	d114      	bne.n	8007198 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800716e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007170:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007174:	d110      	bne.n	8007198 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007176:	4b96      	ldr	r3, [pc, #600]	; (80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007178:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800717c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007180:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007184:	d103      	bne.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8007186:	23fa      	movs	r3, #250	; 0xfa
 8007188:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800718a:	f001 b8e4 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800718e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007192:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007194:	f001 b8df 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8007198:	4b8d      	ldr	r3, [pc, #564]	; (80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071a4:	d107      	bne.n	80071b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 80071a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071ac:	d103      	bne.n	80071b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 80071ae:	4b89      	ldr	r3, [pc, #548]	; (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80071b0:	637b      	str	r3, [r7, #52]	; 0x34
 80071b2:	f001 b8d0 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80071b6:	2300      	movs	r3, #0
 80071b8:	637b      	str	r3, [r7, #52]	; 0x34
 80071ba:	f001 b8cc 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80071be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071c2:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80071c6:	430b      	orrs	r3, r1
 80071c8:	d151      	bne.n	800726e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80071ca:	4b81      	ldr	r3, [pc, #516]	; (80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80071cc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80071d0:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80071d4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80071d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d8:	2b80      	cmp	r3, #128	; 0x80
 80071da:	d035      	beq.n	8007248 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 80071dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071de:	2b80      	cmp	r3, #128	; 0x80
 80071e0:	d841      	bhi.n	8007266 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80071e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e4:	2b60      	cmp	r3, #96	; 0x60
 80071e6:	d02a      	beq.n	800723e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 80071e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ea:	2b60      	cmp	r3, #96	; 0x60
 80071ec:	d83b      	bhi.n	8007266 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80071ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f0:	2b40      	cmp	r3, #64	; 0x40
 80071f2:	d009      	beq.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80071f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f6:	2b40      	cmp	r3, #64	; 0x40
 80071f8:	d835      	bhi.n	8007266 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80071fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d00c      	beq.n	800721a <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8007200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007202:	2b20      	cmp	r3, #32
 8007204:	d012      	beq.n	800722c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8007206:	e02e      	b.n	8007266 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007208:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800720c:	4618      	mov	r0, r3
 800720e:	f7ff fb53 	bl	80068b8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007214:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007216:	f001 b89e 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800721a:	f107 0318 	add.w	r3, r7, #24
 800721e:	4618      	mov	r0, r3
 8007220:	f7ff fcb0 	bl	8006b84 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8007224:	69bb      	ldr	r3, [r7, #24]
 8007226:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007228:	f001 b895 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800722c:	f107 030c 	add.w	r3, r7, #12
 8007230:	4618      	mov	r0, r3
 8007232:	f7ff fe0d 	bl	8006e50 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800723a:	f001 b88c 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800723e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007242:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007244:	f001 b887 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007248:	4b61      	ldr	r3, [pc, #388]	; (80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007250:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007254:	d103      	bne.n	800725e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8007256:	4b60      	ldr	r3, [pc, #384]	; (80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007258:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800725a:	f001 b87c 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800725e:	2300      	movs	r3, #0
 8007260:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007262:	f001 b878 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :
      {
        frequency = 0U;
 8007266:	2300      	movs	r3, #0
 8007268:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800726a:	f001 b874 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800726e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007272:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8007276:	430b      	orrs	r3, r1
 8007278:	d158      	bne.n	800732c <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800727a:	4b55      	ldr	r3, [pc, #340]	; (80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800727c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007280:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007284:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007288:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800728c:	d03b      	beq.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800728e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007290:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007294:	d846      	bhi.n	8007324 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007298:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800729c:	d02e      	beq.n	80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800729e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072a4:	d83e      	bhi.n	8007324 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80072a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072ac:	d00b      	beq.n	80072c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80072ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072b4:	d836      	bhi.n	8007324 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80072b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d00d      	beq.n	80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80072bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072c2:	d012      	beq.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 80072c4:	e02e      	b.n	8007324 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80072c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80072ca:	4618      	mov	r0, r3
 80072cc:	f7ff faf4 	bl	80068b8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80072d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80072d4:	f001 b83f 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072d8:	f107 0318 	add.w	r3, r7, #24
 80072dc:	4618      	mov	r0, r3
 80072de:	f7ff fc51 	bl	8006b84 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80072e2:	69bb      	ldr	r3, [r7, #24]
 80072e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80072e6:	f001 b836 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80072ea:	f107 030c 	add.w	r3, r7, #12
 80072ee:	4618      	mov	r0, r3
 80072f0:	f7ff fdae 	bl	8006e50 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80072f8:	f001 b82d 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80072fc:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007300:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007302:	f001 b828 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007306:	4b32      	ldr	r3, [pc, #200]	; (80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800730e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007312:	d103      	bne.n	800731c <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8007314:	4b30      	ldr	r3, [pc, #192]	; (80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007316:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007318:	f001 b81d 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800731c:	2300      	movs	r3, #0
 800731e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007320:	f001 b819 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 8007324:	2300      	movs	r3, #0
 8007326:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007328:	f001 b815 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800732c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007330:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8007334:	430b      	orrs	r3, r1
 8007336:	d126      	bne.n	8007386 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8007338:	4b25      	ldr	r3, [pc, #148]	; (80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800733a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800733e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007342:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8007344:	4b22      	ldr	r3, [pc, #136]	; (80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800734c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007350:	d106      	bne.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8007352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007354:	2b00      	cmp	r3, #0
 8007356:	d103      	bne.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8007358:	4b1f      	ldr	r3, [pc, #124]	; (80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800735a:	637b      	str	r3, [r7, #52]	; 0x34
 800735c:	f000 bffb 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8007360:	4b1b      	ldr	r3, [pc, #108]	; (80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007368:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800736c:	d107      	bne.n	800737e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800736e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007370:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007374:	d103      	bne.n	800737e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8007376:	4b19      	ldr	r3, [pc, #100]	; (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007378:	637b      	str	r3, [r7, #52]	; 0x34
 800737a:	f000 bfec 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800737e:	2300      	movs	r3, #0
 8007380:	637b      	str	r3, [r7, #52]	; 0x34
 8007382:	f000 bfe8 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8007386:	e9d7 2300 	ldrd	r2, r3, [r7]
 800738a:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 800738e:	430b      	orrs	r3, r1
 8007390:	d164      	bne.n	800745c <HAL_RCCEx_GetPeriphCLKFreq+0x340>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8007392:	4b0f      	ldr	r3, [pc, #60]	; (80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007394:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007398:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800739c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800739e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80073a4:	d03d      	beq.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80073a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80073ac:	d852      	bhi.n	8007454 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80073ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073b4:	d014      	beq.n	80073e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 80073b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073bc:	d84a      	bhi.n	8007454 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80073be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d01f      	beq.n	8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 80073c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80073ca:	d012      	beq.n	80073f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 80073cc:	e042      	b.n	8007454 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80073ce:	bf00      	nop
 80073d0:	46020c00 	.word	0x46020c00
 80073d4:	0007a120 	.word	0x0007a120
 80073d8:	00f42400 	.word	0x00f42400
 80073dc:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80073e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80073e4:	4618      	mov	r0, r3
 80073e6:	f7ff fa67 	bl	80068b8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80073ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80073ee:	f000 bfb2 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073f2:	f107 0318 	add.w	r3, r7, #24
 80073f6:	4618      	mov	r0, r3
 80073f8:	f7ff fbc4 	bl	8006b84 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007400:	f000 bfa9 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8007404:	4bab      	ldr	r3, [pc, #684]	; (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800740c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007410:	d103      	bne.n	800741a <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8007412:	4ba9      	ldr	r3, [pc, #676]	; (80076b8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007414:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007416:	f000 bf9e 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800741a:	2300      	movs	r3, #0
 800741c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800741e:	f000 bf9a 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007422:	4ba4      	ldr	r3, [pc, #656]	; (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800742a:	2b00      	cmp	r3, #0
 800742c:	d005      	beq.n	800743a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800742e:	4ba1      	ldr	r3, [pc, #644]	; (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	0e1b      	lsrs	r3, r3, #24
 8007434:	f003 030f 	and.w	r3, r3, #15
 8007438:	e006      	b.n	8007448 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 800743a:	4b9e      	ldr	r3, [pc, #632]	; (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800743c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007440:	041b      	lsls	r3, r3, #16
 8007442:	0e1b      	lsrs	r3, r3, #24
 8007444:	f003 030f 	and.w	r3, r3, #15
 8007448:	4a9c      	ldr	r2, [pc, #624]	; (80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 800744a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800744e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007450:	f000 bf81 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 8007454:	2300      	movs	r3, #0
 8007456:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007458:	f000 bf7d 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800745c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007460:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8007464:	430b      	orrs	r3, r1
 8007466:	d175      	bne.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007468:	4b92      	ldr	r3, [pc, #584]	; (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800746a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800746e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007472:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8007474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007476:	2b00      	cmp	r3, #0
 8007478:	d15b      	bne.n	8007532 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800747a:	4b8e      	ldr	r3, [pc, #568]	; (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800747c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007480:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8007484:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8007486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007488:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800748c:	d034      	beq.n	80074f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800748e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007490:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007494:	d849      	bhi.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8007496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007498:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800749c:	d00b      	beq.n	80074b6 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 800749e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80074a4:	d841      	bhi.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 80074a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d016      	beq.n	80074da <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80074ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80074b2:	d009      	beq.n	80074c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 80074b4:	e039      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80074b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074ba:	4618      	mov	r0, r3
 80074bc:	f7ff f9fc 	bl	80068b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80074c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80074c4:	f000 bf47 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074c8:	f107 0318 	add.w	r3, r7, #24
 80074cc:	4618      	mov	r0, r3
 80074ce:	f7ff fb59 	bl	8006b84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80074d2:	69fb      	ldr	r3, [r7, #28]
 80074d4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80074d6:	f000 bf3e 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80074da:	4b76      	ldr	r3, [pc, #472]	; (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80074e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074e6:	d103      	bne.n	80074f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = HSI48_VALUE;
 80074e8:	4b73      	ldr	r3, [pc, #460]	; (80076b8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80074ea:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80074ec:	f000 bf33 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
            frequency = 0U;
 80074f0:	2300      	movs	r3, #0
 80074f2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80074f4:	f000 bf2f 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80074f8:	4b6e      	ldr	r3, [pc, #440]	; (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007500:	2b00      	cmp	r3, #0
 8007502:	d005      	beq.n	8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
 8007504:	4b6b      	ldr	r3, [pc, #428]	; (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	0e1b      	lsrs	r3, r3, #24
 800750a:	f003 030f 	and.w	r3, r3, #15
 800750e:	e006      	b.n	800751e <HAL_RCCEx_GetPeriphCLKFreq+0x402>
 8007510:	4b68      	ldr	r3, [pc, #416]	; (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007512:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007516:	041b      	lsls	r3, r3, #16
 8007518:	0e1b      	lsrs	r3, r3, #24
 800751a:	f003 030f 	and.w	r3, r3, #15
 800751e:	4a67      	ldr	r2, [pc, #412]	; (80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8007520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007524:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007526:	f000 bf16 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        default :
        {
          frequency = 0U;
 800752a:	2300      	movs	r3, #0
 800752c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800752e:	f000 bf12 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8007532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007534:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007538:	d108      	bne.n	800754c <HAL_RCCEx_GetPeriphCLKFreq+0x430>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800753a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800753e:	4618      	mov	r0, r3
 8007540:	f7ff f9ba 	bl	80068b8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8007544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007546:	637b      	str	r3, [r7, #52]	; 0x34
 8007548:	f000 bf05 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else
    {
      frequency = 0U;
 800754c:	2300      	movs	r3, #0
 800754e:	637b      	str	r3, [r7, #52]	; 0x34
 8007550:	f000 bf01 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8007554:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007558:	1e51      	subs	r1, r2, #1
 800755a:	430b      	orrs	r3, r1
 800755c:	d136      	bne.n	80075cc <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800755e:	4b55      	ldr	r3, [pc, #340]	; (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007560:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007564:	f003 0303 	and.w	r3, r3, #3
 8007568:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800756a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800756c:	2b00      	cmp	r3, #0
 800756e:	d104      	bne.n	800757a <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8007570:	f7fe fb34 	bl	8005bdc <HAL_RCC_GetPCLK2Freq>
 8007574:	6378      	str	r0, [r7, #52]	; 0x34
 8007576:	f000 beee 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800757a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800757c:	2b01      	cmp	r3, #1
 800757e:	d104      	bne.n	800758a <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007580:	f7fe f9f6 	bl	8005970 <HAL_RCC_GetSysClockFreq>
 8007584:	6378      	str	r0, [r7, #52]	; 0x34
 8007586:	f000 bee6 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800758a:	4b4a      	ldr	r3, [pc, #296]	; (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007592:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007596:	d106      	bne.n	80075a6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8007598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759a:	2b02      	cmp	r3, #2
 800759c:	d103      	bne.n	80075a6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
    {
      frequency = HSI_VALUE;
 800759e:	4b48      	ldr	r3, [pc, #288]	; (80076c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80075a0:	637b      	str	r3, [r7, #52]	; 0x34
 80075a2:	f000 bed8 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80075a6:	4b43      	ldr	r3, [pc, #268]	; (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80075a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80075ac:	f003 0302 	and.w	r3, r3, #2
 80075b0:	2b02      	cmp	r3, #2
 80075b2:	d107      	bne.n	80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 80075b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b6:	2b03      	cmp	r3, #3
 80075b8:	d104      	bne.n	80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
    {
      frequency = LSE_VALUE;
 80075ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075be:	637b      	str	r3, [r7, #52]	; 0x34
 80075c0:	f000 bec9 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 80075c4:	2300      	movs	r3, #0
 80075c6:	637b      	str	r3, [r7, #52]	; 0x34
 80075c8:	f000 bec5 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 80075cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075d0:	1e91      	subs	r1, r2, #2
 80075d2:	430b      	orrs	r3, r1
 80075d4:	d136      	bne.n	8007644 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80075d6:	4b37      	ldr	r3, [pc, #220]	; (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80075d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80075dc:	f003 030c 	and.w	r3, r3, #12
 80075e0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80075e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d104      	bne.n	80075f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80075e8:	f7fe fae4 	bl	8005bb4 <HAL_RCC_GetPCLK1Freq>
 80075ec:	6378      	str	r0, [r7, #52]	; 0x34
 80075ee:	f000 beb2 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 80075f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f4:	2b04      	cmp	r3, #4
 80075f6:	d104      	bne.n	8007602 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80075f8:	f7fe f9ba 	bl	8005970 <HAL_RCC_GetSysClockFreq>
 80075fc:	6378      	str	r0, [r7, #52]	; 0x34
 80075fe:	f000 beaa 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8007602:	4b2c      	ldr	r3, [pc, #176]	; (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800760a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800760e:	d106      	bne.n	800761e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 8007610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007612:	2b08      	cmp	r3, #8
 8007614:	d103      	bne.n	800761e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
    {
      frequency = HSI_VALUE;
 8007616:	4b2a      	ldr	r3, [pc, #168]	; (80076c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8007618:	637b      	str	r3, [r7, #52]	; 0x34
 800761a:	f000 be9c 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800761e:	4b25      	ldr	r3, [pc, #148]	; (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007620:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007624:	f003 0302 	and.w	r3, r3, #2
 8007628:	2b02      	cmp	r3, #2
 800762a:	d107      	bne.n	800763c <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 800762c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800762e:	2b0c      	cmp	r3, #12
 8007630:	d104      	bne.n	800763c <HAL_RCCEx_GetPeriphCLKFreq+0x520>
    {
      frequency = LSE_VALUE;
 8007632:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007636:	637b      	str	r3, [r7, #52]	; 0x34
 8007638:	f000 be8d 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800763c:	2300      	movs	r3, #0
 800763e:	637b      	str	r3, [r7, #52]	; 0x34
 8007640:	f000 be89 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8007644:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007648:	1f11      	subs	r1, r2, #4
 800764a:	430b      	orrs	r3, r1
 800764c:	d13e      	bne.n	80076cc <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800764e:	4b19      	ldr	r3, [pc, #100]	; (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007650:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007654:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007658:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800765a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800765c:	2b00      	cmp	r3, #0
 800765e:	d104      	bne.n	800766a <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007660:	f7fe faa8 	bl	8005bb4 <HAL_RCC_GetPCLK1Freq>
 8007664:	6378      	str	r0, [r7, #52]	; 0x34
 8007666:	f000 be76 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800766a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800766c:	2b10      	cmp	r3, #16
 800766e:	d104      	bne.n	800767a <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007670:	f7fe f97e 	bl	8005970 <HAL_RCC_GetSysClockFreq>
 8007674:	6378      	str	r0, [r7, #52]	; 0x34
 8007676:	f000 be6e 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800767a:	4b0e      	ldr	r3, [pc, #56]	; (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007682:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007686:	d106      	bne.n	8007696 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8007688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800768a:	2b20      	cmp	r3, #32
 800768c:	d103      	bne.n	8007696 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 800768e:	4b0c      	ldr	r3, [pc, #48]	; (80076c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8007690:	637b      	str	r3, [r7, #52]	; 0x34
 8007692:	f000 be60 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8007696:	4b07      	ldr	r3, [pc, #28]	; (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007698:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800769c:	f003 0302 	and.w	r3, r3, #2
 80076a0:	2b02      	cmp	r3, #2
 80076a2:	d10f      	bne.n	80076c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80076a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a6:	2b30      	cmp	r3, #48	; 0x30
 80076a8:	d10c      	bne.n	80076c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = LSE_VALUE;
 80076aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076ae:	637b      	str	r3, [r7, #52]	; 0x34
 80076b0:	f000 be51 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 80076b4:	46020c00 	.word	0x46020c00
 80076b8:	02dc6c00 	.word	0x02dc6c00
 80076bc:	0800a9f8 	.word	0x0800a9f8
 80076c0:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 80076c4:	2300      	movs	r3, #0
 80076c6:	637b      	str	r3, [r7, #52]	; 0x34
 80076c8:	f000 be45 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 80076cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076d0:	f1a2 0108 	sub.w	r1, r2, #8
 80076d4:	430b      	orrs	r3, r1
 80076d6:	d136      	bne.n	8007746 <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80076d8:	4b9f      	ldr	r3, [pc, #636]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80076da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80076de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80076e2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80076e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d104      	bne.n	80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80076ea:	f7fe fa63 	bl	8005bb4 <HAL_RCC_GetPCLK1Freq>
 80076ee:	6378      	str	r0, [r7, #52]	; 0x34
 80076f0:	f000 be31 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 80076f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f6:	2b40      	cmp	r3, #64	; 0x40
 80076f8:	d104      	bne.n	8007704 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80076fa:	f7fe f939 	bl	8005970 <HAL_RCC_GetSysClockFreq>
 80076fe:	6378      	str	r0, [r7, #52]	; 0x34
 8007700:	f000 be29 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8007704:	4b94      	ldr	r3, [pc, #592]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800770c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007710:	d106      	bne.n	8007720 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
 8007712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007714:	2b80      	cmp	r3, #128	; 0x80
 8007716:	d103      	bne.n	8007720 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      frequency = HSI_VALUE;
 8007718:	4b90      	ldr	r3, [pc, #576]	; (800795c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800771a:	637b      	str	r3, [r7, #52]	; 0x34
 800771c:	f000 be1b 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8007720:	4b8d      	ldr	r3, [pc, #564]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007722:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007726:	f003 0302 	and.w	r3, r3, #2
 800772a:	2b02      	cmp	r3, #2
 800772c:	d107      	bne.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0x622>
 800772e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007730:	2bc0      	cmp	r3, #192	; 0xc0
 8007732:	d104      	bne.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = LSE_VALUE;
 8007734:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007738:	637b      	str	r3, [r7, #52]	; 0x34
 800773a:	f000 be0c 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800773e:	2300      	movs	r3, #0
 8007740:	637b      	str	r3, [r7, #52]	; 0x34
 8007742:	f000 be08 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8007746:	e9d7 2300 	ldrd	r2, r3, [r7]
 800774a:	f1a2 0110 	sub.w	r1, r2, #16
 800774e:	430b      	orrs	r3, r1
 8007750:	d139      	bne.n	80077c6 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007752:	4b81      	ldr	r3, [pc, #516]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007758:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800775c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800775e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007760:	2b00      	cmp	r3, #0
 8007762:	d104      	bne.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007764:	f7fe fa26 	bl	8005bb4 <HAL_RCC_GetPCLK1Freq>
 8007768:	6378      	str	r0, [r7, #52]	; 0x34
 800776a:	f000 bdf4 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800776e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007770:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007774:	d104      	bne.n	8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007776:	f7fe f8fb 	bl	8005970 <HAL_RCC_GetSysClockFreq>
 800777a:	6378      	str	r0, [r7, #52]	; 0x34
 800777c:	f000 bdeb 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8007780:	4b75      	ldr	r3, [pc, #468]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800778c:	d107      	bne.n	800779e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 800778e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007790:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007794:	d103      	bne.n	800779e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
    {
      frequency = HSI_VALUE;
 8007796:	4b71      	ldr	r3, [pc, #452]	; (800795c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007798:	637b      	str	r3, [r7, #52]	; 0x34
 800779a:	f000 bddc 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800779e:	4b6e      	ldr	r3, [pc, #440]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80077a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80077a4:	f003 0302 	and.w	r3, r3, #2
 80077a8:	2b02      	cmp	r3, #2
 80077aa:	d108      	bne.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 80077ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077b2:	d104      	bne.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = LSE_VALUE;
 80077b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077b8:	637b      	str	r3, [r7, #52]	; 0x34
 80077ba:	f000 bdcc 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 80077be:	2300      	movs	r3, #0
 80077c0:	637b      	str	r3, [r7, #52]	; 0x34
 80077c2:	f000 bdc8 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 80077c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077ca:	f1a2 0120 	sub.w	r1, r2, #32
 80077ce:	430b      	orrs	r3, r1
 80077d0:	d158      	bne.n	8007884 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80077d2:	4b61      	ldr	r3, [pc, #388]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80077d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80077d8:	f003 0307 	and.w	r3, r3, #7
 80077dc:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80077de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d104      	bne.n	80077ee <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 80077e4:	f7fe fa0e 	bl	8005c04 <HAL_RCC_GetPCLK3Freq>
 80077e8:	6378      	str	r0, [r7, #52]	; 0x34
 80077ea:	f000 bdb4 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80077ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	d104      	bne.n	80077fe <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80077f4:	f7fe f8bc 	bl	8005970 <HAL_RCC_GetSysClockFreq>
 80077f8:	6378      	str	r0, [r7, #52]	; 0x34
 80077fa:	f000 bdac 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80077fe:	4b56      	ldr	r3, [pc, #344]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007806:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800780a:	d106      	bne.n	800781a <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
 800780c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800780e:	2b02      	cmp	r3, #2
 8007810:	d103      	bne.n	800781a <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
    {
      frequency = HSI_VALUE;
 8007812:	4b52      	ldr	r3, [pc, #328]	; (800795c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007814:	637b      	str	r3, [r7, #52]	; 0x34
 8007816:	f000 bd9e 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800781a:	4b4f      	ldr	r3, [pc, #316]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800781c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007820:	f003 0302 	and.w	r3, r3, #2
 8007824:	2b02      	cmp	r3, #2
 8007826:	d107      	bne.n	8007838 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
 8007828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782a:	2b03      	cmp	r3, #3
 800782c:	d104      	bne.n	8007838 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
    {
      frequency = LSE_VALUE;
 800782e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007832:	637b      	str	r3, [r7, #52]	; 0x34
 8007834:	f000 bd8f 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8007838:	4b47      	ldr	r3, [pc, #284]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f003 0320 	and.w	r3, r3, #32
 8007840:	2b20      	cmp	r3, #32
 8007842:	d11b      	bne.n	800787c <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8007844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007846:	2b04      	cmp	r3, #4
 8007848:	d118      	bne.n	800787c <HAL_RCCEx_GetPeriphCLKFreq+0x760>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800784a:	4b43      	ldr	r3, [pc, #268]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007852:	2b00      	cmp	r3, #0
 8007854:	d005      	beq.n	8007862 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8007856:	4b40      	ldr	r3, [pc, #256]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	0e1b      	lsrs	r3, r3, #24
 800785c:	f003 030f 	and.w	r3, r3, #15
 8007860:	e006      	b.n	8007870 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 8007862:	4b3d      	ldr	r3, [pc, #244]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007864:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007868:	041b      	lsls	r3, r3, #16
 800786a:	0e1b      	lsrs	r3, r3, #24
 800786c:	f003 030f 	and.w	r3, r3, #15
 8007870:	4a3b      	ldr	r2, [pc, #236]	; (8007960 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007876:	637b      	str	r3, [r7, #52]	; 0x34
 8007878:	f000 bd6d 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800787c:	2300      	movs	r3, #0
 800787e:	637b      	str	r3, [r7, #52]	; 0x34
 8007880:	f000 bd69 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8007884:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007888:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800788c:	430b      	orrs	r3, r1
 800788e:	d169      	bne.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8007890:	4b31      	ldr	r3, [pc, #196]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007892:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007896:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800789a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800789c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800789e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078a2:	d104      	bne.n	80078ae <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80078a4:	f7fe f864 	bl	8005970 <HAL_RCC_GetSysClockFreq>
 80078a8:	6378      	str	r0, [r7, #52]	; 0x34
 80078aa:	f000 bd54 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 80078ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078b4:	d108      	bne.n	80078c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078b6:	f107 0318 	add.w	r3, r7, #24
 80078ba:	4618      	mov	r0, r3
 80078bc:	f7ff f962 	bl	8006b84 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 80078c0:	6a3b      	ldr	r3, [r7, #32]
 80078c2:	637b      	str	r3, [r7, #52]	; 0x34
 80078c4:	f000 bd47 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80078c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d104      	bne.n	80078d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 80078ce:	f7fe f957 	bl	8005b80 <HAL_RCC_GetHCLKFreq>
 80078d2:	6378      	str	r0, [r7, #52]	; 0x34
 80078d4:	f000 bd3f 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 80078d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078da:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80078de:	d118      	bne.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 80078e0:	4b1d      	ldr	r3, [pc, #116]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d005      	beq.n	80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 80078ec:	4b1a      	ldr	r3, [pc, #104]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	0f1b      	lsrs	r3, r3, #28
 80078f2:	f003 030f 	and.w	r3, r3, #15
 80078f6:	e006      	b.n	8007906 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 80078f8:	4b17      	ldr	r3, [pc, #92]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80078fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80078fe:	041b      	lsls	r3, r3, #16
 8007900:	0f1b      	lsrs	r3, r3, #28
 8007902:	f003 030f 	and.w	r3, r3, #15
 8007906:	4a16      	ldr	r2, [pc, #88]	; (8007960 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800790c:	637b      	str	r3, [r7, #52]	; 0x34
 800790e:	f000 bd22 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8007912:	4b11      	ldr	r3, [pc, #68]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800791a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800791e:	d107      	bne.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 8007920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007922:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007926:	d103      	bne.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
    {
      frequency = HSE_VALUE;
 8007928:	4b0c      	ldr	r3, [pc, #48]	; (800795c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800792a:	637b      	str	r3, [r7, #52]	; 0x34
 800792c:	f000 bd13 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8007930:	4b09      	ldr	r3, [pc, #36]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007938:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800793c:	d107      	bne.n	800794e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 800793e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007940:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007944:	d103      	bne.n	800794e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      frequency = HSI_VALUE;
 8007946:	4b05      	ldr	r3, [pc, #20]	; (800795c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007948:	637b      	str	r3, [r7, #52]	; 0x34
 800794a:	f000 bd04 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800794e:	2300      	movs	r3, #0
 8007950:	637b      	str	r3, [r7, #52]	; 0x34
 8007952:	f000 bd00 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8007956:	bf00      	nop
 8007958:	46020c00 	.word	0x46020c00
 800795c:	00f42400 	.word	0x00f42400
 8007960:	0800a9f8 	.word	0x0800a9f8
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8007964:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007968:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800796c:	430b      	orrs	r3, r1
 800796e:	d14e      	bne.n	8007a0e <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8007970:	4ba8      	ldr	r3, [pc, #672]	; (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007972:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007976:	f003 0307 	and.w	r3, r3, #7
 800797a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800797c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800797e:	2b04      	cmp	r3, #4
 8007980:	d841      	bhi.n	8007a06 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8007982:	a201      	add	r2, pc, #4	; (adr r2, 8007988 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8007984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007988:	080079c1 	.word	0x080079c1
 800798c:	0800799d 	.word	0x0800799d
 8007990:	080079af 	.word	0x080079af
 8007994:	080079cb 	.word	0x080079cb
 8007998:	080079d5 	.word	0x080079d5
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800799c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80079a0:	4618      	mov	r0, r3
 80079a2:	f7fe ff89 	bl	80068b8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80079a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80079aa:	f000 bcd4 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079ae:	f107 030c 	add.w	r3, r7, #12
 80079b2:	4618      	mov	r0, r3
 80079b4:	f7ff fa4c 	bl	8006e50 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80079bc:	f000 bccb 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80079c0:	f7fe f8de 	bl	8005b80 <HAL_RCC_GetHCLKFreq>
 80079c4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80079c6:	f000 bcc6 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80079ca:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80079ce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80079d0:	f000 bcc1 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80079d4:	4b8f      	ldr	r3, [pc, #572]	; (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d005      	beq.n	80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 80079e0:	4b8c      	ldr	r3, [pc, #560]	; (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	0e1b      	lsrs	r3, r3, #24
 80079e6:	f003 030f 	and.w	r3, r3, #15
 80079ea:	e006      	b.n	80079fa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 80079ec:	4b89      	ldr	r3, [pc, #548]	; (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80079ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80079f2:	041b      	lsls	r3, r3, #16
 80079f4:	0e1b      	lsrs	r3, r3, #24
 80079f6:	f003 030f 	and.w	r3, r3, #15
 80079fa:	4a87      	ldr	r2, [pc, #540]	; (8007c18 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80079fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a00:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a02:	f000 bca8 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8007a06:	2300      	movs	r3, #0
 8007a08:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a0a:	f000 bca4 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8007a0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a12:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 8007a16:	430b      	orrs	r3, r1
 8007a18:	d15d      	bne.n	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8007a1a:	4b7e      	ldr	r3, [pc, #504]	; (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007a1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007a20:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8007a24:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a28:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007a2c:	d036      	beq.n	8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8007a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a30:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007a34:	d84b      	bhi.n	8007ace <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8007a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a38:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007a3c:	d029      	beq.n	8007a92 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 8007a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a40:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007a44:	d843      	bhi.n	8007ace <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8007a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a4c:	d013      	beq.n	8007a76 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8007a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a54:	d83b      	bhi.n	8007ace <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8007a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d015      	beq.n	8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
 8007a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a62:	d134      	bne.n	8007ace <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f7fe ff25 	bl	80068b8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a70:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a72:	f000 bc70 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a76:	f107 030c 	add.w	r3, r7, #12
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f7ff f9e8 	bl	8006e50 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a84:	f000 bc67 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007a88:	f7fe f87a 	bl	8005b80 <HAL_RCC_GetHCLKFreq>
 8007a8c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007a8e:	f000 bc62 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007a92:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007a96:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a98:	f000 bc5d 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007a9c:	4b5d      	ldr	r3, [pc, #372]	; (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007a9e:	689b      	ldr	r3, [r3, #8]
 8007aa0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d005      	beq.n	8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8007aa8:	4b5a      	ldr	r3, [pc, #360]	; (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007aaa:	689b      	ldr	r3, [r3, #8]
 8007aac:	0e1b      	lsrs	r3, r3, #24
 8007aae:	f003 030f 	and.w	r3, r3, #15
 8007ab2:	e006      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8007ab4:	4b57      	ldr	r3, [pc, #348]	; (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007ab6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007aba:	041b      	lsls	r3, r3, #16
 8007abc:	0e1b      	lsrs	r3, r3, #24
 8007abe:	f003 030f 	and.w	r3, r3, #15
 8007ac2:	4a55      	ldr	r2, [pc, #340]	; (8007c18 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ac8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007aca:	f000 bc44 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007ad2:	f000 bc40 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8007ad6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ada:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8007ade:	430b      	orrs	r3, r1
 8007ae0:	d14a      	bne.n	8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007ae2:	4b4c      	ldr	r3, [pc, #304]	; (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007ae8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007aec:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8007aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d104      	bne.n	8007afe <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007af4:	f7fe f85e 	bl	8005bb4 <HAL_RCC_GetPCLK1Freq>
 8007af8:	6378      	str	r0, [r7, #52]	; 0x34
 8007afa:	f000 bc2c 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8007afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b04:	d104      	bne.n	8007b10 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007b06:	f7fd ff33 	bl	8005970 <HAL_RCC_GetSysClockFreq>
 8007b0a:	6378      	str	r0, [r7, #52]	; 0x34
 8007b0c:	f000 bc23 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8007b10:	4b40      	ldr	r3, [pc, #256]	; (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b1c:	d107      	bne.n	8007b2e <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
 8007b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b24:	d103      	bne.n	8007b2e <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
    {
      frequency = HSI_VALUE;
 8007b26:	4b3d      	ldr	r3, [pc, #244]	; (8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007b28:	637b      	str	r3, [r7, #52]	; 0x34
 8007b2a:	f000 bc14 	b.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8007b2e:	4b39      	ldr	r3, [pc, #228]	; (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f003 0320 	and.w	r3, r3, #32
 8007b36:	2b20      	cmp	r3, #32
 8007b38:	d11b      	bne.n	8007b72 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
 8007b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b40:	d117      	bne.n	8007b72 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007b42:	4b34      	ldr	r3, [pc, #208]	; (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007b44:	689b      	ldr	r3, [r3, #8]
 8007b46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d005      	beq.n	8007b5a <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 8007b4e:	4b31      	ldr	r3, [pc, #196]	; (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	0e1b      	lsrs	r3, r3, #24
 8007b54:	f003 030f 	and.w	r3, r3, #15
 8007b58:	e006      	b.n	8007b68 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8007b5a:	4b2e      	ldr	r3, [pc, #184]	; (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007b5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007b60:	041b      	lsls	r3, r3, #16
 8007b62:	0e1b      	lsrs	r3, r3, #24
 8007b64:	f003 030f 	and.w	r3, r3, #15
 8007b68:	4a2b      	ldr	r2, [pc, #172]	; (8007c18 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b6e:	637b      	str	r3, [r7, #52]	; 0x34
 8007b70:	e3f1      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8007b72:	2300      	movs	r3, #0
 8007b74:	637b      	str	r3, [r7, #52]	; 0x34
 8007b76:	e3ee      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8007b78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b7c:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 8007b80:	430b      	orrs	r3, r1
 8007b82:	d14d      	bne.n	8007c20 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007b84:	4b23      	ldr	r3, [pc, #140]	; (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007b8a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007b8e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8007b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d103      	bne.n	8007b9e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007b96:	f7fe f80d 	bl	8005bb4 <HAL_RCC_GetPCLK1Freq>
 8007b9a:	6378      	str	r0, [r7, #52]	; 0x34
 8007b9c:	e3db      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8007b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ba4:	d103      	bne.n	8007bae <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007ba6:	f7fd fee3 	bl	8005970 <HAL_RCC_GetSysClockFreq>
 8007baa:	6378      	str	r0, [r7, #52]	; 0x34
 8007bac:	e3d3      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8007bae:	4b19      	ldr	r3, [pc, #100]	; (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bba:	d106      	bne.n	8007bca <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
 8007bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bc2:	d102      	bne.n	8007bca <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
    {
      frequency = HSI_VALUE;
 8007bc4:	4b15      	ldr	r3, [pc, #84]	; (8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007bc6:	637b      	str	r3, [r7, #52]	; 0x34
 8007bc8:	e3c5      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8007bca:	4b12      	ldr	r3, [pc, #72]	; (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f003 0320 	and.w	r3, r3, #32
 8007bd2:	2b20      	cmp	r3, #32
 8007bd4:	d11b      	bne.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 8007bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007bdc:	d117      	bne.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007bde:	4b0d      	ldr	r3, [pc, #52]	; (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d005      	beq.n	8007bf6 <HAL_RCCEx_GetPeriphCLKFreq+0xada>
 8007bea:	4b0a      	ldr	r3, [pc, #40]	; (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	0e1b      	lsrs	r3, r3, #24
 8007bf0:	f003 030f 	and.w	r3, r3, #15
 8007bf4:	e006      	b.n	8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8007bf6:	4b07      	ldr	r3, [pc, #28]	; (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007bf8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007bfc:	041b      	lsls	r3, r3, #16
 8007bfe:	0e1b      	lsrs	r3, r3, #24
 8007c00:	f003 030f 	and.w	r3, r3, #15
 8007c04:	4a04      	ldr	r2, [pc, #16]	; (8007c18 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c0a:	637b      	str	r3, [r7, #52]	; 0x34
 8007c0c:	e3a3      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	637b      	str	r3, [r7, #52]	; 0x34
 8007c12:	e3a0      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8007c14:	46020c00 	.word	0x46020c00
 8007c18:	0800a9f8 	.word	0x0800a9f8
 8007c1c:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8007c20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c24:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8007c28:	430b      	orrs	r3, r1
 8007c2a:	d148      	bne.n	8007cbe <HAL_RCCEx_GetPeriphCLKFreq+0xba2>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007c2c:	4b9d      	ldr	r3, [pc, #628]	; (8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007c2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007c32:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007c36:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c3a:	2bc0      	cmp	r3, #192	; 0xc0
 8007c3c:	d024      	beq.n	8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8007c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c40:	2bc0      	cmp	r3, #192	; 0xc0
 8007c42:	d839      	bhi.n	8007cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 8007c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c46:	2b80      	cmp	r3, #128	; 0x80
 8007c48:	d00d      	beq.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 8007c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c4c:	2b80      	cmp	r3, #128	; 0x80
 8007c4e:	d833      	bhi.n	8007cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 8007c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d003      	beq.n	8007c5e <HAL_RCCEx_GetPeriphCLKFreq+0xb42>
 8007c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c58:	2b40      	cmp	r3, #64	; 0x40
 8007c5a:	d011      	beq.n	8007c80 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8007c5c:	e02c      	b.n	8007cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8007c5e:	f7fd ffd1 	bl	8005c04 <HAL_RCC_GetPCLK3Freq>
 8007c62:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007c64:	e377      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007c66:	4b8f      	ldr	r3, [pc, #572]	; (8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c72:	d102      	bne.n	8007c7a <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
        {
          frequency = HSI_VALUE;
 8007c74:	4b8c      	ldr	r3, [pc, #560]	; (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8007c76:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007c78:	e36d      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c7e:	e36a      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8007c80:	f7fd fe76 	bl	8005970 <HAL_RCC_GetSysClockFreq>
 8007c84:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007c86:	e366      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8007c88:	4b86      	ldr	r3, [pc, #536]	; (8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007c8a:	689b      	ldr	r3, [r3, #8]
 8007c8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d005      	beq.n	8007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 8007c94:	4b83      	ldr	r3, [pc, #524]	; (8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007c96:	689b      	ldr	r3, [r3, #8]
 8007c98:	0f1b      	lsrs	r3, r3, #28
 8007c9a:	f003 030f 	and.w	r3, r3, #15
 8007c9e:	e006      	b.n	8007cae <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
 8007ca0:	4b80      	ldr	r3, [pc, #512]	; (8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007ca2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007ca6:	041b      	lsls	r3, r3, #16
 8007ca8:	0f1b      	lsrs	r3, r3, #28
 8007caa:	f003 030f 	and.w	r3, r3, #15
 8007cae:	4a7f      	ldr	r2, [pc, #508]	; (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8007cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cb4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007cb6:	e34e      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      default:
      {
        frequency = 0U;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007cbc:	e34b      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8007cbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cc2:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 8007cc6:	430b      	orrs	r3, r1
 8007cc8:	d147      	bne.n	8007d5a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8007cca:	4b76      	ldr	r3, [pc, #472]	; (8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007ccc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007cd0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007cd4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8007cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d103      	bne.n	8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007cdc:	f7fd ff6a 	bl	8005bb4 <HAL_RCC_GetPCLK1Freq>
 8007ce0:	6378      	str	r0, [r7, #52]	; 0x34
 8007ce2:	e338      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8007ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007cea:	d103      	bne.n	8007cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007cec:	f7fd fe40 	bl	8005970 <HAL_RCC_GetSysClockFreq>
 8007cf0:	6378      	str	r0, [r7, #52]	; 0x34
 8007cf2:	e330      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8007cf4:	4b6b      	ldr	r3, [pc, #428]	; (8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d00:	d106      	bne.n	8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 8007d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d08:	d102      	bne.n	8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HSI_VALUE;
 8007d0a:	4b67      	ldr	r3, [pc, #412]	; (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8007d0c:	637b      	str	r3, [r7, #52]	; 0x34
 8007d0e:	e322      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8007d10:	4b64      	ldr	r3, [pc, #400]	; (8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f003 0320 	and.w	r3, r3, #32
 8007d18:	2b20      	cmp	r3, #32
 8007d1a:	d11b      	bne.n	8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
 8007d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d1e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007d22:	d117      	bne.n	8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007d24:	4b5f      	ldr	r3, [pc, #380]	; (8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007d26:	689b      	ldr	r3, [r3, #8]
 8007d28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d005      	beq.n	8007d3c <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 8007d30:	4b5c      	ldr	r3, [pc, #368]	; (8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	0e1b      	lsrs	r3, r3, #24
 8007d36:	f003 030f 	and.w	r3, r3, #15
 8007d3a:	e006      	b.n	8007d4a <HAL_RCCEx_GetPeriphCLKFreq+0xc2e>
 8007d3c:	4b59      	ldr	r3, [pc, #356]	; (8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007d3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007d42:	041b      	lsls	r3, r3, #16
 8007d44:	0e1b      	lsrs	r3, r3, #24
 8007d46:	f003 030f 	and.w	r3, r3, #15
 8007d4a:	4a58      	ldr	r2, [pc, #352]	; (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8007d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d50:	637b      	str	r3, [r7, #52]	; 0x34
 8007d52:	e300      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8007d54:	2300      	movs	r3, #0
 8007d56:	637b      	str	r3, [r7, #52]	; 0x34
 8007d58:	e2fd      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8007d5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d5e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8007d62:	430b      	orrs	r3, r1
 8007d64:	d15b      	bne.n	8007e1e <HAL_RCCEx_GetPeriphCLKFreq+0xd02>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8007d66:	4b4f      	ldr	r3, [pc, #316]	; (8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007d68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007d6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d70:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8007d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d117      	bne.n	8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0xc8c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007d78:	4b4a      	ldr	r3, [pc, #296]	; (8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007d7a:	689b      	ldr	r3, [r3, #8]
 8007d7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d005      	beq.n	8007d90 <HAL_RCCEx_GetPeriphCLKFreq+0xc74>
 8007d84:	4b47      	ldr	r3, [pc, #284]	; (8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	0e1b      	lsrs	r3, r3, #24
 8007d8a:	f003 030f 	and.w	r3, r3, #15
 8007d8e:	e006      	b.n	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0xc82>
 8007d90:	4b44      	ldr	r3, [pc, #272]	; (8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007d92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007d96:	041b      	lsls	r3, r3, #16
 8007d98:	0e1b      	lsrs	r3, r3, #24
 8007d9a:	f003 030f 	and.w	r3, r3, #15
 8007d9e:	4a43      	ldr	r2, [pc, #268]	; (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8007da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007da4:	637b      	str	r3, [r7, #52]	; 0x34
 8007da6:	e2d6      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8007da8:	4b3e      	ldr	r3, [pc, #248]	; (8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007daa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007dae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007db2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007db6:	d112      	bne.n	8007dde <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 8007db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dbe:	d10e      	bne.n	8007dde <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007dc0:	4b38      	ldr	r3, [pc, #224]	; (8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007dc2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007dce:	d102      	bne.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
      {
        frequency = LSI_VALUE / 128U;
 8007dd0:	23fa      	movs	r3, #250	; 0xfa
 8007dd2:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007dd4:	e2bf      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8007dd6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007dda:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007ddc:	e2bb      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8007dde:	4b31      	ldr	r3, [pc, #196]	; (8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007de6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dea:	d106      	bne.n	8007dfa <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
 8007dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007df2:	d102      	bne.n	8007dfa <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
    {
      frequency = HSI_VALUE;
 8007df4:	4b2c      	ldr	r3, [pc, #176]	; (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8007df6:	637b      	str	r3, [r7, #52]	; 0x34
 8007df8:	e2ad      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8007dfa:	4b2a      	ldr	r3, [pc, #168]	; (8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007dfc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007e00:	f003 0302 	and.w	r3, r3, #2
 8007e04:	2b02      	cmp	r3, #2
 8007e06:	d107      	bne.n	8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
 8007e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e0e:	d103      	bne.n	8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
    {
      frequency = LSE_VALUE;
 8007e10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e14:	637b      	str	r3, [r7, #52]	; 0x34
 8007e16:	e29e      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	637b      	str	r3, [r7, #52]	; 0x34
 8007e1c:	e29b      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8007e1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e22:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8007e26:	430b      	orrs	r3, r1
 8007e28:	d162      	bne.n	8007ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007e2a:	4b1e      	ldr	r3, [pc, #120]	; (8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007e2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007e30:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007e34:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8007e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d117      	bne.n	8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0xd50>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007e3c:	4b19      	ldr	r3, [pc, #100]	; (8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d005      	beq.n	8007e54 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 8007e48:	4b16      	ldr	r3, [pc, #88]	; (8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007e4a:	689b      	ldr	r3, [r3, #8]
 8007e4c:	0e1b      	lsrs	r3, r3, #24
 8007e4e:	f003 030f 	and.w	r3, r3, #15
 8007e52:	e006      	b.n	8007e62 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8007e54:	4b13      	ldr	r3, [pc, #76]	; (8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007e56:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007e5a:	041b      	lsls	r3, r3, #16
 8007e5c:	0e1b      	lsrs	r3, r3, #24
 8007e5e:	f003 030f 	and.w	r3, r3, #15
 8007e62:	4a12      	ldr	r2, [pc, #72]	; (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8007e64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e68:	637b      	str	r3, [r7, #52]	; 0x34
 8007e6a:	e274      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8007e6c:	4b0d      	ldr	r3, [pc, #52]	; (8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007e6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007e72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e7a:	d119      	bne.n	8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
 8007e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e82:	d115      	bne.n	8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007e84:	4b07      	ldr	r3, [pc, #28]	; (8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007e86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e92:	d102      	bne.n	8007e9a <HAL_RCCEx_GetPeriphCLKFreq+0xd7e>
      {
        frequency = LSI_VALUE / 128U;
 8007e94:	23fa      	movs	r3, #250	; 0xfa
 8007e96:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007e98:	e25d      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8007e9a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007e9e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007ea0:	e259      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8007ea2:	bf00      	nop
 8007ea4:	46020c00 	.word	0x46020c00
 8007ea8:	00f42400 	.word	0x00f42400
 8007eac:	0800a9f8 	.word	0x0800a9f8
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8007eb0:	4b9d      	ldr	r3, [pc, #628]	; (8008128 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007eb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ebc:	d106      	bne.n	8007ecc <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 8007ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ec4:	d102      	bne.n	8007ecc <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
    {
      frequency = HSI_VALUE;
 8007ec6:	4b99      	ldr	r3, [pc, #612]	; (800812c <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8007ec8:	637b      	str	r3, [r7, #52]	; 0x34
 8007eca:	e244      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8007ecc:	4b96      	ldr	r3, [pc, #600]	; (8008128 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007ece:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007ed2:	f003 0302 	and.w	r3, r3, #2
 8007ed6:	2b02      	cmp	r3, #2
 8007ed8:	d107      	bne.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
 8007eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007edc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ee0:	d103      	bne.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
    {
      frequency = LSE_VALUE;
 8007ee2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ee6:	637b      	str	r3, [r7, #52]	; 0x34
 8007ee8:	e235      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8007eea:	2300      	movs	r3, #0
 8007eec:	637b      	str	r3, [r7, #52]	; 0x34
 8007eee:	e232      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8007ef0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ef4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8007ef8:	430b      	orrs	r3, r1
 8007efa:	d147      	bne.n	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0xe70>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007efc:	4b8a      	ldr	r3, [pc, #552]	; (8008128 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007efe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007f02:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007f06:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8007f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d103      	bne.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007f0e:	f7fd fe51 	bl	8005bb4 <HAL_RCC_GetPCLK1Freq>
 8007f12:	6378      	str	r0, [r7, #52]	; 0x34
 8007f14:	e21f      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8007f16:	4b84      	ldr	r3, [pc, #528]	; (8008128 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007f18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f24:	d112      	bne.n	8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 8007f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f28:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007f2c:	d10e      	bne.n	8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007f2e:	4b7e      	ldr	r3, [pc, #504]	; (8008128 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007f30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f3c:	d102      	bne.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
      {
        frequency = LSI_VALUE / 128U;
 8007f3e:	23fa      	movs	r3, #250	; 0xfa
 8007f40:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007f42:	e208      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8007f44:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007f48:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007f4a:	e204      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8007f4c:	4b76      	ldr	r3, [pc, #472]	; (8008128 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f58:	d106      	bne.n	8007f68 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
 8007f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f5c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007f60:	d102      	bne.n	8007f68 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
    {
      frequency = HSI_VALUE;
 8007f62:	4b72      	ldr	r3, [pc, #456]	; (800812c <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8007f64:	637b      	str	r3, [r7, #52]	; 0x34
 8007f66:	e1f6      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8007f68:	4b6f      	ldr	r3, [pc, #444]	; (8008128 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007f6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f6e:	f003 0302 	and.w	r3, r3, #2
 8007f72:	2b02      	cmp	r3, #2
 8007f74:	d107      	bne.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8007f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f78:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007f7c:	d103      	bne.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    {
      frequency = LSE_VALUE;
 8007f7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f82:	637b      	str	r3, [r7, #52]	; 0x34
 8007f84:	e1e7      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8007f86:	2300      	movs	r3, #0
 8007f88:	637b      	str	r3, [r7, #52]	; 0x34
 8007f8a:	e1e4      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8007f8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f90:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8007f94:	430b      	orrs	r3, r1
 8007f96:	d12d      	bne.n	8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8007f98:	4b63      	ldr	r3, [pc, #396]	; (8008128 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007f9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007f9e:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8007fa2:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8007fa4:	4b60      	ldr	r3, [pc, #384]	; (8008128 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007fb0:	d105      	bne.n	8007fbe <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
 8007fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d102      	bne.n	8007fbe <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HSE_VALUE;
 8007fb8:	4b5c      	ldr	r3, [pc, #368]	; (800812c <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8007fba:	637b      	str	r3, [r7, #52]	; 0x34
 8007fbc:	e1cb      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8007fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007fc4:	d107      	bne.n	8007fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007fc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f7fe fc74 	bl	80068b8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8007fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd2:	637b      	str	r3, [r7, #52]	; 0x34
 8007fd4:	e1bf      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8007fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007fdc:	d107      	bne.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fde:	f107 0318 	add.w	r3, r7, #24
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f7fe fdce 	bl	8006b84 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8007fe8:	69bb      	ldr	r3, [r7, #24]
 8007fea:	637b      	str	r3, [r7, #52]	; 0x34
 8007fec:	e1b3      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	637b      	str	r3, [r7, #52]	; 0x34
 8007ff2:	e1b0      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8007ff4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ff8:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 8007ffc:	430b      	orrs	r3, r1
 8007ffe:	d14d      	bne.n	800809c <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8008000:	4b49      	ldr	r3, [pc, #292]	; (8008128 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008002:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008006:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800800a:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800800c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800800e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008012:	d028      	beq.n	8008066 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 8008014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008016:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800801a:	d83c      	bhi.n	8008096 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 800801c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008022:	d013      	beq.n	800804c <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
 8008024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008026:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800802a:	d834      	bhi.n	8008096 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 800802c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800802e:	2b00      	cmp	r3, #0
 8008030:	d004      	beq.n	800803c <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 8008032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008034:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008038:	d004      	beq.n	8008044 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800803a:	e02c      	b.n	8008096 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800803c:	f7fd fdce 	bl	8005bdc <HAL_RCC_GetPCLK2Freq>
 8008040:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008042:	e188      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008044:	f7fd fc94 	bl	8005970 <HAL_RCC_GetSysClockFreq>
 8008048:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800804a:	e184      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800804c:	4b36      	ldr	r3, [pc, #216]	; (8008128 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008054:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008058:	d102      	bne.n	8008060 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
        {
          frequency = HSI_VALUE;
 800805a:	4b34      	ldr	r3, [pc, #208]	; (800812c <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800805c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800805e:	e17a      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8008060:	2300      	movs	r3, #0
 8008062:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008064:	e177      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008066:	4b30      	ldr	r3, [pc, #192]	; (8008128 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008068:	689b      	ldr	r3, [r3, #8]
 800806a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800806e:	2b00      	cmp	r3, #0
 8008070:	d005      	beq.n	800807e <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 8008072:	4b2d      	ldr	r3, [pc, #180]	; (8008128 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008074:	689b      	ldr	r3, [r3, #8]
 8008076:	0e1b      	lsrs	r3, r3, #24
 8008078:	f003 030f 	and.w	r3, r3, #15
 800807c:	e006      	b.n	800808c <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 800807e:	4b2a      	ldr	r3, [pc, #168]	; (8008128 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008080:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008084:	041b      	lsls	r3, r3, #16
 8008086:	0e1b      	lsrs	r3, r3, #24
 8008088:	f003 030f 	and.w	r3, r3, #15
 800808c:	4a28      	ldr	r2, [pc, #160]	; (8008130 <HAL_RCCEx_GetPeriphCLKFreq+0x1014>)
 800808e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008092:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008094:	e15f      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8008096:	2300      	movs	r3, #0
 8008098:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800809a:	e15c      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800809c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080a0:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 80080a4:	430b      	orrs	r3, r1
 80080a6:	d154      	bne.n	8008152 <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80080a8:	4b1f      	ldr	r3, [pc, #124]	; (8008128 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80080aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80080ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80080b2:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80080b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80080ba:	d028      	beq.n	800810e <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 80080bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080be:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80080c2:	d843      	bhi.n	800814c <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 80080c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080ca:	d013      	beq.n	80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 80080cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080d2:	d83b      	bhi.n	800814c <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 80080d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d004      	beq.n	80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 80080da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080e0:	d004      	beq.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 80080e2:	e033      	b.n	800814c <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 80080e4:	f7fd fd66 	bl	8005bb4 <HAL_RCC_GetPCLK1Freq>
 80080e8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80080ea:	e134      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80080ec:	f7fd fc40 	bl	8005970 <HAL_RCC_GetSysClockFreq>
 80080f0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80080f2:	e130      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80080f4:	4b0c      	ldr	r3, [pc, #48]	; (8008128 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008100:	d102      	bne.n	8008108 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 8008102:	4b0a      	ldr	r3, [pc, #40]	; (800812c <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8008104:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008106:	e126      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8008108:	2300      	movs	r3, #0
 800810a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800810c:	e123      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800810e:	4b06      	ldr	r3, [pc, #24]	; (8008128 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008110:	689b      	ldr	r3, [r3, #8]
 8008112:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008116:	2b00      	cmp	r3, #0
 8008118:	d00c      	beq.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x1018>
 800811a:	4b03      	ldr	r3, [pc, #12]	; (8008128 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800811c:	689b      	ldr	r3, [r3, #8]
 800811e:	0e1b      	lsrs	r3, r3, #24
 8008120:	f003 030f 	and.w	r3, r3, #15
 8008124:	e00d      	b.n	8008142 <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 8008126:	bf00      	nop
 8008128:	46020c00 	.word	0x46020c00
 800812c:	00f42400 	.word	0x00f42400
 8008130:	0800a9f8 	.word	0x0800a9f8
 8008134:	4b8a      	ldr	r3, [pc, #552]	; (8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008136:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800813a:	041b      	lsls	r3, r3, #16
 800813c:	0e1b      	lsrs	r3, r3, #24
 800813e:	f003 030f 	and.w	r3, r3, #15
 8008142:	4a88      	ldr	r2, [pc, #544]	; (8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8008144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008148:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800814a:	e104      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800814c:	2300      	movs	r3, #0
 800814e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008150:	e101      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8008152:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008156:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 800815a:	430b      	orrs	r3, r1
 800815c:	d16e      	bne.n	800823c <HAL_RCCEx_GetPeriphCLKFreq+0x1120>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800815e:	4b80      	ldr	r3, [pc, #512]	; (8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008160:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008164:	f003 0318 	and.w	r3, r3, #24
 8008168:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800816a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800816c:	2b18      	cmp	r3, #24
 800816e:	d862      	bhi.n	8008236 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 8008170:	a201      	add	r2, pc, #4	; (adr r2, 8008178 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 8008172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008176:	bf00      	nop
 8008178:	080081dd 	.word	0x080081dd
 800817c:	08008237 	.word	0x08008237
 8008180:	08008237 	.word	0x08008237
 8008184:	08008237 	.word	0x08008237
 8008188:	08008237 	.word	0x08008237
 800818c:	08008237 	.word	0x08008237
 8008190:	08008237 	.word	0x08008237
 8008194:	08008237 	.word	0x08008237
 8008198:	080081e5 	.word	0x080081e5
 800819c:	08008237 	.word	0x08008237
 80081a0:	08008237 	.word	0x08008237
 80081a4:	08008237 	.word	0x08008237
 80081a8:	08008237 	.word	0x08008237
 80081ac:	08008237 	.word	0x08008237
 80081b0:	08008237 	.word	0x08008237
 80081b4:	08008237 	.word	0x08008237
 80081b8:	080081ed 	.word	0x080081ed
 80081bc:	08008237 	.word	0x08008237
 80081c0:	08008237 	.word	0x08008237
 80081c4:	08008237 	.word	0x08008237
 80081c8:	08008237 	.word	0x08008237
 80081cc:	08008237 	.word	0x08008237
 80081d0:	08008237 	.word	0x08008237
 80081d4:	08008237 	.word	0x08008237
 80081d8:	08008207 	.word	0x08008207
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 80081dc:	f7fd fd12 	bl	8005c04 <HAL_RCC_GetPCLK3Freq>
 80081e0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80081e2:	e0b8      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80081e4:	f7fd fbc4 	bl	8005970 <HAL_RCC_GetSysClockFreq>
 80081e8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80081ea:	e0b4      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80081ec:	4b5c      	ldr	r3, [pc, #368]	; (8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081f8:	d102      	bne.n	8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
        {
          frequency = HSI_VALUE;
 80081fa:	4b5b      	ldr	r3, [pc, #364]	; (8008368 <HAL_RCCEx_GetPeriphCLKFreq+0x124c>)
 80081fc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80081fe:	e0aa      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8008200:	2300      	movs	r3, #0
 8008202:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008204:	e0a7      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008206:	4b56      	ldr	r3, [pc, #344]	; (8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008208:	689b      	ldr	r3, [r3, #8]
 800820a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800820e:	2b00      	cmp	r3, #0
 8008210:	d005      	beq.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 8008212:	4b53      	ldr	r3, [pc, #332]	; (8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	0e1b      	lsrs	r3, r3, #24
 8008218:	f003 030f 	and.w	r3, r3, #15
 800821c:	e006      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x1110>
 800821e:	4b50      	ldr	r3, [pc, #320]	; (8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008220:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008224:	041b      	lsls	r3, r3, #16
 8008226:	0e1b      	lsrs	r3, r3, #24
 8008228:	f003 030f 	and.w	r3, r3, #15
 800822c:	4a4d      	ldr	r2, [pc, #308]	; (8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 800822e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008232:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008234:	e08f      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8008236:	2300      	movs	r3, #0
 8008238:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800823a:	e08c      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800823c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008240:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8008244:	430b      	orrs	r3, r1
 8008246:	d14c      	bne.n	80082e2 <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8008248:	4b45      	ldr	r3, [pc, #276]	; (8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800824a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800824e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008252:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8008254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008256:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800825a:	d013      	beq.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x1168>
 800825c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800825e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008262:	d83b      	bhi.n	80082dc <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8008264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008266:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800826a:	d013      	beq.n	8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
 800826c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800826e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008272:	d833      	bhi.n	80082dc <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8008274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008276:	2b00      	cmp	r3, #0
 8008278:	d014      	beq.n	80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1188>
 800827a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800827c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008280:	d014      	beq.n	80082ac <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 8008282:	e02b      	b.n	80082dc <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008284:	f107 0318 	add.w	r3, r7, #24
 8008288:	4618      	mov	r0, r3
 800828a:	f7fe fc7b 	bl	8006b84 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800828e:	69fb      	ldr	r3, [r7, #28]
 8008290:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008292:	e060      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008294:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008298:	4618      	mov	r0, r3
 800829a:	f7fe fb0d 	bl	80068b8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800829e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80082a2:	e058      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80082a4:	f7fd fb64 	bl	8005970 <HAL_RCC_GetSysClockFreq>
 80082a8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80082aa:	e054      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80082ac:	4b2c      	ldr	r3, [pc, #176]	; (8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80082ae:	689b      	ldr	r3, [r3, #8]
 80082b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d005      	beq.n	80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
 80082b8:	4b29      	ldr	r3, [pc, #164]	; (8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80082ba:	689b      	ldr	r3, [r3, #8]
 80082bc:	0e1b      	lsrs	r3, r3, #24
 80082be:	f003 030f 	and.w	r3, r3, #15
 80082c2:	e006      	b.n	80082d2 <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 80082c4:	4b26      	ldr	r3, [pc, #152]	; (8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80082c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80082ca:	041b      	lsls	r3, r3, #16
 80082cc:	0e1b      	lsrs	r3, r3, #24
 80082ce:	f003 030f 	and.w	r3, r3, #15
 80082d2:	4a24      	ldr	r2, [pc, #144]	; (8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 80082d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80082da:	e03c      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 80082dc:	2300      	movs	r3, #0
 80082de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80082e0:	e039      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 80082e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082e6:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 80082ea:	430b      	orrs	r3, r1
 80082ec:	d131      	bne.n	8008352 <HAL_RCCEx_GetPeriphCLKFreq+0x1236>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 80082ee:	4b1c      	ldr	r3, [pc, #112]	; (8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80082f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80082f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80082f8:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 80082fa:	4b19      	ldr	r3, [pc, #100]	; (8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80082fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008300:	f003 0302 	and.w	r3, r3, #2
 8008304:	2b02      	cmp	r3, #2
 8008306:	d106      	bne.n	8008316 <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
 8008308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800830a:	2b00      	cmp	r3, #0
 800830c:	d103      	bne.n	8008316 <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
    {
      frequency = LSE_VALUE;
 800830e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008312:	637b      	str	r3, [r7, #52]	; 0x34
 8008314:	e01f      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8008316:	4b12      	ldr	r3, [pc, #72]	; (8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008318:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800831c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008320:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008324:	d112      	bne.n	800834c <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
 8008326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008328:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800832c:	d10e      	bne.n	800834c <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800832e:	4b0c      	ldr	r3, [pc, #48]	; (8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008330:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008338:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800833c:	d102      	bne.n	8008344 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>
      {
        frequency = LSI_VALUE / 128U;
 800833e:	23fa      	movs	r3, #250	; 0xfa
 8008340:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008342:	e008      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8008344:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008348:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800834a:	e004      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800834c:	2300      	movs	r3, #0
 800834e:	637b      	str	r3, [r7, #52]	; 0x34
 8008350:	e001      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }

  }
  else
  {
    frequency = 0;
 8008352:	2300      	movs	r3, #0
 8008354:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 8008356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008358:	4618      	mov	r0, r3
 800835a:	3738      	adds	r7, #56	; 0x38
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}
 8008360:	46020c00 	.word	0x46020c00
 8008364:	0800a9f8 	.word	0x0800a9f8
 8008368:	00f42400 	.word	0x00f42400

0800836c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8008374:	4b47      	ldr	r3, [pc, #284]	; (8008494 <RCCEx_PLL2_Config+0x128>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a46      	ldr	r2, [pc, #280]	; (8008494 <RCCEx_PLL2_Config+0x128>)
 800837a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800837e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008380:	f7f9 f836 	bl	80013f0 <HAL_GetTick>
 8008384:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008386:	e008      	b.n	800839a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008388:	f7f9 f832 	bl	80013f0 <HAL_GetTick>
 800838c:	4602      	mov	r2, r0
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	1ad3      	subs	r3, r2, r3
 8008392:	2b02      	cmp	r3, #2
 8008394:	d901      	bls.n	800839a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008396:	2303      	movs	r3, #3
 8008398:	e077      	b.n	800848a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800839a:	4b3e      	ldr	r3, [pc, #248]	; (8008494 <RCCEx_PLL2_Config+0x128>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d1f0      	bne.n	8008388 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80083a6:	4b3b      	ldr	r3, [pc, #236]	; (8008494 <RCCEx_PLL2_Config+0x128>)
 80083a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083aa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80083ae:	f023 0303 	bic.w	r3, r3, #3
 80083b2:	687a      	ldr	r2, [r7, #4]
 80083b4:	6811      	ldr	r1, [r2, #0]
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	6852      	ldr	r2, [r2, #4]
 80083ba:	3a01      	subs	r2, #1
 80083bc:	0212      	lsls	r2, r2, #8
 80083be:	430a      	orrs	r2, r1
 80083c0:	4934      	ldr	r1, [pc, #208]	; (8008494 <RCCEx_PLL2_Config+0x128>)
 80083c2:	4313      	orrs	r3, r2
 80083c4:	62cb      	str	r3, [r1, #44]	; 0x2c
 80083c6:	4b33      	ldr	r3, [pc, #204]	; (8008494 <RCCEx_PLL2_Config+0x128>)
 80083c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80083ca:	4b33      	ldr	r3, [pc, #204]	; (8008498 <RCCEx_PLL2_Config+0x12c>)
 80083cc:	4013      	ands	r3, r2
 80083ce:	687a      	ldr	r2, [r7, #4]
 80083d0:	6892      	ldr	r2, [r2, #8]
 80083d2:	3a01      	subs	r2, #1
 80083d4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80083d8:	687a      	ldr	r2, [r7, #4]
 80083da:	68d2      	ldr	r2, [r2, #12]
 80083dc:	3a01      	subs	r2, #1
 80083de:	0252      	lsls	r2, r2, #9
 80083e0:	b292      	uxth	r2, r2
 80083e2:	4311      	orrs	r1, r2
 80083e4:	687a      	ldr	r2, [r7, #4]
 80083e6:	6912      	ldr	r2, [r2, #16]
 80083e8:	3a01      	subs	r2, #1
 80083ea:	0412      	lsls	r2, r2, #16
 80083ec:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80083f0:	4311      	orrs	r1, r2
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	6952      	ldr	r2, [r2, #20]
 80083f6:	3a01      	subs	r2, #1
 80083f8:	0612      	lsls	r2, r2, #24
 80083fa:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80083fe:	430a      	orrs	r2, r1
 8008400:	4924      	ldr	r1, [pc, #144]	; (8008494 <RCCEx_PLL2_Config+0x128>)
 8008402:	4313      	orrs	r3, r2
 8008404:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8008406:	4b23      	ldr	r3, [pc, #140]	; (8008494 <RCCEx_PLL2_Config+0x128>)
 8008408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800840a:	f023 020c 	bic.w	r2, r3, #12
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	699b      	ldr	r3, [r3, #24]
 8008412:	4920      	ldr	r1, [pc, #128]	; (8008494 <RCCEx_PLL2_Config+0x128>)
 8008414:	4313      	orrs	r3, r2
 8008416:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8008418:	4b1e      	ldr	r3, [pc, #120]	; (8008494 <RCCEx_PLL2_Config+0x128>)
 800841a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6a1b      	ldr	r3, [r3, #32]
 8008420:	491c      	ldr	r1, [pc, #112]	; (8008494 <RCCEx_PLL2_Config+0x128>)
 8008422:	4313      	orrs	r3, r2
 8008424:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8008426:	4b1b      	ldr	r3, [pc, #108]	; (8008494 <RCCEx_PLL2_Config+0x128>)
 8008428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800842a:	4a1a      	ldr	r2, [pc, #104]	; (8008494 <RCCEx_PLL2_Config+0x128>)
 800842c:	f023 0310 	bic.w	r3, r3, #16
 8008430:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008432:	4b18      	ldr	r3, [pc, #96]	; (8008494 <RCCEx_PLL2_Config+0x128>)
 8008434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008436:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800843a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800843e:	687a      	ldr	r2, [r7, #4]
 8008440:	69d2      	ldr	r2, [r2, #28]
 8008442:	00d2      	lsls	r2, r2, #3
 8008444:	4913      	ldr	r1, [pc, #76]	; (8008494 <RCCEx_PLL2_Config+0x128>)
 8008446:	4313      	orrs	r3, r2
 8008448:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800844a:	4b12      	ldr	r3, [pc, #72]	; (8008494 <RCCEx_PLL2_Config+0x128>)
 800844c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800844e:	4a11      	ldr	r2, [pc, #68]	; (8008494 <RCCEx_PLL2_Config+0x128>)
 8008450:	f043 0310 	orr.w	r3, r3, #16
 8008454:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8008456:	4b0f      	ldr	r3, [pc, #60]	; (8008494 <RCCEx_PLL2_Config+0x128>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a0e      	ldr	r2, [pc, #56]	; (8008494 <RCCEx_PLL2_Config+0x128>)
 800845c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008460:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008462:	f7f8 ffc5 	bl	80013f0 <HAL_GetTick>
 8008466:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008468:	e008      	b.n	800847c <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800846a:	f7f8 ffc1 	bl	80013f0 <HAL_GetTick>
 800846e:	4602      	mov	r2, r0
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	1ad3      	subs	r3, r2, r3
 8008474:	2b02      	cmp	r3, #2
 8008476:	d901      	bls.n	800847c <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008478:	2303      	movs	r3, #3
 800847a:	e006      	b.n	800848a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800847c:	4b05      	ldr	r3, [pc, #20]	; (8008494 <RCCEx_PLL2_Config+0x128>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008484:	2b00      	cmp	r3, #0
 8008486:	d0f0      	beq.n	800846a <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8008488:	2300      	movs	r3, #0

}
 800848a:	4618      	mov	r0, r3
 800848c:	3710      	adds	r7, #16
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
 8008492:	bf00      	nop
 8008494:	46020c00 	.word	0x46020c00
 8008498:	80800000 	.word	0x80800000

0800849c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b084      	sub	sp, #16
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 80084a4:	4b47      	ldr	r3, [pc, #284]	; (80085c4 <RCCEx_PLL3_Config+0x128>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a46      	ldr	r2, [pc, #280]	; (80085c4 <RCCEx_PLL3_Config+0x128>)
 80084aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80084ae:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80084b0:	f7f8 ff9e 	bl	80013f0 <HAL_GetTick>
 80084b4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80084b6:	e008      	b.n	80084ca <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80084b8:	f7f8 ff9a 	bl	80013f0 <HAL_GetTick>
 80084bc:	4602      	mov	r2, r0
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	1ad3      	subs	r3, r2, r3
 80084c2:	2b02      	cmp	r3, #2
 80084c4:	d901      	bls.n	80084ca <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80084c6:	2303      	movs	r3, #3
 80084c8:	e077      	b.n	80085ba <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80084ca:	4b3e      	ldr	r3, [pc, #248]	; (80085c4 <RCCEx_PLL3_Config+0x128>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d1f0      	bne.n	80084b8 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80084d6:	4b3b      	ldr	r3, [pc, #236]	; (80085c4 <RCCEx_PLL3_Config+0x128>)
 80084d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084da:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80084de:	f023 0303 	bic.w	r3, r3, #3
 80084e2:	687a      	ldr	r2, [r7, #4]
 80084e4:	6811      	ldr	r1, [r2, #0]
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	6852      	ldr	r2, [r2, #4]
 80084ea:	3a01      	subs	r2, #1
 80084ec:	0212      	lsls	r2, r2, #8
 80084ee:	430a      	orrs	r2, r1
 80084f0:	4934      	ldr	r1, [pc, #208]	; (80085c4 <RCCEx_PLL3_Config+0x128>)
 80084f2:	4313      	orrs	r3, r2
 80084f4:	630b      	str	r3, [r1, #48]	; 0x30
 80084f6:	4b33      	ldr	r3, [pc, #204]	; (80085c4 <RCCEx_PLL3_Config+0x128>)
 80084f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084fa:	4b33      	ldr	r3, [pc, #204]	; (80085c8 <RCCEx_PLL3_Config+0x12c>)
 80084fc:	4013      	ands	r3, r2
 80084fe:	687a      	ldr	r2, [r7, #4]
 8008500:	6892      	ldr	r2, [r2, #8]
 8008502:	3a01      	subs	r2, #1
 8008504:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008508:	687a      	ldr	r2, [r7, #4]
 800850a:	68d2      	ldr	r2, [r2, #12]
 800850c:	3a01      	subs	r2, #1
 800850e:	0252      	lsls	r2, r2, #9
 8008510:	b292      	uxth	r2, r2
 8008512:	4311      	orrs	r1, r2
 8008514:	687a      	ldr	r2, [r7, #4]
 8008516:	6912      	ldr	r2, [r2, #16]
 8008518:	3a01      	subs	r2, #1
 800851a:	0412      	lsls	r2, r2, #16
 800851c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8008520:	4311      	orrs	r1, r2
 8008522:	687a      	ldr	r2, [r7, #4]
 8008524:	6952      	ldr	r2, [r2, #20]
 8008526:	3a01      	subs	r2, #1
 8008528:	0612      	lsls	r2, r2, #24
 800852a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800852e:	430a      	orrs	r2, r1
 8008530:	4924      	ldr	r1, [pc, #144]	; (80085c4 <RCCEx_PLL3_Config+0x128>)
 8008532:	4313      	orrs	r3, r2
 8008534:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8008536:	4b23      	ldr	r3, [pc, #140]	; (80085c4 <RCCEx_PLL3_Config+0x128>)
 8008538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800853a:	f023 020c 	bic.w	r2, r3, #12
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	699b      	ldr	r3, [r3, #24]
 8008542:	4920      	ldr	r1, [pc, #128]	; (80085c4 <RCCEx_PLL3_Config+0x128>)
 8008544:	4313      	orrs	r3, r2
 8008546:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8008548:	4b1e      	ldr	r3, [pc, #120]	; (80085c4 <RCCEx_PLL3_Config+0x128>)
 800854a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6a1b      	ldr	r3, [r3, #32]
 8008550:	491c      	ldr	r1, [pc, #112]	; (80085c4 <RCCEx_PLL3_Config+0x128>)
 8008552:	4313      	orrs	r3, r2
 8008554:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8008556:	4b1b      	ldr	r3, [pc, #108]	; (80085c4 <RCCEx_PLL3_Config+0x128>)
 8008558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800855a:	4a1a      	ldr	r2, [pc, #104]	; (80085c4 <RCCEx_PLL3_Config+0x128>)
 800855c:	f023 0310 	bic.w	r3, r3, #16
 8008560:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008562:	4b18      	ldr	r3, [pc, #96]	; (80085c4 <RCCEx_PLL3_Config+0x128>)
 8008564:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008566:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800856a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	69d2      	ldr	r2, [r2, #28]
 8008572:	00d2      	lsls	r2, r2, #3
 8008574:	4913      	ldr	r1, [pc, #76]	; (80085c4 <RCCEx_PLL3_Config+0x128>)
 8008576:	4313      	orrs	r3, r2
 8008578:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800857a:	4b12      	ldr	r3, [pc, #72]	; (80085c4 <RCCEx_PLL3_Config+0x128>)
 800857c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800857e:	4a11      	ldr	r2, [pc, #68]	; (80085c4 <RCCEx_PLL3_Config+0x128>)
 8008580:	f043 0310 	orr.w	r3, r3, #16
 8008584:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8008586:	4b0f      	ldr	r3, [pc, #60]	; (80085c4 <RCCEx_PLL3_Config+0x128>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4a0e      	ldr	r2, [pc, #56]	; (80085c4 <RCCEx_PLL3_Config+0x128>)
 800858c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008590:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008592:	f7f8 ff2d 	bl	80013f0 <HAL_GetTick>
 8008596:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008598:	e008      	b.n	80085ac <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800859a:	f7f8 ff29 	bl	80013f0 <HAL_GetTick>
 800859e:	4602      	mov	r2, r0
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	1ad3      	subs	r3, r2, r3
 80085a4:	2b02      	cmp	r3, #2
 80085a6:	d901      	bls.n	80085ac <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 80085a8:	2303      	movs	r3, #3
 80085aa:	e006      	b.n	80085ba <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80085ac:	4b05      	ldr	r3, [pc, #20]	; (80085c4 <RCCEx_PLL3_Config+0x128>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d0f0      	beq.n	800859a <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 80085b8:	2300      	movs	r3, #0
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3710      	adds	r7, #16
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}
 80085c2:	bf00      	nop
 80085c4:	46020c00 	.word	0x46020c00
 80085c8:	80800000 	.word	0x80800000

080085cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d101      	bne.n	80085de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80085da:	2301      	movs	r3, #1
 80085dc:	e042      	b.n	8008664 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d106      	bne.n	80085f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2200      	movs	r2, #0
 80085ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f7f8 fd33 	bl	800105c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2224      	movs	r2, #36	; 0x24
 80085fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	681a      	ldr	r2, [r3, #0]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f022 0201 	bic.w	r2, r2, #1
 800860c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 f8d2 	bl	80087b8 <UART_SetConfig>
 8008614:	4603      	mov	r3, r0
 8008616:	2b01      	cmp	r3, #1
 8008618:	d101      	bne.n	800861e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800861a:	2301      	movs	r3, #1
 800861c:	e022      	b.n	8008664 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008622:	2b00      	cmp	r3, #0
 8008624:	d002      	beq.n	800862c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f000 fa68 	bl	8008afc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	685a      	ldr	r2, [r3, #4]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800863a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	689a      	ldr	r2, [r3, #8]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800864a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f042 0201 	orr.w	r2, r2, #1
 800865a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f000 faef 	bl	8008c40 <UART_CheckIdleState>
 8008662:	4603      	mov	r3, r0
}
 8008664:	4618      	mov	r0, r3
 8008666:	3708      	adds	r7, #8
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b08a      	sub	sp, #40	; 0x28
 8008670:	af02      	add	r7, sp, #8
 8008672:	60f8      	str	r0, [r7, #12]
 8008674:	60b9      	str	r1, [r7, #8]
 8008676:	603b      	str	r3, [r7, #0]
 8008678:	4613      	mov	r3, r2
 800867a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008682:	2b20      	cmp	r3, #32
 8008684:	f040 8092 	bne.w	80087ac <HAL_UART_Transmit+0x140>
  {
    if ((pData == NULL) || (Size == 0U))
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d002      	beq.n	8008694 <HAL_UART_Transmit+0x28>
 800868e:	88fb      	ldrh	r3, [r7, #6]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d101      	bne.n	8008698 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008694:	2301      	movs	r3, #1
 8008696:	e08a      	b.n	80087ae <HAL_UART_Transmit+0x142>
    }

    __HAL_LOCK(huart);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800869e:	2b01      	cmp	r3, #1
 80086a0:	d101      	bne.n	80086a6 <HAL_UART_Transmit+0x3a>
 80086a2:	2302      	movs	r3, #2
 80086a4:	e083      	b.n	80087ae <HAL_UART_Transmit+0x142>
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2201      	movs	r2, #1
 80086aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	689b      	ldr	r3, [r3, #8]
 80086b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086b8:	2b80      	cmp	r3, #128	; 0x80
 80086ba:	d107      	bne.n	80086cc <HAL_UART_Transmit+0x60>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	689a      	ldr	r2, [r3, #8]
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80086ca:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2200      	movs	r2, #0
 80086d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2221      	movs	r2, #33	; 0x21
 80086d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80086dc:	f7f8 fe88 	bl	80013f0 <HAL_GetTick>
 80086e0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	88fa      	ldrh	r2, [r7, #6]
 80086e6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	88fa      	ldrh	r2, [r7, #6]
 80086ee:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	689b      	ldr	r3, [r3, #8]
 80086f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086fa:	d108      	bne.n	800870e <HAL_UART_Transmit+0xa2>
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	691b      	ldr	r3, [r3, #16]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d104      	bne.n	800870e <HAL_UART_Transmit+0xa2>
    {
      pdata8bits  = NULL;
 8008704:	2300      	movs	r3, #0
 8008706:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	61bb      	str	r3, [r7, #24]
 800870c:	e003      	b.n	8008716 <HAL_UART_Transmit+0xaa>
    }
    else
    {
      pdata8bits  = pData;
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008712:	2300      	movs	r3, #0
 8008714:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2200      	movs	r2, #0
 800871a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800871e:	e02c      	b.n	800877a <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	9300      	str	r3, [sp, #0]
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	2200      	movs	r2, #0
 8008728:	2180      	movs	r1, #128	; 0x80
 800872a:	68f8      	ldr	r0, [r7, #12]
 800872c:	f000 fad3 	bl	8008cd6 <UART_WaitOnFlagUntilTimeout>
 8008730:	4603      	mov	r3, r0
 8008732:	2b00      	cmp	r3, #0
 8008734:	d001      	beq.n	800873a <HAL_UART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 8008736:	2303      	movs	r3, #3
 8008738:	e039      	b.n	80087ae <HAL_UART_Transmit+0x142>
      }
      if (pdata8bits == NULL)
 800873a:	69fb      	ldr	r3, [r7, #28]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d10b      	bne.n	8008758 <HAL_UART_Transmit+0xec>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008740:	69bb      	ldr	r3, [r7, #24]
 8008742:	881b      	ldrh	r3, [r3, #0]
 8008744:	461a      	mov	r2, r3
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800874e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008750:	69bb      	ldr	r3, [r7, #24]
 8008752:	3302      	adds	r3, #2
 8008754:	61bb      	str	r3, [r7, #24]
 8008756:	e007      	b.n	8008768 <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008758:	69fb      	ldr	r3, [r7, #28]
 800875a:	781a      	ldrb	r2, [r3, #0]
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008762:	69fb      	ldr	r3, [r7, #28]
 8008764:	3301      	adds	r3, #1
 8008766:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800876e:	b29b      	uxth	r3, r3
 8008770:	3b01      	subs	r3, #1
 8008772:	b29a      	uxth	r2, r3
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008780:	b29b      	uxth	r3, r3
 8008782:	2b00      	cmp	r3, #0
 8008784:	d1cc      	bne.n	8008720 <HAL_UART_Transmit+0xb4>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	9300      	str	r3, [sp, #0]
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	2200      	movs	r2, #0
 800878e:	2140      	movs	r1, #64	; 0x40
 8008790:	68f8      	ldr	r0, [r7, #12]
 8008792:	f000 faa0 	bl	8008cd6 <UART_WaitOnFlagUntilTimeout>
 8008796:	4603      	mov	r3, r0
 8008798:	2b00      	cmp	r3, #0
 800879a:	d001      	beq.n	80087a0 <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 800879c:	2303      	movs	r3, #3
 800879e:	e006      	b.n	80087ae <HAL_UART_Transmit+0x142>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2220      	movs	r2, #32
 80087a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80087a8:	2300      	movs	r3, #0
 80087aa:	e000      	b.n	80087ae <HAL_UART_Transmit+0x142>
  }
  else
  {
    return HAL_BUSY;
 80087ac:	2302      	movs	r3, #2
  }
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3720      	adds	r7, #32
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}
	...

080087b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80087b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80087bc:	b094      	sub	sp, #80	; 0x50
 80087be:	af00      	add	r7, sp, #0
 80087c0:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80087c2:	2300      	movs	r3, #0
 80087c4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80087c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ca:	681a      	ldr	r2, [r3, #0]
 80087cc:	4b7e      	ldr	r3, [pc, #504]	; (80089c8 <UART_SetConfig+0x210>)
 80087ce:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80087d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087d2:	689a      	ldr	r2, [r3, #8]
 80087d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087d6:	691b      	ldr	r3, [r3, #16]
 80087d8:	431a      	orrs	r2, r3
 80087da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087dc:	695b      	ldr	r3, [r3, #20]
 80087de:	431a      	orrs	r2, r3
 80087e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087e2:	69db      	ldr	r3, [r3, #28]
 80087e4:	4313      	orrs	r3, r2
 80087e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80087e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4977      	ldr	r1, [pc, #476]	; (80089cc <UART_SetConfig+0x214>)
 80087f0:	4019      	ands	r1, r3
 80087f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087f4:	681a      	ldr	r2, [r3, #0]
 80087f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087f8:	430b      	orrs	r3, r1
 80087fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80087fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008808:	68d9      	ldr	r1, [r3, #12]
 800880a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800880c:	681a      	ldr	r2, [r3, #0]
 800880e:	ea40 0301 	orr.w	r3, r0, r1
 8008812:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008816:	699b      	ldr	r3, [r3, #24]
 8008818:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800881a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800881c:	681a      	ldr	r2, [r3, #0]
 800881e:	4b6a      	ldr	r3, [pc, #424]	; (80089c8 <UART_SetConfig+0x210>)
 8008820:	429a      	cmp	r2, r3
 8008822:	d009      	beq.n	8008838 <UART_SetConfig+0x80>
 8008824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008826:	681a      	ldr	r2, [r3, #0]
 8008828:	4b69      	ldr	r3, [pc, #420]	; (80089d0 <UART_SetConfig+0x218>)
 800882a:	429a      	cmp	r2, r3
 800882c:	d004      	beq.n	8008838 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800882e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008830:	6a1a      	ldr	r2, [r3, #32]
 8008832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008834:	4313      	orrs	r3, r2
 8008836:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	689b      	ldr	r3, [r3, #8]
 800883e:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 8008842:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8008846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800884c:	430b      	orrs	r3, r1
 800884e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008856:	f023 000f 	bic.w	r0, r3, #15
 800885a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800885c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800885e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008860:	681a      	ldr	r2, [r3, #0]
 8008862:	ea40 0301 	orr.w	r3, r0, r1
 8008866:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800886a:	681a      	ldr	r2, [r3, #0]
 800886c:	4b59      	ldr	r3, [pc, #356]	; (80089d4 <UART_SetConfig+0x21c>)
 800886e:	429a      	cmp	r2, r3
 8008870:	d102      	bne.n	8008878 <UART_SetConfig+0xc0>
 8008872:	2301      	movs	r3, #1
 8008874:	64bb      	str	r3, [r7, #72]	; 0x48
 8008876:	e029      	b.n	80088cc <UART_SetConfig+0x114>
 8008878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800887a:	681a      	ldr	r2, [r3, #0]
 800887c:	4b56      	ldr	r3, [pc, #344]	; (80089d8 <UART_SetConfig+0x220>)
 800887e:	429a      	cmp	r2, r3
 8008880:	d102      	bne.n	8008888 <UART_SetConfig+0xd0>
 8008882:	2302      	movs	r3, #2
 8008884:	64bb      	str	r3, [r7, #72]	; 0x48
 8008886:	e021      	b.n	80088cc <UART_SetConfig+0x114>
 8008888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800888a:	681a      	ldr	r2, [r3, #0]
 800888c:	4b53      	ldr	r3, [pc, #332]	; (80089dc <UART_SetConfig+0x224>)
 800888e:	429a      	cmp	r2, r3
 8008890:	d102      	bne.n	8008898 <UART_SetConfig+0xe0>
 8008892:	2304      	movs	r3, #4
 8008894:	64bb      	str	r3, [r7, #72]	; 0x48
 8008896:	e019      	b.n	80088cc <UART_SetConfig+0x114>
 8008898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800889a:	681a      	ldr	r2, [r3, #0]
 800889c:	4b50      	ldr	r3, [pc, #320]	; (80089e0 <UART_SetConfig+0x228>)
 800889e:	429a      	cmp	r2, r3
 80088a0:	d102      	bne.n	80088a8 <UART_SetConfig+0xf0>
 80088a2:	2308      	movs	r3, #8
 80088a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80088a6:	e011      	b.n	80088cc <UART_SetConfig+0x114>
 80088a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088aa:	681a      	ldr	r2, [r3, #0]
 80088ac:	4b4d      	ldr	r3, [pc, #308]	; (80089e4 <UART_SetConfig+0x22c>)
 80088ae:	429a      	cmp	r2, r3
 80088b0:	d102      	bne.n	80088b8 <UART_SetConfig+0x100>
 80088b2:	2310      	movs	r3, #16
 80088b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80088b6:	e009      	b.n	80088cc <UART_SetConfig+0x114>
 80088b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ba:	681a      	ldr	r2, [r3, #0]
 80088bc:	4b42      	ldr	r3, [pc, #264]	; (80089c8 <UART_SetConfig+0x210>)
 80088be:	429a      	cmp	r2, r3
 80088c0:	d102      	bne.n	80088c8 <UART_SetConfig+0x110>
 80088c2:	2320      	movs	r3, #32
 80088c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80088c6:	e001      	b.n	80088cc <UART_SetConfig+0x114>
 80088c8:	2300      	movs	r3, #0
 80088ca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80088cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ce:	681a      	ldr	r2, [r3, #0]
 80088d0:	4b3d      	ldr	r3, [pc, #244]	; (80089c8 <UART_SetConfig+0x210>)
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d005      	beq.n	80088e2 <UART_SetConfig+0x12a>
 80088d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088d8:	681a      	ldr	r2, [r3, #0]
 80088da:	4b3d      	ldr	r3, [pc, #244]	; (80089d0 <UART_SetConfig+0x218>)
 80088dc:	429a      	cmp	r2, r3
 80088de:	f040 8085 	bne.w	80089ec <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80088e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088e4:	2200      	movs	r2, #0
 80088e6:	623b      	str	r3, [r7, #32]
 80088e8:	627a      	str	r2, [r7, #36]	; 0x24
 80088ea:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80088ee:	f7fe fc15 	bl	800711c <HAL_RCCEx_GetPeriphCLKFreq>
 80088f2:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80088f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	f000 80e8 	beq.w	8008acc <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80088fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008900:	4a39      	ldr	r2, [pc, #228]	; (80089e8 <UART_SetConfig+0x230>)
 8008902:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008906:	461a      	mov	r2, r3
 8008908:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800890a:	fbb3 f3f2 	udiv	r3, r3, r2
 800890e:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008912:	685a      	ldr	r2, [r3, #4]
 8008914:	4613      	mov	r3, r2
 8008916:	005b      	lsls	r3, r3, #1
 8008918:	4413      	add	r3, r2
 800891a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800891c:	429a      	cmp	r2, r3
 800891e:	d305      	bcc.n	800892c <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008926:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008928:	429a      	cmp	r2, r3
 800892a:	d903      	bls.n	8008934 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 800892c:	2301      	movs	r3, #1
 800892e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008932:	e048      	b.n	80089c6 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008934:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008936:	2200      	movs	r2, #0
 8008938:	61bb      	str	r3, [r7, #24]
 800893a:	61fa      	str	r2, [r7, #28]
 800893c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800893e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008940:	4a29      	ldr	r2, [pc, #164]	; (80089e8 <UART_SetConfig+0x230>)
 8008942:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008946:	b29b      	uxth	r3, r3
 8008948:	2200      	movs	r2, #0
 800894a:	613b      	str	r3, [r7, #16]
 800894c:	617a      	str	r2, [r7, #20]
 800894e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008952:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008956:	f7f7 fc8d 	bl	8000274 <__aeabi_uldivmod>
 800895a:	4602      	mov	r2, r0
 800895c:	460b      	mov	r3, r1
 800895e:	4610      	mov	r0, r2
 8008960:	4619      	mov	r1, r3
 8008962:	f04f 0200 	mov.w	r2, #0
 8008966:	f04f 0300 	mov.w	r3, #0
 800896a:	020b      	lsls	r3, r1, #8
 800896c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008970:	0202      	lsls	r2, r0, #8
 8008972:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008974:	6849      	ldr	r1, [r1, #4]
 8008976:	0849      	lsrs	r1, r1, #1
 8008978:	2000      	movs	r0, #0
 800897a:	460c      	mov	r4, r1
 800897c:	4605      	mov	r5, r0
 800897e:	eb12 0804 	adds.w	r8, r2, r4
 8008982:	eb43 0905 	adc.w	r9, r3, r5
 8008986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	2200      	movs	r2, #0
 800898c:	60bb      	str	r3, [r7, #8]
 800898e:	60fa      	str	r2, [r7, #12]
 8008990:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008994:	4640      	mov	r0, r8
 8008996:	4649      	mov	r1, r9
 8008998:	f7f7 fc6c 	bl	8000274 <__aeabi_uldivmod>
 800899c:	4602      	mov	r2, r0
 800899e:	460b      	mov	r3, r1
 80089a0:	4613      	mov	r3, r2
 80089a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80089a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089aa:	d308      	bcc.n	80089be <UART_SetConfig+0x206>
 80089ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089b2:	d204      	bcs.n	80089be <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 80089b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80089ba:	60da      	str	r2, [r3, #12]
 80089bc:	e003      	b.n	80089c6 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 80089be:	2301      	movs	r3, #1
 80089c0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 80089c4:	e082      	b.n	8008acc <UART_SetConfig+0x314>
 80089c6:	e081      	b.n	8008acc <UART_SetConfig+0x314>
 80089c8:	46002400 	.word	0x46002400
 80089cc:	cfff69f3 	.word	0xcfff69f3
 80089d0:	56002400 	.word	0x56002400
 80089d4:	40013800 	.word	0x40013800
 80089d8:	40004400 	.word	0x40004400
 80089dc:	40004800 	.word	0x40004800
 80089e0:	40004c00 	.word	0x40004c00
 80089e4:	40005000 	.word	0x40005000
 80089e8:	0800aab8 	.word	0x0800aab8
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80089ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ee:	69db      	ldr	r3, [r3, #28]
 80089f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089f4:	d13c      	bne.n	8008a70 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80089f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089f8:	2200      	movs	r2, #0
 80089fa:	603b      	str	r3, [r7, #0]
 80089fc:	607a      	str	r2, [r7, #4]
 80089fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a02:	f7fe fb8b 	bl	800711c <HAL_RCCEx_GetPeriphCLKFreq>
 8008a06:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008a08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d05e      	beq.n	8008acc <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a12:	4a39      	ldr	r2, [pc, #228]	; (8008af8 <UART_SetConfig+0x340>)
 8008a14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a18:	461a      	mov	r2, r3
 8008a1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a20:	005a      	lsls	r2, r3, #1
 8008a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	085b      	lsrs	r3, r3, #1
 8008a28:	441a      	add	r2, r3
 8008a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a2c:	685b      	ldr	r3, [r3, #4]
 8008a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a32:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a36:	2b0f      	cmp	r3, #15
 8008a38:	d916      	bls.n	8008a68 <UART_SetConfig+0x2b0>
 8008a3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a40:	d212      	bcs.n	8008a68 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008a42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a44:	b29b      	uxth	r3, r3
 8008a46:	f023 030f 	bic.w	r3, r3, #15
 8008a4a:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008a4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a4e:	085b      	lsrs	r3, r3, #1
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	f003 0307 	and.w	r3, r3, #7
 8008a56:	b29a      	uxth	r2, r3
 8008a58:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8008a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8008a64:	60da      	str	r2, [r3, #12]
 8008a66:	e031      	b.n	8008acc <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008a6e:	e02d      	b.n	8008acc <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008a70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a72:	2200      	movs	r2, #0
 8008a74:	469a      	mov	sl, r3
 8008a76:	4693      	mov	fp, r2
 8008a78:	4650      	mov	r0, sl
 8008a7a:	4659      	mov	r1, fp
 8008a7c:	f7fe fb4e 	bl	800711c <HAL_RCCEx_GetPeriphCLKFreq>
 8008a80:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8008a82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d021      	beq.n	8008acc <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a8c:	4a1a      	ldr	r2, [pc, #104]	; (8008af8 <UART_SetConfig+0x340>)
 8008a8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a92:	461a      	mov	r2, r3
 8008a94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a96:	fbb3 f2f2 	udiv	r2, r3, r2
 8008a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a9c:	685b      	ldr	r3, [r3, #4]
 8008a9e:	085b      	lsrs	r3, r3, #1
 8008aa0:	441a      	add	r2, r3
 8008aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aa4:	685b      	ldr	r3, [r3, #4]
 8008aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008aac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008aae:	2b0f      	cmp	r3, #15
 8008ab0:	d909      	bls.n	8008ac6 <UART_SetConfig+0x30e>
 8008ab2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ab4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ab8:	d205      	bcs.n	8008ac6 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008aba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008abc:	b29a      	uxth	r2, r3
 8008abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	60da      	str	r2, [r3, #12]
 8008ac4:	e002      	b.n	8008acc <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ace:	2201      	movs	r2, #1
 8008ad0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ade:	2200      	movs	r2, #0
 8008ae0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008ae8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3750      	adds	r7, #80	; 0x50
 8008af0:	46bd      	mov	sp, r7
 8008af2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008af6:	bf00      	nop
 8008af8:	0800aab8 	.word	0x0800aab8

08008afc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b083      	sub	sp, #12
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b08:	f003 0301 	and.w	r3, r3, #1
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d00a      	beq.n	8008b26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	685b      	ldr	r3, [r3, #4]
 8008b16:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	430a      	orrs	r2, r1
 8008b24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b2a:	f003 0302 	and.w	r3, r3, #2
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d00a      	beq.n	8008b48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	430a      	orrs	r2, r1
 8008b46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b4c:	f003 0304 	and.w	r3, r3, #4
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d00a      	beq.n	8008b6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	685b      	ldr	r3, [r3, #4]
 8008b5a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	430a      	orrs	r2, r1
 8008b68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b6e:	f003 0308 	and.w	r3, r3, #8
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d00a      	beq.n	8008b8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	430a      	orrs	r2, r1
 8008b8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b90:	f003 0310 	and.w	r3, r3, #16
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d00a      	beq.n	8008bae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	689b      	ldr	r3, [r3, #8]
 8008b9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	430a      	orrs	r2, r1
 8008bac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bb2:	f003 0320 	and.w	r3, r3, #32
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d00a      	beq.n	8008bd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	689b      	ldr	r3, [r3, #8]
 8008bc0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	430a      	orrs	r2, r1
 8008bce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d01a      	beq.n	8008c12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	430a      	orrs	r2, r1
 8008bf0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bfa:	d10a      	bne.n	8008c12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	685b      	ldr	r3, [r3, #4]
 8008c02:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	430a      	orrs	r2, r1
 8008c10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d00a      	beq.n	8008c34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	430a      	orrs	r2, r1
 8008c32:	605a      	str	r2, [r3, #4]
  }
}
 8008c34:	bf00      	nop
 8008c36:	370c      	adds	r7, #12
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr

08008c40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b086      	sub	sp, #24
 8008c44:	af02      	add	r7, sp, #8
 8008c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008c50:	f7f8 fbce 	bl	80013f0 <HAL_GetTick>
 8008c54:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f003 0308 	and.w	r3, r3, #8
 8008c60:	2b08      	cmp	r3, #8
 8008c62:	d10e      	bne.n	8008c82 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c68:	9300      	str	r3, [sp, #0]
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f000 f82f 	bl	8008cd6 <UART_WaitOnFlagUntilTimeout>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d001      	beq.n	8008c82 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c7e:	2303      	movs	r3, #3
 8008c80:	e025      	b.n	8008cce <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f003 0304 	and.w	r3, r3, #4
 8008c8c:	2b04      	cmp	r3, #4
 8008c8e:	d10e      	bne.n	8008cae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c94:	9300      	str	r3, [sp, #0]
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f000 f819 	bl	8008cd6 <UART_WaitOnFlagUntilTimeout>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d001      	beq.n	8008cae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008caa:	2303      	movs	r3, #3
 8008cac:	e00f      	b.n	8008cce <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2220      	movs	r2, #32
 8008cb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2220      	movs	r2, #32
 8008cba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008ccc:	2300      	movs	r3, #0
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3710      	adds	r7, #16
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}

08008cd6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008cd6:	b580      	push	{r7, lr}
 8008cd8:	b09c      	sub	sp, #112	; 0x70
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	60f8      	str	r0, [r7, #12]
 8008cde:	60b9      	str	r1, [r7, #8]
 8008ce0:	603b      	str	r3, [r7, #0]
 8008ce2:	4613      	mov	r3, r2
 8008ce4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ce6:	e0a9      	b.n	8008e3c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ce8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008cea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008cee:	f000 80a5 	beq.w	8008e3c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cf2:	f7f8 fb7d 	bl	80013f0 <HAL_GetTick>
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	1ad3      	subs	r3, r2, r3
 8008cfc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d302      	bcc.n	8008d08 <UART_WaitOnFlagUntilTimeout+0x32>
 8008d02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d140      	bne.n	8008d8a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d10:	e853 3f00 	ldrex	r3, [r3]
 8008d14:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008d16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d18:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008d1c:	667b      	str	r3, [r7, #100]	; 0x64
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	461a      	mov	r2, r3
 8008d24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d28:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d2a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008d2c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008d2e:	e841 2300 	strex	r3, r2, [r1]
 8008d32:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008d34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d1e6      	bne.n	8008d08 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	3308      	adds	r3, #8
 8008d40:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d44:	e853 3f00 	ldrex	r3, [r3]
 8008d48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d4c:	f023 0301 	bic.w	r3, r3, #1
 8008d50:	663b      	str	r3, [r7, #96]	; 0x60
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	3308      	adds	r3, #8
 8008d58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008d5a:	64ba      	str	r2, [r7, #72]	; 0x48
 8008d5c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d5e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008d60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d62:	e841 2300 	strex	r3, r2, [r1]
 8008d66:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008d68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d1e5      	bne.n	8008d3a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	2220      	movs	r2, #32
 8008d72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2220      	movs	r2, #32
 8008d7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2200      	movs	r2, #0
 8008d82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008d86:	2303      	movs	r3, #3
 8008d88:	e069      	b.n	8008e5e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f003 0304 	and.w	r3, r3, #4
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d051      	beq.n	8008e3c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	69db      	ldr	r3, [r3, #28]
 8008d9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008da2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008da6:	d149      	bne.n	8008e3c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008db0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dba:	e853 3f00 	ldrex	r3, [r3]
 8008dbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008dc6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	461a      	mov	r2, r3
 8008dce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008dd0:	637b      	str	r3, [r7, #52]	; 0x34
 8008dd2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dd4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008dd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008dd8:	e841 2300 	strex	r3, r2, [r1]
 8008ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d1e6      	bne.n	8008db2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	3308      	adds	r3, #8
 8008dea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	e853 3f00 	ldrex	r3, [r3]
 8008df2:	613b      	str	r3, [r7, #16]
   return(result);
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	f023 0301 	bic.w	r3, r3, #1
 8008dfa:	66bb      	str	r3, [r7, #104]	; 0x68
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	3308      	adds	r3, #8
 8008e02:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008e04:	623a      	str	r2, [r7, #32]
 8008e06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e08:	69f9      	ldr	r1, [r7, #28]
 8008e0a:	6a3a      	ldr	r2, [r7, #32]
 8008e0c:	e841 2300 	strex	r3, r2, [r1]
 8008e10:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e12:	69bb      	ldr	r3, [r7, #24]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d1e5      	bne.n	8008de4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	2220      	movs	r2, #32
 8008e1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	2220      	movs	r2, #32
 8008e24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2220      	movs	r2, #32
 8008e2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	2200      	movs	r2, #0
 8008e34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008e38:	2303      	movs	r3, #3
 8008e3a:	e010      	b.n	8008e5e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	69da      	ldr	r2, [r3, #28]
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	4013      	ands	r3, r2
 8008e46:	68ba      	ldr	r2, [r7, #8]
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	bf0c      	ite	eq
 8008e4c:	2301      	moveq	r3, #1
 8008e4e:	2300      	movne	r3, #0
 8008e50:	b2db      	uxtb	r3, r3
 8008e52:	461a      	mov	r2, r3
 8008e54:	79fb      	ldrb	r3, [r7, #7]
 8008e56:	429a      	cmp	r2, r3
 8008e58:	f43f af46 	beq.w	8008ce8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e5c:	2300      	movs	r3, #0
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3770      	adds	r7, #112	; 0x70
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}

08008e66 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008e66:	b480      	push	{r7}
 8008e68:	b085      	sub	sp, #20
 8008e6a:	af00      	add	r7, sp, #0
 8008e6c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d101      	bne.n	8008e7c <HAL_UARTEx_DisableFifoMode+0x16>
 8008e78:	2302      	movs	r3, #2
 8008e7a:	e027      	b.n	8008ecc <HAL_UARTEx_DisableFifoMode+0x66>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2201      	movs	r2, #1
 8008e80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2224      	movs	r2, #36	; 0x24
 8008e88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	681a      	ldr	r2, [r3, #0]
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f022 0201 	bic.w	r2, r2, #1
 8008ea2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008eaa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	68fa      	ldr	r2, [r7, #12]
 8008eb8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2220      	movs	r2, #32
 8008ebe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008eca:	2300      	movs	r3, #0
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3714      	adds	r7, #20
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr

08008ed8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b084      	sub	sp, #16
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008ee8:	2b01      	cmp	r3, #1
 8008eea:	d101      	bne.n	8008ef0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008eec:	2302      	movs	r3, #2
 8008eee:	e02d      	b.n	8008f4c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2201      	movs	r2, #1
 8008ef4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2224      	movs	r2, #36	; 0x24
 8008efc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	681a      	ldr	r2, [r3, #0]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f022 0201 	bic.w	r2, r2, #1
 8008f16:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	689b      	ldr	r3, [r3, #8]
 8008f1e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	683a      	ldr	r2, [r7, #0]
 8008f28:	430a      	orrs	r2, r1
 8008f2a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f000 f84f 	bl	8008fd0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	68fa      	ldr	r2, [r7, #12]
 8008f38:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2220      	movs	r2, #32
 8008f3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2200      	movs	r2, #0
 8008f46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008f4a:	2300      	movs	r3, #0
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3710      	adds	r7, #16
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}

08008f54 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b084      	sub	sp, #16
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
 8008f5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	d101      	bne.n	8008f6c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008f68:	2302      	movs	r3, #2
 8008f6a:	e02d      	b.n	8008fc8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2201      	movs	r2, #1
 8008f70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2224      	movs	r2, #36	; 0x24
 8008f78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	681a      	ldr	r2, [r3, #0]
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f022 0201 	bic.w	r2, r2, #1
 8008f92:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	689b      	ldr	r3, [r3, #8]
 8008f9a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	683a      	ldr	r2, [r7, #0]
 8008fa4:	430a      	orrs	r2, r1
 8008fa6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f000 f811 	bl	8008fd0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	68fa      	ldr	r2, [r7, #12]
 8008fb4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2220      	movs	r2, #32
 8008fba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008fc6:	2300      	movs	r3, #0
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3710      	adds	r7, #16
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}

08008fd0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b085      	sub	sp, #20
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d108      	bne.n	8008ff2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2201      	movs	r2, #1
 8008fec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008ff0:	e031      	b.n	8009056 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008ff2:	2308      	movs	r3, #8
 8008ff4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008ff6:	2308      	movs	r3, #8
 8008ff8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	689b      	ldr	r3, [r3, #8]
 8009000:	0e5b      	lsrs	r3, r3, #25
 8009002:	b2db      	uxtb	r3, r3
 8009004:	f003 0307 	and.w	r3, r3, #7
 8009008:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	689b      	ldr	r3, [r3, #8]
 8009010:	0f5b      	lsrs	r3, r3, #29
 8009012:	b2db      	uxtb	r3, r3
 8009014:	f003 0307 	and.w	r3, r3, #7
 8009018:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800901a:	7bbb      	ldrb	r3, [r7, #14]
 800901c:	7b3a      	ldrb	r2, [r7, #12]
 800901e:	4911      	ldr	r1, [pc, #68]	; (8009064 <UARTEx_SetNbDataToProcess+0x94>)
 8009020:	5c8a      	ldrb	r2, [r1, r2]
 8009022:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009026:	7b3a      	ldrb	r2, [r7, #12]
 8009028:	490f      	ldr	r1, [pc, #60]	; (8009068 <UARTEx_SetNbDataToProcess+0x98>)
 800902a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800902c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009030:	b29a      	uxth	r2, r3
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009038:	7bfb      	ldrb	r3, [r7, #15]
 800903a:	7b7a      	ldrb	r2, [r7, #13]
 800903c:	4909      	ldr	r1, [pc, #36]	; (8009064 <UARTEx_SetNbDataToProcess+0x94>)
 800903e:	5c8a      	ldrb	r2, [r1, r2]
 8009040:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009044:	7b7a      	ldrb	r2, [r7, #13]
 8009046:	4908      	ldr	r1, [pc, #32]	; (8009068 <UARTEx_SetNbDataToProcess+0x98>)
 8009048:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800904a:	fb93 f3f2 	sdiv	r3, r3, r2
 800904e:	b29a      	uxth	r2, r3
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009056:	bf00      	nop
 8009058:	3714      	adds	r7, #20
 800905a:	46bd      	mov	sp, r7
 800905c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009060:	4770      	bx	lr
 8009062:	bf00      	nop
 8009064:	0800aad0 	.word	0x0800aad0
 8009068:	0800aad8 	.word	0x0800aad8

0800906c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800906c:	b480      	push	{r7}
 800906e:	b08b      	sub	sp, #44	; 0x2c
 8009070:	af00      	add	r7, sp, #0
 8009072:	60f8      	str	r0, [r7, #12]
 8009074:	60b9      	str	r1, [r7, #8]
 8009076:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681a      	ldr	r2, [r3, #0]
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	fa93 f3a3 	rbit	r3, r3
 8009086:	613b      	str	r3, [r7, #16]
  return result;
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800908c:	69bb      	ldr	r3, [r7, #24]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d101      	bne.n	8009096 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8009092:	2320      	movs	r3, #32
 8009094:	e003      	b.n	800909e <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8009096:	69bb      	ldr	r3, [r7, #24]
 8009098:	fab3 f383 	clz	r3, r3
 800909c:	b2db      	uxtb	r3, r3
 800909e:	005b      	lsls	r3, r3, #1
 80090a0:	2103      	movs	r1, #3
 80090a2:	fa01 f303 	lsl.w	r3, r1, r3
 80090a6:	43db      	mvns	r3, r3
 80090a8:	401a      	ands	r2, r3
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090ae:	6a3b      	ldr	r3, [r7, #32]
 80090b0:	fa93 f3a3 	rbit	r3, r3
 80090b4:	61fb      	str	r3, [r7, #28]
  return result;
 80090b6:	69fb      	ldr	r3, [r7, #28]
 80090b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80090ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d101      	bne.n	80090c4 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80090c0:	2320      	movs	r3, #32
 80090c2:	e003      	b.n	80090cc <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80090c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c6:	fab3 f383 	clz	r3, r3
 80090ca:	b2db      	uxtb	r3, r3
 80090cc:	005b      	lsls	r3, r3, #1
 80090ce:	6879      	ldr	r1, [r7, #4]
 80090d0:	fa01 f303 	lsl.w	r3, r1, r3
 80090d4:	431a      	orrs	r2, r3
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	601a      	str	r2, [r3, #0]
}
 80090da:	bf00      	nop
 80090dc:	372c      	adds	r7, #44	; 0x2c
 80090de:	46bd      	mov	sp, r7
 80090e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e4:	4770      	bx	lr

080090e6 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80090e6:	b480      	push	{r7}
 80090e8:	b085      	sub	sp, #20
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	60f8      	str	r0, [r7, #12]
 80090ee:	60b9      	str	r1, [r7, #8]
 80090f0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	685a      	ldr	r2, [r3, #4]
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	43db      	mvns	r3, r3
 80090fa:	401a      	ands	r2, r3
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	6879      	ldr	r1, [r7, #4]
 8009100:	fb01 f303 	mul.w	r3, r1, r3
 8009104:	431a      	orrs	r2, r3
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	605a      	str	r2, [r3, #4]
}
 800910a:	bf00      	nop
 800910c:	3714      	adds	r7, #20
 800910e:	46bd      	mov	sp, r7
 8009110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009114:	4770      	bx	lr

08009116 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8009116:	b480      	push	{r7}
 8009118:	b08b      	sub	sp, #44	; 0x2c
 800911a:	af00      	add	r7, sp, #0
 800911c:	60f8      	str	r0, [r7, #12]
 800911e:	60b9      	str	r1, [r7, #8]
 8009120:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	689a      	ldr	r2, [r3, #8]
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	fa93 f3a3 	rbit	r3, r3
 8009130:	613b      	str	r3, [r7, #16]
  return result;
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009136:	69bb      	ldr	r3, [r7, #24]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d101      	bne.n	8009140 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800913c:	2320      	movs	r3, #32
 800913e:	e003      	b.n	8009148 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8009140:	69bb      	ldr	r3, [r7, #24]
 8009142:	fab3 f383 	clz	r3, r3
 8009146:	b2db      	uxtb	r3, r3
 8009148:	005b      	lsls	r3, r3, #1
 800914a:	2103      	movs	r1, #3
 800914c:	fa01 f303 	lsl.w	r3, r1, r3
 8009150:	43db      	mvns	r3, r3
 8009152:	401a      	ands	r2, r3
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009158:	6a3b      	ldr	r3, [r7, #32]
 800915a:	fa93 f3a3 	rbit	r3, r3
 800915e:	61fb      	str	r3, [r7, #28]
  return result;
 8009160:	69fb      	ldr	r3, [r7, #28]
 8009162:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009166:	2b00      	cmp	r3, #0
 8009168:	d101      	bne.n	800916e <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800916a:	2320      	movs	r3, #32
 800916c:	e003      	b.n	8009176 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800916e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009170:	fab3 f383 	clz	r3, r3
 8009174:	b2db      	uxtb	r3, r3
 8009176:	005b      	lsls	r3, r3, #1
 8009178:	6879      	ldr	r1, [r7, #4]
 800917a:	fa01 f303 	lsl.w	r3, r1, r3
 800917e:	431a      	orrs	r2, r3
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8009184:	bf00      	nop
 8009186:	372c      	adds	r7, #44	; 0x2c
 8009188:	46bd      	mov	sp, r7
 800918a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918e:	4770      	bx	lr

08009190 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8009190:	b480      	push	{r7}
 8009192:	b08b      	sub	sp, #44	; 0x2c
 8009194:	af00      	add	r7, sp, #0
 8009196:	60f8      	str	r0, [r7, #12]
 8009198:	60b9      	str	r1, [r7, #8]
 800919a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	68da      	ldr	r2, [r3, #12]
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	fa93 f3a3 	rbit	r3, r3
 80091aa:	613b      	str	r3, [r7, #16]
  return result;
 80091ac:	693b      	ldr	r3, [r7, #16]
 80091ae:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80091b0:	69bb      	ldr	r3, [r7, #24]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d101      	bne.n	80091ba <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80091b6:	2320      	movs	r3, #32
 80091b8:	e003      	b.n	80091c2 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80091ba:	69bb      	ldr	r3, [r7, #24]
 80091bc:	fab3 f383 	clz	r3, r3
 80091c0:	b2db      	uxtb	r3, r3
 80091c2:	005b      	lsls	r3, r3, #1
 80091c4:	2103      	movs	r1, #3
 80091c6:	fa01 f303 	lsl.w	r3, r1, r3
 80091ca:	43db      	mvns	r3, r3
 80091cc:	401a      	ands	r2, r3
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091d2:	6a3b      	ldr	r3, [r7, #32]
 80091d4:	fa93 f3a3 	rbit	r3, r3
 80091d8:	61fb      	str	r3, [r7, #28]
  return result;
 80091da:	69fb      	ldr	r3, [r7, #28]
 80091dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80091de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d101      	bne.n	80091e8 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80091e4:	2320      	movs	r3, #32
 80091e6:	e003      	b.n	80091f0 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80091e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ea:	fab3 f383 	clz	r3, r3
 80091ee:	b2db      	uxtb	r3, r3
 80091f0:	005b      	lsls	r3, r3, #1
 80091f2:	6879      	ldr	r1, [r7, #4]
 80091f4:	fa01 f303 	lsl.w	r3, r1, r3
 80091f8:	431a      	orrs	r2, r3
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	60da      	str	r2, [r3, #12]
}
 80091fe:	bf00      	nop
 8009200:	372c      	adds	r7, #44	; 0x2c
 8009202:	46bd      	mov	sp, r7
 8009204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009208:	4770      	bx	lr

0800920a <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800920a:	b480      	push	{r7}
 800920c:	b08b      	sub	sp, #44	; 0x2c
 800920e:	af00      	add	r7, sp, #0
 8009210:	60f8      	str	r0, [r7, #12]
 8009212:	60b9      	str	r1, [r7, #8]
 8009214:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	6a1a      	ldr	r2, [r3, #32]
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	fa93 f3a3 	rbit	r3, r3
 8009224:	613b      	str	r3, [r7, #16]
  return result;
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800922a:	69bb      	ldr	r3, [r7, #24]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d101      	bne.n	8009234 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8009230:	2320      	movs	r3, #32
 8009232:	e003      	b.n	800923c <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8009234:	69bb      	ldr	r3, [r7, #24]
 8009236:	fab3 f383 	clz	r3, r3
 800923a:	b2db      	uxtb	r3, r3
 800923c:	009b      	lsls	r3, r3, #2
 800923e:	210f      	movs	r1, #15
 8009240:	fa01 f303 	lsl.w	r3, r1, r3
 8009244:	43db      	mvns	r3, r3
 8009246:	401a      	ands	r2, r3
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800924c:	6a3b      	ldr	r3, [r7, #32]
 800924e:	fa93 f3a3 	rbit	r3, r3
 8009252:	61fb      	str	r3, [r7, #28]
  return result;
 8009254:	69fb      	ldr	r3, [r7, #28]
 8009256:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800925a:	2b00      	cmp	r3, #0
 800925c:	d101      	bne.n	8009262 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800925e:	2320      	movs	r3, #32
 8009260:	e003      	b.n	800926a <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8009262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009264:	fab3 f383 	clz	r3, r3
 8009268:	b2db      	uxtb	r3, r3
 800926a:	009b      	lsls	r3, r3, #2
 800926c:	6879      	ldr	r1, [r7, #4]
 800926e:	fa01 f303 	lsl.w	r3, r1, r3
 8009272:	431a      	orrs	r2, r3
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8009278:	bf00      	nop
 800927a:	372c      	adds	r7, #44	; 0x2c
 800927c:	46bd      	mov	sp, r7
 800927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009282:	4770      	bx	lr

08009284 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8009284:	b480      	push	{r7}
 8009286:	b08b      	sub	sp, #44	; 0x2c
 8009288:	af00      	add	r7, sp, #0
 800928a:	60f8      	str	r0, [r7, #12]
 800928c:	60b9      	str	r1, [r7, #8]
 800928e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	0a1b      	lsrs	r3, r3, #8
 8009298:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	fa93 f3a3 	rbit	r3, r3
 80092a0:	613b      	str	r3, [r7, #16]
  return result;
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80092a6:	69bb      	ldr	r3, [r7, #24]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d101      	bne.n	80092b0 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80092ac:	2320      	movs	r3, #32
 80092ae:	e003      	b.n	80092b8 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80092b0:	69bb      	ldr	r3, [r7, #24]
 80092b2:	fab3 f383 	clz	r3, r3
 80092b6:	b2db      	uxtb	r3, r3
 80092b8:	009b      	lsls	r3, r3, #2
 80092ba:	210f      	movs	r1, #15
 80092bc:	fa01 f303 	lsl.w	r3, r1, r3
 80092c0:	43db      	mvns	r3, r3
 80092c2:	401a      	ands	r2, r3
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	0a1b      	lsrs	r3, r3, #8
 80092c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80092ca:	6a3b      	ldr	r3, [r7, #32]
 80092cc:	fa93 f3a3 	rbit	r3, r3
 80092d0:	61fb      	str	r3, [r7, #28]
  return result;
 80092d2:	69fb      	ldr	r3, [r7, #28]
 80092d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80092d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d101      	bne.n	80092e0 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80092dc:	2320      	movs	r3, #32
 80092de:	e003      	b.n	80092e8 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80092e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e2:	fab3 f383 	clz	r3, r3
 80092e6:	b2db      	uxtb	r3, r3
 80092e8:	009b      	lsls	r3, r3, #2
 80092ea:	6879      	ldr	r1, [r7, #4]
 80092ec:	fa01 f303 	lsl.w	r3, r1, r3
 80092f0:	431a      	orrs	r2, r3
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80092f6:	bf00      	nop
 80092f8:	372c      	adds	r7, #44	; 0x2c
 80092fa:	46bd      	mov	sp, r7
 80092fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009300:	4770      	bx	lr

08009302 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8009302:	b580      	push	{r7, lr}
 8009304:	b08a      	sub	sp, #40	; 0x28
 8009306:	af00      	add	r7, sp, #0
 8009308:	6078      	str	r0, [r7, #4]
 800930a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009312:	69bb      	ldr	r3, [r7, #24]
 8009314:	fa93 f3a3 	rbit	r3, r3
 8009318:	617b      	str	r3, [r7, #20]
  return result;
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800931e:	69fb      	ldr	r3, [r7, #28]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d101      	bne.n	8009328 <LL_GPIO_Init+0x26>
    return 32U;
 8009324:	2320      	movs	r3, #32
 8009326:	e003      	b.n	8009330 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8009328:	69fb      	ldr	r3, [r7, #28]
 800932a:	fab3 f383 	clz	r3, r3
 800932e:	b2db      	uxtb	r3, r3
 8009330:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 8009332:	e050      	b.n	80093d6 <LL_GPIO_Init+0xd4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	681a      	ldr	r2, [r3, #0]
 8009338:	2101      	movs	r1, #1
 800933a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800933c:	fa01 f303 	lsl.w	r3, r1, r3
 8009340:	4013      	ands	r3, r2
 8009342:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 8009344:	6a3b      	ldr	r3, [r7, #32]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d042      	beq.n	80093d0 <LL_GPIO_Init+0xce>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	685b      	ldr	r3, [r3, #4]
 800934e:	461a      	mov	r2, r3
 8009350:	6a39      	ldr	r1, [r7, #32]
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f7ff fe8a 	bl	800906c <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	685b      	ldr	r3, [r3, #4]
 800935c:	2b01      	cmp	r3, #1
 800935e:	d003      	beq.n	8009368 <LL_GPIO_Init+0x66>
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	685b      	ldr	r3, [r3, #4]
 8009364:	2b02      	cmp	r3, #2
 8009366:	d106      	bne.n	8009376 <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	689b      	ldr	r3, [r3, #8]
 800936c:	461a      	mov	r2, r3
 800936e:	6a39      	ldr	r1, [r7, #32]
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f7ff fed0 	bl	8009116 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	691b      	ldr	r3, [r3, #16]
 800937a:	461a      	mov	r2, r3
 800937c:	6a39      	ldr	r1, [r7, #32]
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f7ff ff06 	bl	8009190 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	685b      	ldr	r3, [r3, #4]
 8009388:	2b02      	cmp	r3, #2
 800938a:	d121      	bne.n	80093d0 <LL_GPIO_Init+0xce>
 800938c:	6a3b      	ldr	r3, [r7, #32]
 800938e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	fa93 f3a3 	rbit	r3, r3
 8009396:	60bb      	str	r3, [r7, #8]
  return result;
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d101      	bne.n	80093a6 <LL_GPIO_Init+0xa4>
    return 32U;
 80093a2:	2320      	movs	r3, #32
 80093a4:	e003      	b.n	80093ae <LL_GPIO_Init+0xac>
  return __builtin_clz(value);
 80093a6:	693b      	ldr	r3, [r7, #16]
 80093a8:	fab3 f383 	clz	r3, r3
 80093ac:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 80093ae:	2b07      	cmp	r3, #7
 80093b0:	d807      	bhi.n	80093c2 <LL_GPIO_Init+0xc0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	695b      	ldr	r3, [r3, #20]
 80093b6:	461a      	mov	r2, r3
 80093b8:	6a39      	ldr	r1, [r7, #32]
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f7ff ff25 	bl	800920a <LL_GPIO_SetAFPin_0_7>
 80093c0:	e006      	b.n	80093d0 <LL_GPIO_Init+0xce>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	695b      	ldr	r3, [r3, #20]
 80093c6:	461a      	mov	r2, r3
 80093c8:	6a39      	ldr	r1, [r7, #32]
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f7ff ff5a 	bl	8009284 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 80093d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d2:	3301      	adds	r3, #1
 80093d4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	681a      	ldr	r2, [r3, #0]
 80093da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093dc:	fa22 f303 	lsr.w	r3, r2, r3
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d1a7      	bne.n	8009334 <LL_GPIO_Init+0x32>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	685b      	ldr	r3, [r3, #4]
 80093e8:	2b01      	cmp	r3, #1
 80093ea:	d003      	beq.n	80093f4 <LL_GPIO_Init+0xf2>
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	2b02      	cmp	r3, #2
 80093f2:	d107      	bne.n	8009404 <LL_GPIO_Init+0x102>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	6819      	ldr	r1, [r3, #0]
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	68db      	ldr	r3, [r3, #12]
 80093fc:	461a      	mov	r2, r3
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f7ff fe71 	bl	80090e6 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8009404:	2300      	movs	r3, #0
}
 8009406:	4618      	mov	r0, r3
 8009408:	3728      	adds	r7, #40	; 0x28
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}

0800940e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800940e:	b084      	sub	sp, #16
 8009410:	b580      	push	{r7, lr}
 8009412:	b084      	sub	sp, #16
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
 8009418:	f107 001c 	add.w	r0, r7, #28
 800941c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	68db      	ldr	r3, [r3, #12]
 8009424:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f000 fd8f 	bl	8009f50 <USB_CoreReset>
 8009432:	4603      	mov	r3, r0
 8009434:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8009436:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009438:	2b00      	cmp	r3, #0
 800943a:	d106      	bne.n	800944a <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009440:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	639a      	str	r2, [r3, #56]	; 0x38
 8009448:	e005      	b.n	8009456 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800944e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */

  return ret;
 8009456:	7bfb      	ldrb	r3, [r7, #15]
}
 8009458:	4618      	mov	r0, r3
 800945a:	3710      	adds	r7, #16
 800945c:	46bd      	mov	sp, r7
 800945e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009462:	b004      	add	sp, #16
 8009464:	4770      	bx	lr
	...

08009468 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009468:	b480      	push	{r7}
 800946a:	b087      	sub	sp, #28
 800946c:	af00      	add	r7, sp, #0
 800946e:	60f8      	str	r0, [r7, #12]
 8009470:	60b9      	str	r1, [r7, #8]
 8009472:	4613      	mov	r3, r2
 8009474:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009476:	79fb      	ldrb	r3, [r7, #7]
 8009478:	2b02      	cmp	r3, #2
 800947a:	d165      	bne.n	8009548 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	4a41      	ldr	r2, [pc, #260]	; (8009584 <USB_SetTurnaroundTime+0x11c>)
 8009480:	4293      	cmp	r3, r2
 8009482:	d906      	bls.n	8009492 <USB_SetTurnaroundTime+0x2a>
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	4a40      	ldr	r2, [pc, #256]	; (8009588 <USB_SetTurnaroundTime+0x120>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d202      	bcs.n	8009492 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800948c:	230f      	movs	r3, #15
 800948e:	617b      	str	r3, [r7, #20]
 8009490:	e062      	b.n	8009558 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	4a3c      	ldr	r2, [pc, #240]	; (8009588 <USB_SetTurnaroundTime+0x120>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d306      	bcc.n	80094a8 <USB_SetTurnaroundTime+0x40>
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	4a3b      	ldr	r2, [pc, #236]	; (800958c <USB_SetTurnaroundTime+0x124>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d202      	bcs.n	80094a8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80094a2:	230e      	movs	r3, #14
 80094a4:	617b      	str	r3, [r7, #20]
 80094a6:	e057      	b.n	8009558 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	4a38      	ldr	r2, [pc, #224]	; (800958c <USB_SetTurnaroundTime+0x124>)
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d306      	bcc.n	80094be <USB_SetTurnaroundTime+0x56>
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	4a37      	ldr	r2, [pc, #220]	; (8009590 <USB_SetTurnaroundTime+0x128>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d202      	bcs.n	80094be <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80094b8:	230d      	movs	r3, #13
 80094ba:	617b      	str	r3, [r7, #20]
 80094bc:	e04c      	b.n	8009558 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	4a33      	ldr	r2, [pc, #204]	; (8009590 <USB_SetTurnaroundTime+0x128>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d306      	bcc.n	80094d4 <USB_SetTurnaroundTime+0x6c>
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	4a32      	ldr	r2, [pc, #200]	; (8009594 <USB_SetTurnaroundTime+0x12c>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d802      	bhi.n	80094d4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80094ce:	230c      	movs	r3, #12
 80094d0:	617b      	str	r3, [r7, #20]
 80094d2:	e041      	b.n	8009558 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	4a2f      	ldr	r2, [pc, #188]	; (8009594 <USB_SetTurnaroundTime+0x12c>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d906      	bls.n	80094ea <USB_SetTurnaroundTime+0x82>
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	4a2e      	ldr	r2, [pc, #184]	; (8009598 <USB_SetTurnaroundTime+0x130>)
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d802      	bhi.n	80094ea <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80094e4:	230b      	movs	r3, #11
 80094e6:	617b      	str	r3, [r7, #20]
 80094e8:	e036      	b.n	8009558 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	4a2a      	ldr	r2, [pc, #168]	; (8009598 <USB_SetTurnaroundTime+0x130>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d906      	bls.n	8009500 <USB_SetTurnaroundTime+0x98>
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	4a29      	ldr	r2, [pc, #164]	; (800959c <USB_SetTurnaroundTime+0x134>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d802      	bhi.n	8009500 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80094fa:	230a      	movs	r3, #10
 80094fc:	617b      	str	r3, [r7, #20]
 80094fe:	e02b      	b.n	8009558 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	4a26      	ldr	r2, [pc, #152]	; (800959c <USB_SetTurnaroundTime+0x134>)
 8009504:	4293      	cmp	r3, r2
 8009506:	d906      	bls.n	8009516 <USB_SetTurnaroundTime+0xae>
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	4a25      	ldr	r2, [pc, #148]	; (80095a0 <USB_SetTurnaroundTime+0x138>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d202      	bcs.n	8009516 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009510:	2309      	movs	r3, #9
 8009512:	617b      	str	r3, [r7, #20]
 8009514:	e020      	b.n	8009558 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	4a21      	ldr	r2, [pc, #132]	; (80095a0 <USB_SetTurnaroundTime+0x138>)
 800951a:	4293      	cmp	r3, r2
 800951c:	d306      	bcc.n	800952c <USB_SetTurnaroundTime+0xc4>
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	4a20      	ldr	r2, [pc, #128]	; (80095a4 <USB_SetTurnaroundTime+0x13c>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d802      	bhi.n	800952c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009526:	2308      	movs	r3, #8
 8009528:	617b      	str	r3, [r7, #20]
 800952a:	e015      	b.n	8009558 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	4a1d      	ldr	r2, [pc, #116]	; (80095a4 <USB_SetTurnaroundTime+0x13c>)
 8009530:	4293      	cmp	r3, r2
 8009532:	d906      	bls.n	8009542 <USB_SetTurnaroundTime+0xda>
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	4a1c      	ldr	r2, [pc, #112]	; (80095a8 <USB_SetTurnaroundTime+0x140>)
 8009538:	4293      	cmp	r3, r2
 800953a:	d202      	bcs.n	8009542 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800953c:	2307      	movs	r3, #7
 800953e:	617b      	str	r3, [r7, #20]
 8009540:	e00a      	b.n	8009558 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009542:	2306      	movs	r3, #6
 8009544:	617b      	str	r3, [r7, #20]
 8009546:	e007      	b.n	8009558 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009548:	79fb      	ldrb	r3, [r7, #7]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d102      	bne.n	8009554 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800954e:	2309      	movs	r3, #9
 8009550:	617b      	str	r3, [r7, #20]
 8009552:	e001      	b.n	8009558 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009554:	2309      	movs	r3, #9
 8009556:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	68db      	ldr	r3, [r3, #12]
 800955c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	68da      	ldr	r2, [r3, #12]
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	029b      	lsls	r3, r3, #10
 800956c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009570:	431a      	orrs	r2, r3
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009576:	2300      	movs	r3, #0
}
 8009578:	4618      	mov	r0, r3
 800957a:	371c      	adds	r7, #28
 800957c:	46bd      	mov	sp, r7
 800957e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009582:	4770      	bx	lr
 8009584:	00d8acbf 	.word	0x00d8acbf
 8009588:	00e4e1c0 	.word	0x00e4e1c0
 800958c:	00f42400 	.word	0x00f42400
 8009590:	01067380 	.word	0x01067380
 8009594:	011a499f 	.word	0x011a499f
 8009598:	01312cff 	.word	0x01312cff
 800959c:	014ca43f 	.word	0x014ca43f
 80095a0:	016e3600 	.word	0x016e3600
 80095a4:	01a6ab1f 	.word	0x01a6ab1f
 80095a8:	01e84800 	.word	0x01e84800

080095ac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b083      	sub	sp, #12
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	689b      	ldr	r3, [r3, #8]
 80095b8:	f023 0201 	bic.w	r2, r3, #1
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80095c0:	2300      	movs	r3, #0
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	370c      	adds	r7, #12
 80095c6:	46bd      	mov	sp, r7
 80095c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095cc:	4770      	bx	lr

080095ce <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80095ce:	b580      	push	{r7, lr}
 80095d0:	b084      	sub	sp, #16
 80095d2:	af00      	add	r7, sp, #0
 80095d4:	6078      	str	r0, [r7, #4]
 80095d6:	460b      	mov	r3, r1
 80095d8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80095da:	2300      	movs	r3, #0
 80095dc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	68db      	ldr	r3, [r3, #12]
 80095e2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80095ea:	78fb      	ldrb	r3, [r7, #3]
 80095ec:	2b01      	cmp	r3, #1
 80095ee:	d115      	bne.n	800961c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	68db      	ldr	r3, [r3, #12]
 80095f4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80095fc:	2001      	movs	r0, #1
 80095fe:	f7f7 ff03 	bl	8001408 <HAL_Delay>
      ms++;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	3301      	adds	r3, #1
 8009606:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f000 fc11 	bl	8009e30 <USB_GetMode>
 800960e:	4603      	mov	r3, r0
 8009610:	2b01      	cmp	r3, #1
 8009612:	d01e      	beq.n	8009652 <USB_SetCurrentMode+0x84>
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	2b31      	cmp	r3, #49	; 0x31
 8009618:	d9f0      	bls.n	80095fc <USB_SetCurrentMode+0x2e>
 800961a:	e01a      	b.n	8009652 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800961c:	78fb      	ldrb	r3, [r7, #3]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d115      	bne.n	800964e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	68db      	ldr	r3, [r3, #12]
 8009626:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800962e:	2001      	movs	r0, #1
 8009630:	f7f7 feea 	bl	8001408 <HAL_Delay>
      ms++;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	3301      	adds	r3, #1
 8009638:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f000 fbf8 	bl	8009e30 <USB_GetMode>
 8009640:	4603      	mov	r3, r0
 8009642:	2b00      	cmp	r3, #0
 8009644:	d005      	beq.n	8009652 <USB_SetCurrentMode+0x84>
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	2b31      	cmp	r3, #49	; 0x31
 800964a:	d9f0      	bls.n	800962e <USB_SetCurrentMode+0x60>
 800964c:	e001      	b.n	8009652 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800964e:	2301      	movs	r3, #1
 8009650:	e005      	b.n	800965e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	2b32      	cmp	r3, #50	; 0x32
 8009656:	d101      	bne.n	800965c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009658:	2301      	movs	r3, #1
 800965a:	e000      	b.n	800965e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800965c:	2300      	movs	r3, #0
}
 800965e:	4618      	mov	r0, r3
 8009660:	3710      	adds	r7, #16
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}
	...

08009668 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009668:	b084      	sub	sp, #16
 800966a:	b580      	push	{r7, lr}
 800966c:	b086      	sub	sp, #24
 800966e:	af00      	add	r7, sp, #0
 8009670:	6078      	str	r0, [r7, #4]
 8009672:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009676:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800967a:	2300      	movs	r3, #0
 800967c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009682:	2300      	movs	r3, #0
 8009684:	613b      	str	r3, [r7, #16]
 8009686:	e009      	b.n	800969c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009688:	687a      	ldr	r2, [r7, #4]
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	3340      	adds	r3, #64	; 0x40
 800968e:	009b      	lsls	r3, r3, #2
 8009690:	4413      	add	r3, r2
 8009692:	2200      	movs	r2, #0
 8009694:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	3301      	adds	r3, #1
 800969a:	613b      	str	r3, [r7, #16]
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	2b0e      	cmp	r3, #14
 80096a0:	d9f2      	bls.n	8009688 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80096a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d11c      	bne.n	80096e2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096ae:	685b      	ldr	r3, [r3, #4]
 80096b0:	68fa      	ldr	r2, [r7, #12]
 80096b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80096b6:	f043 0302 	orr.w	r3, r3, #2
 80096ba:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096c0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	639a      	str	r2, [r3, #56]	; 0x38
    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	601a      	str	r2, [r3, #0]
 80096e0:	e005      	b.n	80096ee <USB_DevInit+0x86>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096e6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80096f4:	461a      	mov	r2, r3
 80096f6:	2300      	movs	r3, #0
 80096f8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009700:	4619      	mov	r1, r3
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009708:	461a      	mov	r2, r3
 800970a:	680b      	ldr	r3, [r1, #0]
 800970c:	6013      	str	r3, [r2, #0]
  }
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800970e:	2103      	movs	r1, #3
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f000 f95b 	bl	80099cc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009716:	2110      	movs	r1, #16
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f000 f8f3 	bl	8009904 <USB_FlushTxFifo>
 800971e:	4603      	mov	r3, r0
 8009720:	2b00      	cmp	r3, #0
 8009722:	d001      	beq.n	8009728 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8009724:	2301      	movs	r3, #1
 8009726:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f000 f91f 	bl	800996c <USB_FlushRxFifo>
 800972e:	4603      	mov	r3, r0
 8009730:	2b00      	cmp	r3, #0
 8009732:	d001      	beq.n	8009738 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8009734:	2301      	movs	r3, #1
 8009736:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800973e:	461a      	mov	r2, r3
 8009740:	2300      	movs	r3, #0
 8009742:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800974a:	461a      	mov	r2, r3
 800974c:	2300      	movs	r3, #0
 800974e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009756:	461a      	mov	r2, r3
 8009758:	2300      	movs	r3, #0
 800975a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800975c:	2300      	movs	r3, #0
 800975e:	613b      	str	r3, [r7, #16]
 8009760:	e043      	b.n	80097ea <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	015a      	lsls	r2, r3, #5
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	4413      	add	r3, r2
 800976a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009774:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009778:	d118      	bne.n	80097ac <USB_DevInit+0x144>
    {
      if (i == 0U)
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d10a      	bne.n	8009796 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	015a      	lsls	r2, r3, #5
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	4413      	add	r3, r2
 8009788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800978c:	461a      	mov	r2, r3
 800978e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009792:	6013      	str	r3, [r2, #0]
 8009794:	e013      	b.n	80097be <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009796:	693b      	ldr	r3, [r7, #16]
 8009798:	015a      	lsls	r2, r3, #5
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	4413      	add	r3, r2
 800979e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097a2:	461a      	mov	r2, r3
 80097a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80097a8:	6013      	str	r3, [r2, #0]
 80097aa:	e008      	b.n	80097be <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	015a      	lsls	r2, r3, #5
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	4413      	add	r3, r2
 80097b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097b8:	461a      	mov	r2, r3
 80097ba:	2300      	movs	r3, #0
 80097bc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80097be:	693b      	ldr	r3, [r7, #16]
 80097c0:	015a      	lsls	r2, r3, #5
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	4413      	add	r3, r2
 80097c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097ca:	461a      	mov	r2, r3
 80097cc:	2300      	movs	r3, #0
 80097ce:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	015a      	lsls	r2, r3, #5
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	4413      	add	r3, r2
 80097d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097dc:	461a      	mov	r2, r3
 80097de:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80097e2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80097e4:	693b      	ldr	r3, [r7, #16]
 80097e6:	3301      	adds	r3, #1
 80097e8:	613b      	str	r3, [r7, #16]
 80097ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ec:	693a      	ldr	r2, [r7, #16]
 80097ee:	429a      	cmp	r2, r3
 80097f0:	d3b7      	bcc.n	8009762 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80097f2:	2300      	movs	r3, #0
 80097f4:	613b      	str	r3, [r7, #16]
 80097f6:	e043      	b.n	8009880 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80097f8:	693b      	ldr	r3, [r7, #16]
 80097fa:	015a      	lsls	r2, r3, #5
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	4413      	add	r3, r2
 8009800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800980a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800980e:	d118      	bne.n	8009842 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d10a      	bne.n	800982c <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	015a      	lsls	r2, r3, #5
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	4413      	add	r3, r2
 800981e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009822:	461a      	mov	r2, r3
 8009824:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009828:	6013      	str	r3, [r2, #0]
 800982a:	e013      	b.n	8009854 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	015a      	lsls	r2, r3, #5
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	4413      	add	r3, r2
 8009834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009838:	461a      	mov	r2, r3
 800983a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800983e:	6013      	str	r3, [r2, #0]
 8009840:	e008      	b.n	8009854 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	015a      	lsls	r2, r3, #5
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	4413      	add	r3, r2
 800984a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800984e:	461a      	mov	r2, r3
 8009850:	2300      	movs	r3, #0
 8009852:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	015a      	lsls	r2, r3, #5
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	4413      	add	r3, r2
 800985c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009860:	461a      	mov	r2, r3
 8009862:	2300      	movs	r3, #0
 8009864:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	015a      	lsls	r2, r3, #5
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	4413      	add	r3, r2
 800986e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009872:	461a      	mov	r2, r3
 8009874:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009878:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800987a:	693b      	ldr	r3, [r7, #16]
 800987c:	3301      	adds	r3, #1
 800987e:	613b      	str	r3, [r7, #16]
 8009880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009882:	693a      	ldr	r2, [r7, #16]
 8009884:	429a      	cmp	r2, r3
 8009886:	d3b7      	bcc.n	80097f8 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800988e:	691b      	ldr	r3, [r3, #16]
 8009890:	68fa      	ldr	r2, [r7, #12]
 8009892:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009896:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800989a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2200      	movs	r2, #0
 80098a0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80098a8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80098aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d105      	bne.n	80098bc <USB_DevInit+0x254>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	699b      	ldr	r3, [r3, #24]
 80098b4:	f043 0210 	orr.w	r2, r3, #16
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	699a      	ldr	r2, [r3, #24]
 80098c0:	4b0f      	ldr	r3, [pc, #60]	; (8009900 <USB_DevInit+0x298>)
 80098c2:	4313      	orrs	r3, r2
 80098c4:	687a      	ldr	r2, [r7, #4]
 80098c6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80098c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d005      	beq.n	80098da <USB_DevInit+0x272>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	699b      	ldr	r3, [r3, #24]
 80098d2:	f043 0208 	orr.w	r2, r3, #8
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80098da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098dc:	2b01      	cmp	r3, #1
 80098de:	d107      	bne.n	80098f0 <USB_DevInit+0x288>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	699b      	ldr	r3, [r3, #24]
 80098e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80098e8:	f043 0304 	orr.w	r3, r3, #4
 80098ec:	687a      	ldr	r2, [r7, #4]
 80098ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80098f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3718      	adds	r7, #24
 80098f6:	46bd      	mov	sp, r7
 80098f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80098fc:	b004      	add	sp, #16
 80098fe:	4770      	bx	lr
 8009900:	803c3800 	.word	0x803c3800

08009904 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009904:	b480      	push	{r7}
 8009906:	b085      	sub	sp, #20
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
 800990c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800990e:	2300      	movs	r3, #0
 8009910:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	3301      	adds	r3, #1
 8009916:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	4a13      	ldr	r2, [pc, #76]	; (8009968 <USB_FlushTxFifo+0x64>)
 800991c:	4293      	cmp	r3, r2
 800991e:	d901      	bls.n	8009924 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009920:	2303      	movs	r3, #3
 8009922:	e01b      	b.n	800995c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	691b      	ldr	r3, [r3, #16]
 8009928:	2b00      	cmp	r3, #0
 800992a:	daf2      	bge.n	8009912 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800992c:	2300      	movs	r3, #0
 800992e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	019b      	lsls	r3, r3, #6
 8009934:	f043 0220 	orr.w	r2, r3, #32
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	3301      	adds	r3, #1
 8009940:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	4a08      	ldr	r2, [pc, #32]	; (8009968 <USB_FlushTxFifo+0x64>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d901      	bls.n	800994e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800994a:	2303      	movs	r3, #3
 800994c:	e006      	b.n	800995c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	691b      	ldr	r3, [r3, #16]
 8009952:	f003 0320 	and.w	r3, r3, #32
 8009956:	2b20      	cmp	r3, #32
 8009958:	d0f0      	beq.n	800993c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800995a:	2300      	movs	r3, #0
}
 800995c:	4618      	mov	r0, r3
 800995e:	3714      	adds	r7, #20
 8009960:	46bd      	mov	sp, r7
 8009962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009966:	4770      	bx	lr
 8009968:	00030d40 	.word	0x00030d40

0800996c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800996c:	b480      	push	{r7}
 800996e:	b085      	sub	sp, #20
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009974:	2300      	movs	r3, #0
 8009976:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	3301      	adds	r3, #1
 800997c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	4a11      	ldr	r2, [pc, #68]	; (80099c8 <USB_FlushRxFifo+0x5c>)
 8009982:	4293      	cmp	r3, r2
 8009984:	d901      	bls.n	800998a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009986:	2303      	movs	r3, #3
 8009988:	e018      	b.n	80099bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	691b      	ldr	r3, [r3, #16]
 800998e:	2b00      	cmp	r3, #0
 8009990:	daf2      	bge.n	8009978 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009992:	2300      	movs	r3, #0
 8009994:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2210      	movs	r2, #16
 800999a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	3301      	adds	r3, #1
 80099a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	4a08      	ldr	r2, [pc, #32]	; (80099c8 <USB_FlushRxFifo+0x5c>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d901      	bls.n	80099ae <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80099aa:	2303      	movs	r3, #3
 80099ac:	e006      	b.n	80099bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	691b      	ldr	r3, [r3, #16]
 80099b2:	f003 0310 	and.w	r3, r3, #16
 80099b6:	2b10      	cmp	r3, #16
 80099b8:	d0f0      	beq.n	800999c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80099ba:	2300      	movs	r3, #0
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3714      	adds	r7, #20
 80099c0:	46bd      	mov	sp, r7
 80099c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c6:	4770      	bx	lr
 80099c8:	00030d40 	.word	0x00030d40

080099cc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80099cc:	b480      	push	{r7}
 80099ce:	b085      	sub	sp, #20
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
 80099d4:	460b      	mov	r3, r1
 80099d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099e2:	681a      	ldr	r2, [r3, #0]
 80099e4:	78fb      	ldrb	r3, [r7, #3]
 80099e6:	68f9      	ldr	r1, [r7, #12]
 80099e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80099ec:	4313      	orrs	r3, r2
 80099ee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80099f0:	2300      	movs	r3, #0
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3714      	adds	r7, #20
 80099f6:	46bd      	mov	sp, r7
 80099f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fc:	4770      	bx	lr

080099fe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80099fe:	b480      	push	{r7}
 8009a00:	b087      	sub	sp, #28
 8009a02:	af00      	add	r7, sp, #0
 8009a04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a10:	689b      	ldr	r3, [r3, #8]
 8009a12:	f003 0306 	and.w	r3, r3, #6
 8009a16:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d102      	bne.n	8009a24 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	75fb      	strb	r3, [r7, #23]
 8009a22:	e00a      	b.n	8009a3a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2b02      	cmp	r3, #2
 8009a28:	d002      	beq.n	8009a30 <USB_GetDevSpeed+0x32>
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	2b06      	cmp	r3, #6
 8009a2e:	d102      	bne.n	8009a36 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009a30:	2302      	movs	r3, #2
 8009a32:	75fb      	strb	r3, [r7, #23]
 8009a34:	e001      	b.n	8009a3a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009a36:	230f      	movs	r3, #15
 8009a38:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009a3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	371c      	adds	r7, #28
 8009a40:	46bd      	mov	sp, r7
 8009a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a46:	4770      	bx	lr

08009a48 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b087      	sub	sp, #28
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
 8009a50:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009a52:	2300      	movs	r3, #0
 8009a54:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009a56:	2300      	movs	r3, #0
 8009a58:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	785b      	ldrb	r3, [r3, #1]
 8009a62:	2b01      	cmp	r3, #1
 8009a64:	d14a      	bne.n	8009afc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	781b      	ldrb	r3, [r3, #0]
 8009a6a:	015a      	lsls	r2, r3, #5
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	4413      	add	r3, r2
 8009a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a7e:	f040 8086 	bne.w	8009b8e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	781b      	ldrb	r3, [r3, #0]
 8009a86:	015a      	lsls	r2, r3, #5
 8009a88:	693b      	ldr	r3, [r7, #16]
 8009a8a:	4413      	add	r3, r2
 8009a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	683a      	ldr	r2, [r7, #0]
 8009a94:	7812      	ldrb	r2, [r2, #0]
 8009a96:	0151      	lsls	r1, r2, #5
 8009a98:	693a      	ldr	r2, [r7, #16]
 8009a9a:	440a      	add	r2, r1
 8009a9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009aa0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009aa4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	781b      	ldrb	r3, [r3, #0]
 8009aaa:	015a      	lsls	r2, r3, #5
 8009aac:	693b      	ldr	r3, [r7, #16]
 8009aae:	4413      	add	r3, r2
 8009ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	683a      	ldr	r2, [r7, #0]
 8009ab8:	7812      	ldrb	r2, [r2, #0]
 8009aba:	0151      	lsls	r1, r2, #5
 8009abc:	693a      	ldr	r2, [r7, #16]
 8009abe:	440a      	add	r2, r1
 8009ac0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ac4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009ac8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	3301      	adds	r3, #1
 8009ace:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	f242 7210 	movw	r2, #10000	; 0x2710
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	d902      	bls.n	8009ae0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009ada:	2301      	movs	r3, #1
 8009adc:	75fb      	strb	r3, [r7, #23]
          break;
 8009ade:	e056      	b.n	8009b8e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	781b      	ldrb	r3, [r3, #0]
 8009ae4:	015a      	lsls	r2, r3, #5
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	4413      	add	r3, r2
 8009aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009af4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009af8:	d0e7      	beq.n	8009aca <USB_EPStopXfer+0x82>
 8009afa:	e048      	b.n	8009b8e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	781b      	ldrb	r3, [r3, #0]
 8009b00:	015a      	lsls	r2, r3, #5
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	4413      	add	r3, r2
 8009b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b14:	d13b      	bne.n	8009b8e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	781b      	ldrb	r3, [r3, #0]
 8009b1a:	015a      	lsls	r2, r3, #5
 8009b1c:	693b      	ldr	r3, [r7, #16]
 8009b1e:	4413      	add	r3, r2
 8009b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	683a      	ldr	r2, [r7, #0]
 8009b28:	7812      	ldrb	r2, [r2, #0]
 8009b2a:	0151      	lsls	r1, r2, #5
 8009b2c:	693a      	ldr	r2, [r7, #16]
 8009b2e:	440a      	add	r2, r1
 8009b30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b34:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009b38:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	781b      	ldrb	r3, [r3, #0]
 8009b3e:	015a      	lsls	r2, r3, #5
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	4413      	add	r3, r2
 8009b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	683a      	ldr	r2, [r7, #0]
 8009b4c:	7812      	ldrb	r2, [r2, #0]
 8009b4e:	0151      	lsls	r1, r2, #5
 8009b50:	693a      	ldr	r2, [r7, #16]
 8009b52:	440a      	add	r2, r1
 8009b54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009b5c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	3301      	adds	r3, #1
 8009b62:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	f242 7210 	movw	r2, #10000	; 0x2710
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d902      	bls.n	8009b74 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009b6e:	2301      	movs	r3, #1
 8009b70:	75fb      	strb	r3, [r7, #23]
          break;
 8009b72:	e00c      	b.n	8009b8e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	781b      	ldrb	r3, [r3, #0]
 8009b78:	015a      	lsls	r2, r3, #5
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	4413      	add	r3, r2
 8009b7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b8c:	d0e7      	beq.n	8009b5e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009b8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	371c      	adds	r7, #28
 8009b94:	46bd      	mov	sp, r7
 8009b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9a:	4770      	bx	lr

08009b9c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	b089      	sub	sp, #36	; 0x24
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	60f8      	str	r0, [r7, #12]
 8009ba4:	60b9      	str	r1, [r7, #8]
 8009ba6:	4611      	mov	r1, r2
 8009ba8:	461a      	mov	r2, r3
 8009baa:	460b      	mov	r3, r1
 8009bac:	71fb      	strb	r3, [r7, #7]
 8009bae:	4613      	mov	r3, r2
 8009bb0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009bba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d123      	bne.n	8009c0a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009bc2:	88bb      	ldrh	r3, [r7, #4]
 8009bc4:	3303      	adds	r3, #3
 8009bc6:	089b      	lsrs	r3, r3, #2
 8009bc8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009bca:	2300      	movs	r3, #0
 8009bcc:	61bb      	str	r3, [r7, #24]
 8009bce:	e018      	b.n	8009c02 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009bd0:	79fb      	ldrb	r3, [r7, #7]
 8009bd2:	031a      	lsls	r2, r3, #12
 8009bd4:	697b      	ldr	r3, [r7, #20]
 8009bd6:	4413      	add	r3, r2
 8009bd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bdc:	461a      	mov	r2, r3
 8009bde:	69fb      	ldr	r3, [r7, #28]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009be4:	69fb      	ldr	r3, [r7, #28]
 8009be6:	3301      	adds	r3, #1
 8009be8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009bea:	69fb      	ldr	r3, [r7, #28]
 8009bec:	3301      	adds	r3, #1
 8009bee:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009bf0:	69fb      	ldr	r3, [r7, #28]
 8009bf2:	3301      	adds	r3, #1
 8009bf4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009bf6:	69fb      	ldr	r3, [r7, #28]
 8009bf8:	3301      	adds	r3, #1
 8009bfa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009bfc:	69bb      	ldr	r3, [r7, #24]
 8009bfe:	3301      	adds	r3, #1
 8009c00:	61bb      	str	r3, [r7, #24]
 8009c02:	69ba      	ldr	r2, [r7, #24]
 8009c04:	693b      	ldr	r3, [r7, #16]
 8009c06:	429a      	cmp	r2, r3
 8009c08:	d3e2      	bcc.n	8009bd0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009c0a:	2300      	movs	r3, #0
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	3724      	adds	r7, #36	; 0x24
 8009c10:	46bd      	mov	sp, r7
 8009c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c16:	4770      	bx	lr

08009c18 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b08b      	sub	sp, #44	; 0x2c
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	60f8      	str	r0, [r7, #12]
 8009c20:	60b9      	str	r1, [r7, #8]
 8009c22:	4613      	mov	r3, r2
 8009c24:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009c2e:	88fb      	ldrh	r3, [r7, #6]
 8009c30:	089b      	lsrs	r3, r3, #2
 8009c32:	b29b      	uxth	r3, r3
 8009c34:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009c36:	88fb      	ldrh	r3, [r7, #6]
 8009c38:	f003 0303 	and.w	r3, r3, #3
 8009c3c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009c3e:	2300      	movs	r3, #0
 8009c40:	623b      	str	r3, [r7, #32]
 8009c42:	e014      	b.n	8009c6e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009c44:	69bb      	ldr	r3, [r7, #24]
 8009c46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c4a:	681a      	ldr	r2, [r3, #0]
 8009c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4e:	601a      	str	r2, [r3, #0]
    pDest++;
 8009c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c52:	3301      	adds	r3, #1
 8009c54:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c58:	3301      	adds	r3, #1
 8009c5a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c5e:	3301      	adds	r3, #1
 8009c60:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c64:	3301      	adds	r3, #1
 8009c66:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009c68:	6a3b      	ldr	r3, [r7, #32]
 8009c6a:	3301      	adds	r3, #1
 8009c6c:	623b      	str	r3, [r7, #32]
 8009c6e:	6a3a      	ldr	r2, [r7, #32]
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	429a      	cmp	r2, r3
 8009c74:	d3e6      	bcc.n	8009c44 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009c76:	8bfb      	ldrh	r3, [r7, #30]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d01e      	beq.n	8009cba <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009c80:	69bb      	ldr	r3, [r7, #24]
 8009c82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c86:	461a      	mov	r2, r3
 8009c88:	f107 0310 	add.w	r3, r7, #16
 8009c8c:	6812      	ldr	r2, [r2, #0]
 8009c8e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009c90:	693a      	ldr	r2, [r7, #16]
 8009c92:	6a3b      	ldr	r3, [r7, #32]
 8009c94:	b2db      	uxtb	r3, r3
 8009c96:	00db      	lsls	r3, r3, #3
 8009c98:	fa22 f303 	lsr.w	r3, r2, r3
 8009c9c:	b2da      	uxtb	r2, r3
 8009c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca0:	701a      	strb	r2, [r3, #0]
      i++;
 8009ca2:	6a3b      	ldr	r3, [r7, #32]
 8009ca4:	3301      	adds	r3, #1
 8009ca6:	623b      	str	r3, [r7, #32]
      pDest++;
 8009ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009caa:	3301      	adds	r3, #1
 8009cac:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009cae:	8bfb      	ldrh	r3, [r7, #30]
 8009cb0:	3b01      	subs	r3, #1
 8009cb2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009cb4:	8bfb      	ldrh	r3, [r7, #30]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d1ea      	bne.n	8009c90 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	372c      	adds	r7, #44	; 0x2c
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr

08009cc8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b085      	sub	sp, #20
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	68fa      	ldr	r2, [r7, #12]
 8009cde:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009ce2:	f023 0303 	bic.w	r3, r3, #3
 8009ce6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	68fa      	ldr	r2, [r7, #12]
 8009cf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009cf6:	f043 0302 	orr.w	r3, r3, #2
 8009cfa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009cfc:	2300      	movs	r3, #0
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3714      	adds	r7, #20
 8009d02:	46bd      	mov	sp, r7
 8009d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d08:	4770      	bx	lr

08009d0a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009d0a:	b480      	push	{r7}
 8009d0c:	b085      	sub	sp, #20
 8009d0e:	af00      	add	r7, sp, #0
 8009d10:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	695b      	ldr	r3, [r3, #20]
 8009d16:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	699b      	ldr	r3, [r3, #24]
 8009d1c:	68fa      	ldr	r2, [r7, #12]
 8009d1e:	4013      	ands	r3, r2
 8009d20:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009d22:	68fb      	ldr	r3, [r7, #12]
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	3714      	adds	r7, #20
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2e:	4770      	bx	lr

08009d30 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b085      	sub	sp, #20
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d42:	699b      	ldr	r3, [r3, #24]
 8009d44:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d4c:	69db      	ldr	r3, [r3, #28]
 8009d4e:	68ba      	ldr	r2, [r7, #8]
 8009d50:	4013      	ands	r3, r2
 8009d52:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	0c1b      	lsrs	r3, r3, #16
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	3714      	adds	r7, #20
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d62:	4770      	bx	lr

08009d64 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009d64:	b480      	push	{r7}
 8009d66:	b085      	sub	sp, #20
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d76:	699b      	ldr	r3, [r3, #24]
 8009d78:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d80:	69db      	ldr	r3, [r3, #28]
 8009d82:	68ba      	ldr	r2, [r7, #8]
 8009d84:	4013      	ands	r3, r2
 8009d86:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	b29b      	uxth	r3, r3
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	3714      	adds	r7, #20
 8009d90:	46bd      	mov	sp, r7
 8009d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d96:	4770      	bx	lr

08009d98 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b085      	sub	sp, #20
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	460b      	mov	r3, r1
 8009da2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009da8:	78fb      	ldrb	r3, [r7, #3]
 8009daa:	015a      	lsls	r2, r3, #5
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	4413      	add	r3, r2
 8009db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009db4:	689b      	ldr	r3, [r3, #8]
 8009db6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dbe:	695b      	ldr	r3, [r3, #20]
 8009dc0:	68ba      	ldr	r2, [r7, #8]
 8009dc2:	4013      	ands	r3, r2
 8009dc4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009dc6:	68bb      	ldr	r3, [r7, #8]
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	3714      	adds	r7, #20
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd2:	4770      	bx	lr

08009dd4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b087      	sub	sp, #28
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
 8009ddc:	460b      	mov	r3, r1
 8009dde:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dea:	691b      	ldr	r3, [r3, #16]
 8009dec:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009df6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009df8:	78fb      	ldrb	r3, [r7, #3]
 8009dfa:	f003 030f 	and.w	r3, r3, #15
 8009dfe:	68fa      	ldr	r2, [r7, #12]
 8009e00:	fa22 f303 	lsr.w	r3, r2, r3
 8009e04:	01db      	lsls	r3, r3, #7
 8009e06:	b2db      	uxtb	r3, r3
 8009e08:	693a      	ldr	r2, [r7, #16]
 8009e0a:	4313      	orrs	r3, r2
 8009e0c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009e0e:	78fb      	ldrb	r3, [r7, #3]
 8009e10:	015a      	lsls	r2, r3, #5
 8009e12:	697b      	ldr	r3, [r7, #20]
 8009e14:	4413      	add	r3, r2
 8009e16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e1a:	689b      	ldr	r3, [r3, #8]
 8009e1c:	693a      	ldr	r2, [r7, #16]
 8009e1e:	4013      	ands	r3, r2
 8009e20:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009e22:	68bb      	ldr	r3, [r7, #8]
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	371c      	adds	r7, #28
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2e:	4770      	bx	lr

08009e30 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009e30:	b480      	push	{r7}
 8009e32:	b083      	sub	sp, #12
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	695b      	ldr	r3, [r3, #20]
 8009e3c:	f003 0301 	and.w	r3, r3, #1
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	370c      	adds	r7, #12
 8009e44:	46bd      	mov	sp, r7
 8009e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4a:	4770      	bx	lr

08009e4c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b085      	sub	sp, #20
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	68fa      	ldr	r2, [r7, #12]
 8009e62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e66:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009e6a:	f023 0307 	bic.w	r3, r3, #7
 8009e6e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e76:	685b      	ldr	r3, [r3, #4]
 8009e78:	68fa      	ldr	r2, [r7, #12]
 8009e7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e82:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009e84:	2300      	movs	r3, #0
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3714      	adds	r7, #20
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e90:	4770      	bx	lr
	...

08009e94 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009e94:	b480      	push	{r7}
 8009e96:	b087      	sub	sp, #28
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	60f8      	str	r0, [r7, #12]
 8009e9c:	460b      	mov	r3, r1
 8009e9e:	607a      	str	r2, [r7, #4]
 8009ea0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	333c      	adds	r3, #60	; 0x3c
 8009eaa:	3304      	adds	r3, #4
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009eb0:	693b      	ldr	r3, [r7, #16]
 8009eb2:	4a26      	ldr	r2, [pc, #152]	; (8009f4c <USB_EP0_OutStart+0xb8>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d90a      	bls.n	8009ece <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009ec4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009ec8:	d101      	bne.n	8009ece <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	e037      	b.n	8009f3e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ed4:	461a      	mov	r2, r3
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009eda:	697b      	ldr	r3, [r7, #20]
 8009edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ee0:	691b      	ldr	r3, [r3, #16]
 8009ee2:	697a      	ldr	r2, [r7, #20]
 8009ee4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ee8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009eec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ef4:	691b      	ldr	r3, [r3, #16]
 8009ef6:	697a      	ldr	r2, [r7, #20]
 8009ef8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009efc:	f043 0318 	orr.w	r3, r3, #24
 8009f00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009f02:	697b      	ldr	r3, [r7, #20]
 8009f04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f08:	691b      	ldr	r3, [r3, #16]
 8009f0a:	697a      	ldr	r2, [r7, #20]
 8009f0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f10:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009f14:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009f16:	7afb      	ldrb	r3, [r7, #11]
 8009f18:	2b01      	cmp	r3, #1
 8009f1a:	d10f      	bne.n	8009f3c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f22:	461a      	mov	r2, r3
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	697a      	ldr	r2, [r7, #20]
 8009f32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f36:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009f3a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009f3c:	2300      	movs	r3, #0
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	371c      	adds	r7, #28
 8009f42:	46bd      	mov	sp, r7
 8009f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f48:	4770      	bx	lr
 8009f4a:	bf00      	nop
 8009f4c:	4f54300a 	.word	0x4f54300a

08009f50 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009f50:	b480      	push	{r7}
 8009f52:	b085      	sub	sp, #20
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009f58:	2300      	movs	r3, #0
 8009f5a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	3301      	adds	r3, #1
 8009f60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	4a13      	ldr	r2, [pc, #76]	; (8009fb4 <USB_CoreReset+0x64>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d901      	bls.n	8009f6e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009f6a:	2303      	movs	r3, #3
 8009f6c:	e01b      	b.n	8009fa6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	691b      	ldr	r3, [r3, #16]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	daf2      	bge.n	8009f5c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009f76:	2300      	movs	r3, #0
 8009f78:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	691b      	ldr	r3, [r3, #16]
 8009f7e:	f043 0201 	orr.w	r2, r3, #1
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	3301      	adds	r3, #1
 8009f8a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	4a09      	ldr	r2, [pc, #36]	; (8009fb4 <USB_CoreReset+0x64>)
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d901      	bls.n	8009f98 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009f94:	2303      	movs	r3, #3
 8009f96:	e006      	b.n	8009fa6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	691b      	ldr	r3, [r3, #16]
 8009f9c:	f003 0301 	and.w	r3, r3, #1
 8009fa0:	2b01      	cmp	r3, #1
 8009fa2:	d0f0      	beq.n	8009f86 <USB_CoreReset+0x36>

  return HAL_OK;
 8009fa4:	2300      	movs	r3, #0
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3714      	adds	r7, #20
 8009faa:	46bd      	mov	sp, r7
 8009fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb0:	4770      	bx	lr
 8009fb2:	bf00      	nop
 8009fb4:	00030d40 	.word	0x00030d40

08009fb8 <__errno>:
 8009fb8:	4b01      	ldr	r3, [pc, #4]	; (8009fc0 <__errno+0x8>)
 8009fba:	6818      	ldr	r0, [r3, #0]
 8009fbc:	4770      	bx	lr
 8009fbe:	bf00      	nop
 8009fc0:	2000000c 	.word	0x2000000c

08009fc4 <__libc_init_array>:
 8009fc4:	b570      	push	{r4, r5, r6, lr}
 8009fc6:	4d0d      	ldr	r5, [pc, #52]	; (8009ffc <__libc_init_array+0x38>)
 8009fc8:	2600      	movs	r6, #0
 8009fca:	4c0d      	ldr	r4, [pc, #52]	; (800a000 <__libc_init_array+0x3c>)
 8009fcc:	1b64      	subs	r4, r4, r5
 8009fce:	10a4      	asrs	r4, r4, #2
 8009fd0:	42a6      	cmp	r6, r4
 8009fd2:	d109      	bne.n	8009fe8 <__libc_init_array+0x24>
 8009fd4:	4d0b      	ldr	r5, [pc, #44]	; (800a004 <__libc_init_array+0x40>)
 8009fd6:	2600      	movs	r6, #0
 8009fd8:	4c0b      	ldr	r4, [pc, #44]	; (800a008 <__libc_init_array+0x44>)
 8009fda:	f000 fc9d 	bl	800a918 <_init>
 8009fde:	1b64      	subs	r4, r4, r5
 8009fe0:	10a4      	asrs	r4, r4, #2
 8009fe2:	42a6      	cmp	r6, r4
 8009fe4:	d105      	bne.n	8009ff2 <__libc_init_array+0x2e>
 8009fe6:	bd70      	pop	{r4, r5, r6, pc}
 8009fe8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fec:	3601      	adds	r6, #1
 8009fee:	4798      	blx	r3
 8009ff0:	e7ee      	b.n	8009fd0 <__libc_init_array+0xc>
 8009ff2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ff6:	3601      	adds	r6, #1
 8009ff8:	4798      	blx	r3
 8009ffa:	e7f2      	b.n	8009fe2 <__libc_init_array+0x1e>
 8009ffc:	0800ab1c 	.word	0x0800ab1c
 800a000:	0800ab1c 	.word	0x0800ab1c
 800a004:	0800ab1c 	.word	0x0800ab1c
 800a008:	0800ab20 	.word	0x0800ab20

0800a00c <memset>:
 800a00c:	4402      	add	r2, r0
 800a00e:	4603      	mov	r3, r0
 800a010:	4293      	cmp	r3, r2
 800a012:	d100      	bne.n	800a016 <memset+0xa>
 800a014:	4770      	bx	lr
 800a016:	f803 1b01 	strb.w	r1, [r3], #1
 800a01a:	e7f9      	b.n	800a010 <memset+0x4>

0800a01c <siprintf>:
 800a01c:	b40e      	push	{r1, r2, r3}
 800a01e:	b500      	push	{lr}
 800a020:	b09c      	sub	sp, #112	; 0x70
 800a022:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a026:	ab1d      	add	r3, sp, #116	; 0x74
 800a028:	9002      	str	r0, [sp, #8]
 800a02a:	9006      	str	r0, [sp, #24]
 800a02c:	9107      	str	r1, [sp, #28]
 800a02e:	9104      	str	r1, [sp, #16]
 800a030:	4808      	ldr	r0, [pc, #32]	; (800a054 <siprintf+0x38>)
 800a032:	4909      	ldr	r1, [pc, #36]	; (800a058 <siprintf+0x3c>)
 800a034:	f853 2b04 	ldr.w	r2, [r3], #4
 800a038:	9105      	str	r1, [sp, #20]
 800a03a:	a902      	add	r1, sp, #8
 800a03c:	6800      	ldr	r0, [r0, #0]
 800a03e:	9301      	str	r3, [sp, #4]
 800a040:	f000 f868 	bl	800a114 <_svfiprintf_r>
 800a044:	9b02      	ldr	r3, [sp, #8]
 800a046:	2200      	movs	r2, #0
 800a048:	701a      	strb	r2, [r3, #0]
 800a04a:	b01c      	add	sp, #112	; 0x70
 800a04c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a050:	b003      	add	sp, #12
 800a052:	4770      	bx	lr
 800a054:	2000000c 	.word	0x2000000c
 800a058:	ffff0208 	.word	0xffff0208

0800a05c <__ssputs_r>:
 800a05c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a060:	688e      	ldr	r6, [r1, #8]
 800a062:	4682      	mov	sl, r0
 800a064:	460c      	mov	r4, r1
 800a066:	4690      	mov	r8, r2
 800a068:	429e      	cmp	r6, r3
 800a06a:	461f      	mov	r7, r3
 800a06c:	d838      	bhi.n	800a0e0 <__ssputs_r+0x84>
 800a06e:	898a      	ldrh	r2, [r1, #12]
 800a070:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a074:	d032      	beq.n	800a0dc <__ssputs_r+0x80>
 800a076:	6825      	ldr	r5, [r4, #0]
 800a078:	3301      	adds	r3, #1
 800a07a:	6909      	ldr	r1, [r1, #16]
 800a07c:	eba5 0901 	sub.w	r9, r5, r1
 800a080:	6965      	ldr	r5, [r4, #20]
 800a082:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a086:	444b      	add	r3, r9
 800a088:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a08c:	106d      	asrs	r5, r5, #1
 800a08e:	429d      	cmp	r5, r3
 800a090:	bf38      	it	cc
 800a092:	461d      	movcc	r5, r3
 800a094:	0553      	lsls	r3, r2, #21
 800a096:	d531      	bpl.n	800a0fc <__ssputs_r+0xa0>
 800a098:	4629      	mov	r1, r5
 800a09a:	f000 fb73 	bl	800a784 <_malloc_r>
 800a09e:	4606      	mov	r6, r0
 800a0a0:	b950      	cbnz	r0, 800a0b8 <__ssputs_r+0x5c>
 800a0a2:	230c      	movs	r3, #12
 800a0a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a0a8:	f8ca 3000 	str.w	r3, [sl]
 800a0ac:	89a3      	ldrh	r3, [r4, #12]
 800a0ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0b2:	81a3      	strh	r3, [r4, #12]
 800a0b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0b8:	464a      	mov	r2, r9
 800a0ba:	6921      	ldr	r1, [r4, #16]
 800a0bc:	f000 face 	bl	800a65c <memcpy>
 800a0c0:	89a3      	ldrh	r3, [r4, #12]
 800a0c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a0c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0ca:	81a3      	strh	r3, [r4, #12]
 800a0cc:	6126      	str	r6, [r4, #16]
 800a0ce:	444e      	add	r6, r9
 800a0d0:	6165      	str	r5, [r4, #20]
 800a0d2:	eba5 0509 	sub.w	r5, r5, r9
 800a0d6:	6026      	str	r6, [r4, #0]
 800a0d8:	463e      	mov	r6, r7
 800a0da:	60a5      	str	r5, [r4, #8]
 800a0dc:	42be      	cmp	r6, r7
 800a0de:	d900      	bls.n	800a0e2 <__ssputs_r+0x86>
 800a0e0:	463e      	mov	r6, r7
 800a0e2:	4632      	mov	r2, r6
 800a0e4:	4641      	mov	r1, r8
 800a0e6:	6820      	ldr	r0, [r4, #0]
 800a0e8:	f000 fac5 	bl	800a676 <memmove>
 800a0ec:	68a3      	ldr	r3, [r4, #8]
 800a0ee:	2000      	movs	r0, #0
 800a0f0:	1b9b      	subs	r3, r3, r6
 800a0f2:	60a3      	str	r3, [r4, #8]
 800a0f4:	6823      	ldr	r3, [r4, #0]
 800a0f6:	4433      	add	r3, r6
 800a0f8:	6023      	str	r3, [r4, #0]
 800a0fa:	e7db      	b.n	800a0b4 <__ssputs_r+0x58>
 800a0fc:	462a      	mov	r2, r5
 800a0fe:	f000 fbb5 	bl	800a86c <_realloc_r>
 800a102:	4606      	mov	r6, r0
 800a104:	2800      	cmp	r0, #0
 800a106:	d1e1      	bne.n	800a0cc <__ssputs_r+0x70>
 800a108:	6921      	ldr	r1, [r4, #16]
 800a10a:	4650      	mov	r0, sl
 800a10c:	f000 face 	bl	800a6ac <_free_r>
 800a110:	e7c7      	b.n	800a0a2 <__ssputs_r+0x46>
	...

0800a114 <_svfiprintf_r>:
 800a114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a118:	4698      	mov	r8, r3
 800a11a:	898b      	ldrh	r3, [r1, #12]
 800a11c:	b09d      	sub	sp, #116	; 0x74
 800a11e:	4607      	mov	r7, r0
 800a120:	061b      	lsls	r3, r3, #24
 800a122:	460d      	mov	r5, r1
 800a124:	4614      	mov	r4, r2
 800a126:	d50e      	bpl.n	800a146 <_svfiprintf_r+0x32>
 800a128:	690b      	ldr	r3, [r1, #16]
 800a12a:	b963      	cbnz	r3, 800a146 <_svfiprintf_r+0x32>
 800a12c:	2140      	movs	r1, #64	; 0x40
 800a12e:	f000 fb29 	bl	800a784 <_malloc_r>
 800a132:	6028      	str	r0, [r5, #0]
 800a134:	6128      	str	r0, [r5, #16]
 800a136:	b920      	cbnz	r0, 800a142 <_svfiprintf_r+0x2e>
 800a138:	230c      	movs	r3, #12
 800a13a:	603b      	str	r3, [r7, #0]
 800a13c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a140:	e0d1      	b.n	800a2e6 <_svfiprintf_r+0x1d2>
 800a142:	2340      	movs	r3, #64	; 0x40
 800a144:	616b      	str	r3, [r5, #20]
 800a146:	2300      	movs	r3, #0
 800a148:	f8cd 800c 	str.w	r8, [sp, #12]
 800a14c:	f04f 0901 	mov.w	r9, #1
 800a150:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800a300 <_svfiprintf_r+0x1ec>
 800a154:	9309      	str	r3, [sp, #36]	; 0x24
 800a156:	2320      	movs	r3, #32
 800a158:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a15c:	2330      	movs	r3, #48	; 0x30
 800a15e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a162:	4623      	mov	r3, r4
 800a164:	469a      	mov	sl, r3
 800a166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a16a:	b10a      	cbz	r2, 800a170 <_svfiprintf_r+0x5c>
 800a16c:	2a25      	cmp	r2, #37	; 0x25
 800a16e:	d1f9      	bne.n	800a164 <_svfiprintf_r+0x50>
 800a170:	ebba 0b04 	subs.w	fp, sl, r4
 800a174:	d00b      	beq.n	800a18e <_svfiprintf_r+0x7a>
 800a176:	465b      	mov	r3, fp
 800a178:	4622      	mov	r2, r4
 800a17a:	4629      	mov	r1, r5
 800a17c:	4638      	mov	r0, r7
 800a17e:	f7ff ff6d 	bl	800a05c <__ssputs_r>
 800a182:	3001      	adds	r0, #1
 800a184:	f000 80aa 	beq.w	800a2dc <_svfiprintf_r+0x1c8>
 800a188:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a18a:	445a      	add	r2, fp
 800a18c:	9209      	str	r2, [sp, #36]	; 0x24
 800a18e:	f89a 3000 	ldrb.w	r3, [sl]
 800a192:	2b00      	cmp	r3, #0
 800a194:	f000 80a2 	beq.w	800a2dc <_svfiprintf_r+0x1c8>
 800a198:	2300      	movs	r3, #0
 800a19a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a19e:	f10a 0a01 	add.w	sl, sl, #1
 800a1a2:	9304      	str	r3, [sp, #16]
 800a1a4:	9307      	str	r3, [sp, #28]
 800a1a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a1aa:	931a      	str	r3, [sp, #104]	; 0x68
 800a1ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1b0:	4654      	mov	r4, sl
 800a1b2:	2205      	movs	r2, #5
 800a1b4:	4852      	ldr	r0, [pc, #328]	; (800a300 <_svfiprintf_r+0x1ec>)
 800a1b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1ba:	f000 fa41 	bl	800a640 <memchr>
 800a1be:	9a04      	ldr	r2, [sp, #16]
 800a1c0:	b9d8      	cbnz	r0, 800a1fa <_svfiprintf_r+0xe6>
 800a1c2:	06d0      	lsls	r0, r2, #27
 800a1c4:	bf44      	itt	mi
 800a1c6:	2320      	movmi	r3, #32
 800a1c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1cc:	0711      	lsls	r1, r2, #28
 800a1ce:	bf44      	itt	mi
 800a1d0:	232b      	movmi	r3, #43	; 0x2b
 800a1d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1d6:	f89a 3000 	ldrb.w	r3, [sl]
 800a1da:	2b2a      	cmp	r3, #42	; 0x2a
 800a1dc:	d015      	beq.n	800a20a <_svfiprintf_r+0xf6>
 800a1de:	9a07      	ldr	r2, [sp, #28]
 800a1e0:	4654      	mov	r4, sl
 800a1e2:	2000      	movs	r0, #0
 800a1e4:	f04f 0c0a 	mov.w	ip, #10
 800a1e8:	4621      	mov	r1, r4
 800a1ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1ee:	3b30      	subs	r3, #48	; 0x30
 800a1f0:	2b09      	cmp	r3, #9
 800a1f2:	d94e      	bls.n	800a292 <_svfiprintf_r+0x17e>
 800a1f4:	b1b0      	cbz	r0, 800a224 <_svfiprintf_r+0x110>
 800a1f6:	9207      	str	r2, [sp, #28]
 800a1f8:	e014      	b.n	800a224 <_svfiprintf_r+0x110>
 800a1fa:	eba0 0308 	sub.w	r3, r0, r8
 800a1fe:	46a2      	mov	sl, r4
 800a200:	fa09 f303 	lsl.w	r3, r9, r3
 800a204:	4313      	orrs	r3, r2
 800a206:	9304      	str	r3, [sp, #16]
 800a208:	e7d2      	b.n	800a1b0 <_svfiprintf_r+0x9c>
 800a20a:	9b03      	ldr	r3, [sp, #12]
 800a20c:	1d19      	adds	r1, r3, #4
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	2b00      	cmp	r3, #0
 800a212:	9103      	str	r1, [sp, #12]
 800a214:	bfbb      	ittet	lt
 800a216:	425b      	neglt	r3, r3
 800a218:	f042 0202 	orrlt.w	r2, r2, #2
 800a21c:	9307      	strge	r3, [sp, #28]
 800a21e:	9307      	strlt	r3, [sp, #28]
 800a220:	bfb8      	it	lt
 800a222:	9204      	strlt	r2, [sp, #16]
 800a224:	7823      	ldrb	r3, [r4, #0]
 800a226:	2b2e      	cmp	r3, #46	; 0x2e
 800a228:	d10c      	bne.n	800a244 <_svfiprintf_r+0x130>
 800a22a:	7863      	ldrb	r3, [r4, #1]
 800a22c:	2b2a      	cmp	r3, #42	; 0x2a
 800a22e:	d135      	bne.n	800a29c <_svfiprintf_r+0x188>
 800a230:	9b03      	ldr	r3, [sp, #12]
 800a232:	3402      	adds	r4, #2
 800a234:	1d1a      	adds	r2, r3, #4
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	9203      	str	r2, [sp, #12]
 800a23c:	bfb8      	it	lt
 800a23e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a242:	9305      	str	r3, [sp, #20]
 800a244:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a310 <_svfiprintf_r+0x1fc>
 800a248:	2203      	movs	r2, #3
 800a24a:	7821      	ldrb	r1, [r4, #0]
 800a24c:	4650      	mov	r0, sl
 800a24e:	f000 f9f7 	bl	800a640 <memchr>
 800a252:	b140      	cbz	r0, 800a266 <_svfiprintf_r+0x152>
 800a254:	2340      	movs	r3, #64	; 0x40
 800a256:	eba0 000a 	sub.w	r0, r0, sl
 800a25a:	3401      	adds	r4, #1
 800a25c:	fa03 f000 	lsl.w	r0, r3, r0
 800a260:	9b04      	ldr	r3, [sp, #16]
 800a262:	4303      	orrs	r3, r0
 800a264:	9304      	str	r3, [sp, #16]
 800a266:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a26a:	2206      	movs	r2, #6
 800a26c:	4825      	ldr	r0, [pc, #148]	; (800a304 <_svfiprintf_r+0x1f0>)
 800a26e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a272:	f000 f9e5 	bl	800a640 <memchr>
 800a276:	2800      	cmp	r0, #0
 800a278:	d038      	beq.n	800a2ec <_svfiprintf_r+0x1d8>
 800a27a:	4b23      	ldr	r3, [pc, #140]	; (800a308 <_svfiprintf_r+0x1f4>)
 800a27c:	bb1b      	cbnz	r3, 800a2c6 <_svfiprintf_r+0x1b2>
 800a27e:	9b03      	ldr	r3, [sp, #12]
 800a280:	3307      	adds	r3, #7
 800a282:	f023 0307 	bic.w	r3, r3, #7
 800a286:	3308      	adds	r3, #8
 800a288:	9303      	str	r3, [sp, #12]
 800a28a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a28c:	4433      	add	r3, r6
 800a28e:	9309      	str	r3, [sp, #36]	; 0x24
 800a290:	e767      	b.n	800a162 <_svfiprintf_r+0x4e>
 800a292:	fb0c 3202 	mla	r2, ip, r2, r3
 800a296:	460c      	mov	r4, r1
 800a298:	2001      	movs	r0, #1
 800a29a:	e7a5      	b.n	800a1e8 <_svfiprintf_r+0xd4>
 800a29c:	2300      	movs	r3, #0
 800a29e:	3401      	adds	r4, #1
 800a2a0:	f04f 0c0a 	mov.w	ip, #10
 800a2a4:	4619      	mov	r1, r3
 800a2a6:	9305      	str	r3, [sp, #20]
 800a2a8:	4620      	mov	r0, r4
 800a2aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2ae:	3a30      	subs	r2, #48	; 0x30
 800a2b0:	2a09      	cmp	r2, #9
 800a2b2:	d903      	bls.n	800a2bc <_svfiprintf_r+0x1a8>
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d0c5      	beq.n	800a244 <_svfiprintf_r+0x130>
 800a2b8:	9105      	str	r1, [sp, #20]
 800a2ba:	e7c3      	b.n	800a244 <_svfiprintf_r+0x130>
 800a2bc:	fb0c 2101 	mla	r1, ip, r1, r2
 800a2c0:	4604      	mov	r4, r0
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	e7f0      	b.n	800a2a8 <_svfiprintf_r+0x194>
 800a2c6:	ab03      	add	r3, sp, #12
 800a2c8:	462a      	mov	r2, r5
 800a2ca:	a904      	add	r1, sp, #16
 800a2cc:	4638      	mov	r0, r7
 800a2ce:	9300      	str	r3, [sp, #0]
 800a2d0:	4b0e      	ldr	r3, [pc, #56]	; (800a30c <_svfiprintf_r+0x1f8>)
 800a2d2:	e000      	b.n	800a2d6 <_svfiprintf_r+0x1c2>
 800a2d4:	bf00      	nop
 800a2d6:	1c42      	adds	r2, r0, #1
 800a2d8:	4606      	mov	r6, r0
 800a2da:	d1d6      	bne.n	800a28a <_svfiprintf_r+0x176>
 800a2dc:	89ab      	ldrh	r3, [r5, #12]
 800a2de:	065b      	lsls	r3, r3, #25
 800a2e0:	f53f af2c 	bmi.w	800a13c <_svfiprintf_r+0x28>
 800a2e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2e6:	b01d      	add	sp, #116	; 0x74
 800a2e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2ec:	ab03      	add	r3, sp, #12
 800a2ee:	462a      	mov	r2, r5
 800a2f0:	a904      	add	r1, sp, #16
 800a2f2:	4638      	mov	r0, r7
 800a2f4:	9300      	str	r3, [sp, #0]
 800a2f6:	4b05      	ldr	r3, [pc, #20]	; (800a30c <_svfiprintf_r+0x1f8>)
 800a2f8:	f000 f87c 	bl	800a3f4 <_printf_i>
 800a2fc:	e7eb      	b.n	800a2d6 <_svfiprintf_r+0x1c2>
 800a2fe:	bf00      	nop
 800a300:	0800aae0 	.word	0x0800aae0
 800a304:	0800aaea 	.word	0x0800aaea
 800a308:	00000000 	.word	0x00000000
 800a30c:	0800a05d 	.word	0x0800a05d
 800a310:	0800aae6 	.word	0x0800aae6

0800a314 <_printf_common>:
 800a314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a318:	4616      	mov	r6, r2
 800a31a:	4699      	mov	r9, r3
 800a31c:	688a      	ldr	r2, [r1, #8]
 800a31e:	4607      	mov	r7, r0
 800a320:	690b      	ldr	r3, [r1, #16]
 800a322:	460c      	mov	r4, r1
 800a324:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a328:	4293      	cmp	r3, r2
 800a32a:	bfb8      	it	lt
 800a32c:	4613      	movlt	r3, r2
 800a32e:	6033      	str	r3, [r6, #0]
 800a330:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a334:	b10a      	cbz	r2, 800a33a <_printf_common+0x26>
 800a336:	3301      	adds	r3, #1
 800a338:	6033      	str	r3, [r6, #0]
 800a33a:	6823      	ldr	r3, [r4, #0]
 800a33c:	0699      	lsls	r1, r3, #26
 800a33e:	bf42      	ittt	mi
 800a340:	6833      	ldrmi	r3, [r6, #0]
 800a342:	3302      	addmi	r3, #2
 800a344:	6033      	strmi	r3, [r6, #0]
 800a346:	6825      	ldr	r5, [r4, #0]
 800a348:	f015 0506 	ands.w	r5, r5, #6
 800a34c:	d106      	bne.n	800a35c <_printf_common+0x48>
 800a34e:	f104 0a19 	add.w	sl, r4, #25
 800a352:	68e3      	ldr	r3, [r4, #12]
 800a354:	6832      	ldr	r2, [r6, #0]
 800a356:	1a9b      	subs	r3, r3, r2
 800a358:	42ab      	cmp	r3, r5
 800a35a:	dc29      	bgt.n	800a3b0 <_printf_common+0x9c>
 800a35c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a360:	1e13      	subs	r3, r2, #0
 800a362:	6822      	ldr	r2, [r4, #0]
 800a364:	bf18      	it	ne
 800a366:	2301      	movne	r3, #1
 800a368:	0692      	lsls	r2, r2, #26
 800a36a:	d42e      	bmi.n	800a3ca <_printf_common+0xb6>
 800a36c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a370:	4649      	mov	r1, r9
 800a372:	4638      	mov	r0, r7
 800a374:	47c0      	blx	r8
 800a376:	3001      	adds	r0, #1
 800a378:	d021      	beq.n	800a3be <_printf_common+0xaa>
 800a37a:	6823      	ldr	r3, [r4, #0]
 800a37c:	341a      	adds	r4, #26
 800a37e:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 800a382:	f003 0306 	and.w	r3, r3, #6
 800a386:	6832      	ldr	r2, [r6, #0]
 800a388:	2600      	movs	r6, #0
 800a38a:	2b04      	cmp	r3, #4
 800a38c:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a390:	bf08      	it	eq
 800a392:	1aad      	subeq	r5, r5, r2
 800a394:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800a398:	bf14      	ite	ne
 800a39a:	2500      	movne	r5, #0
 800a39c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	bfc4      	itt	gt
 800a3a4:	1a9b      	subgt	r3, r3, r2
 800a3a6:	18ed      	addgt	r5, r5, r3
 800a3a8:	42b5      	cmp	r5, r6
 800a3aa:	d11a      	bne.n	800a3e2 <_printf_common+0xce>
 800a3ac:	2000      	movs	r0, #0
 800a3ae:	e008      	b.n	800a3c2 <_printf_common+0xae>
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	4652      	mov	r2, sl
 800a3b4:	4649      	mov	r1, r9
 800a3b6:	4638      	mov	r0, r7
 800a3b8:	47c0      	blx	r8
 800a3ba:	3001      	adds	r0, #1
 800a3bc:	d103      	bne.n	800a3c6 <_printf_common+0xb2>
 800a3be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a3c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3c6:	3501      	adds	r5, #1
 800a3c8:	e7c3      	b.n	800a352 <_printf_common+0x3e>
 800a3ca:	18e1      	adds	r1, r4, r3
 800a3cc:	1c5a      	adds	r2, r3, #1
 800a3ce:	2030      	movs	r0, #48	; 0x30
 800a3d0:	3302      	adds	r3, #2
 800a3d2:	4422      	add	r2, r4
 800a3d4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a3d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a3dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a3e0:	e7c4      	b.n	800a36c <_printf_common+0x58>
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	4622      	mov	r2, r4
 800a3e6:	4649      	mov	r1, r9
 800a3e8:	4638      	mov	r0, r7
 800a3ea:	47c0      	blx	r8
 800a3ec:	3001      	adds	r0, #1
 800a3ee:	d0e6      	beq.n	800a3be <_printf_common+0xaa>
 800a3f0:	3601      	adds	r6, #1
 800a3f2:	e7d9      	b.n	800a3a8 <_printf_common+0x94>

0800a3f4 <_printf_i>:
 800a3f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a3f8:	7e0f      	ldrb	r7, [r1, #24]
 800a3fa:	4691      	mov	r9, r2
 800a3fc:	4680      	mov	r8, r0
 800a3fe:	460c      	mov	r4, r1
 800a400:	2f78      	cmp	r7, #120	; 0x78
 800a402:	469a      	mov	sl, r3
 800a404:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a406:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a40a:	d807      	bhi.n	800a41c <_printf_i+0x28>
 800a40c:	2f62      	cmp	r7, #98	; 0x62
 800a40e:	d80a      	bhi.n	800a426 <_printf_i+0x32>
 800a410:	2f00      	cmp	r7, #0
 800a412:	f000 80d8 	beq.w	800a5c6 <_printf_i+0x1d2>
 800a416:	2f58      	cmp	r7, #88	; 0x58
 800a418:	f000 80a3 	beq.w	800a562 <_printf_i+0x16e>
 800a41c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a420:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a424:	e03a      	b.n	800a49c <_printf_i+0xa8>
 800a426:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a42a:	2b15      	cmp	r3, #21
 800a42c:	d8f6      	bhi.n	800a41c <_printf_i+0x28>
 800a42e:	a101      	add	r1, pc, #4	; (adr r1, 800a434 <_printf_i+0x40>)
 800a430:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a434:	0800a48d 	.word	0x0800a48d
 800a438:	0800a4a1 	.word	0x0800a4a1
 800a43c:	0800a41d 	.word	0x0800a41d
 800a440:	0800a41d 	.word	0x0800a41d
 800a444:	0800a41d 	.word	0x0800a41d
 800a448:	0800a41d 	.word	0x0800a41d
 800a44c:	0800a4a1 	.word	0x0800a4a1
 800a450:	0800a41d 	.word	0x0800a41d
 800a454:	0800a41d 	.word	0x0800a41d
 800a458:	0800a41d 	.word	0x0800a41d
 800a45c:	0800a41d 	.word	0x0800a41d
 800a460:	0800a5ad 	.word	0x0800a5ad
 800a464:	0800a4d1 	.word	0x0800a4d1
 800a468:	0800a58f 	.word	0x0800a58f
 800a46c:	0800a41d 	.word	0x0800a41d
 800a470:	0800a41d 	.word	0x0800a41d
 800a474:	0800a5cf 	.word	0x0800a5cf
 800a478:	0800a41d 	.word	0x0800a41d
 800a47c:	0800a4d1 	.word	0x0800a4d1
 800a480:	0800a41d 	.word	0x0800a41d
 800a484:	0800a41d 	.word	0x0800a41d
 800a488:	0800a597 	.word	0x0800a597
 800a48c:	682b      	ldr	r3, [r5, #0]
 800a48e:	1d1a      	adds	r2, r3, #4
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	602a      	str	r2, [r5, #0]
 800a494:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a498:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a49c:	2301      	movs	r3, #1
 800a49e:	e0a3      	b.n	800a5e8 <_printf_i+0x1f4>
 800a4a0:	6820      	ldr	r0, [r4, #0]
 800a4a2:	6829      	ldr	r1, [r5, #0]
 800a4a4:	0606      	lsls	r6, r0, #24
 800a4a6:	f101 0304 	add.w	r3, r1, #4
 800a4aa:	d50a      	bpl.n	800a4c2 <_printf_i+0xce>
 800a4ac:	680e      	ldr	r6, [r1, #0]
 800a4ae:	602b      	str	r3, [r5, #0]
 800a4b0:	2e00      	cmp	r6, #0
 800a4b2:	da03      	bge.n	800a4bc <_printf_i+0xc8>
 800a4b4:	232d      	movs	r3, #45	; 0x2d
 800a4b6:	4276      	negs	r6, r6
 800a4b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4bc:	485e      	ldr	r0, [pc, #376]	; (800a638 <_printf_i+0x244>)
 800a4be:	230a      	movs	r3, #10
 800a4c0:	e019      	b.n	800a4f6 <_printf_i+0x102>
 800a4c2:	680e      	ldr	r6, [r1, #0]
 800a4c4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a4c8:	602b      	str	r3, [r5, #0]
 800a4ca:	bf18      	it	ne
 800a4cc:	b236      	sxthne	r6, r6
 800a4ce:	e7ef      	b.n	800a4b0 <_printf_i+0xbc>
 800a4d0:	682b      	ldr	r3, [r5, #0]
 800a4d2:	6820      	ldr	r0, [r4, #0]
 800a4d4:	1d19      	adds	r1, r3, #4
 800a4d6:	6029      	str	r1, [r5, #0]
 800a4d8:	0601      	lsls	r1, r0, #24
 800a4da:	d501      	bpl.n	800a4e0 <_printf_i+0xec>
 800a4dc:	681e      	ldr	r6, [r3, #0]
 800a4de:	e002      	b.n	800a4e6 <_printf_i+0xf2>
 800a4e0:	0646      	lsls	r6, r0, #25
 800a4e2:	d5fb      	bpl.n	800a4dc <_printf_i+0xe8>
 800a4e4:	881e      	ldrh	r6, [r3, #0]
 800a4e6:	2f6f      	cmp	r7, #111	; 0x6f
 800a4e8:	4853      	ldr	r0, [pc, #332]	; (800a638 <_printf_i+0x244>)
 800a4ea:	bf0c      	ite	eq
 800a4ec:	2308      	moveq	r3, #8
 800a4ee:	230a      	movne	r3, #10
 800a4f0:	2100      	movs	r1, #0
 800a4f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a4f6:	6865      	ldr	r5, [r4, #4]
 800a4f8:	2d00      	cmp	r5, #0
 800a4fa:	60a5      	str	r5, [r4, #8]
 800a4fc:	bfa2      	ittt	ge
 800a4fe:	6821      	ldrge	r1, [r4, #0]
 800a500:	f021 0104 	bicge.w	r1, r1, #4
 800a504:	6021      	strge	r1, [r4, #0]
 800a506:	b90e      	cbnz	r6, 800a50c <_printf_i+0x118>
 800a508:	2d00      	cmp	r5, #0
 800a50a:	d04d      	beq.n	800a5a8 <_printf_i+0x1b4>
 800a50c:	4615      	mov	r5, r2
 800a50e:	fbb6 f1f3 	udiv	r1, r6, r3
 800a512:	fb03 6711 	mls	r7, r3, r1, r6
 800a516:	5dc7      	ldrb	r7, [r0, r7]
 800a518:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a51c:	4637      	mov	r7, r6
 800a51e:	460e      	mov	r6, r1
 800a520:	42bb      	cmp	r3, r7
 800a522:	d9f4      	bls.n	800a50e <_printf_i+0x11a>
 800a524:	2b08      	cmp	r3, #8
 800a526:	d10b      	bne.n	800a540 <_printf_i+0x14c>
 800a528:	6823      	ldr	r3, [r4, #0]
 800a52a:	07de      	lsls	r6, r3, #31
 800a52c:	d508      	bpl.n	800a540 <_printf_i+0x14c>
 800a52e:	6923      	ldr	r3, [r4, #16]
 800a530:	6861      	ldr	r1, [r4, #4]
 800a532:	4299      	cmp	r1, r3
 800a534:	bfde      	ittt	le
 800a536:	2330      	movle	r3, #48	; 0x30
 800a538:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a53c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a540:	1b52      	subs	r2, r2, r5
 800a542:	6122      	str	r2, [r4, #16]
 800a544:	464b      	mov	r3, r9
 800a546:	aa03      	add	r2, sp, #12
 800a548:	4621      	mov	r1, r4
 800a54a:	4640      	mov	r0, r8
 800a54c:	f8cd a000 	str.w	sl, [sp]
 800a550:	f7ff fee0 	bl	800a314 <_printf_common>
 800a554:	3001      	adds	r0, #1
 800a556:	d14c      	bne.n	800a5f2 <_printf_i+0x1fe>
 800a558:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a55c:	b004      	add	sp, #16
 800a55e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a562:	4835      	ldr	r0, [pc, #212]	; (800a638 <_printf_i+0x244>)
 800a564:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a568:	6829      	ldr	r1, [r5, #0]
 800a56a:	6823      	ldr	r3, [r4, #0]
 800a56c:	f851 6b04 	ldr.w	r6, [r1], #4
 800a570:	6029      	str	r1, [r5, #0]
 800a572:	061d      	lsls	r5, r3, #24
 800a574:	d514      	bpl.n	800a5a0 <_printf_i+0x1ac>
 800a576:	07df      	lsls	r7, r3, #31
 800a578:	bf44      	itt	mi
 800a57a:	f043 0320 	orrmi.w	r3, r3, #32
 800a57e:	6023      	strmi	r3, [r4, #0]
 800a580:	b91e      	cbnz	r6, 800a58a <_printf_i+0x196>
 800a582:	6823      	ldr	r3, [r4, #0]
 800a584:	f023 0320 	bic.w	r3, r3, #32
 800a588:	6023      	str	r3, [r4, #0]
 800a58a:	2310      	movs	r3, #16
 800a58c:	e7b0      	b.n	800a4f0 <_printf_i+0xfc>
 800a58e:	6823      	ldr	r3, [r4, #0]
 800a590:	f043 0320 	orr.w	r3, r3, #32
 800a594:	6023      	str	r3, [r4, #0]
 800a596:	2378      	movs	r3, #120	; 0x78
 800a598:	4828      	ldr	r0, [pc, #160]	; (800a63c <_printf_i+0x248>)
 800a59a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a59e:	e7e3      	b.n	800a568 <_printf_i+0x174>
 800a5a0:	0659      	lsls	r1, r3, #25
 800a5a2:	bf48      	it	mi
 800a5a4:	b2b6      	uxthmi	r6, r6
 800a5a6:	e7e6      	b.n	800a576 <_printf_i+0x182>
 800a5a8:	4615      	mov	r5, r2
 800a5aa:	e7bb      	b.n	800a524 <_printf_i+0x130>
 800a5ac:	682b      	ldr	r3, [r5, #0]
 800a5ae:	6826      	ldr	r6, [r4, #0]
 800a5b0:	1d18      	adds	r0, r3, #4
 800a5b2:	6961      	ldr	r1, [r4, #20]
 800a5b4:	6028      	str	r0, [r5, #0]
 800a5b6:	0635      	lsls	r5, r6, #24
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	d501      	bpl.n	800a5c0 <_printf_i+0x1cc>
 800a5bc:	6019      	str	r1, [r3, #0]
 800a5be:	e002      	b.n	800a5c6 <_printf_i+0x1d2>
 800a5c0:	0670      	lsls	r0, r6, #25
 800a5c2:	d5fb      	bpl.n	800a5bc <_printf_i+0x1c8>
 800a5c4:	8019      	strh	r1, [r3, #0]
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	4615      	mov	r5, r2
 800a5ca:	6123      	str	r3, [r4, #16]
 800a5cc:	e7ba      	b.n	800a544 <_printf_i+0x150>
 800a5ce:	682b      	ldr	r3, [r5, #0]
 800a5d0:	2100      	movs	r1, #0
 800a5d2:	1d1a      	adds	r2, r3, #4
 800a5d4:	602a      	str	r2, [r5, #0]
 800a5d6:	681d      	ldr	r5, [r3, #0]
 800a5d8:	6862      	ldr	r2, [r4, #4]
 800a5da:	4628      	mov	r0, r5
 800a5dc:	f000 f830 	bl	800a640 <memchr>
 800a5e0:	b108      	cbz	r0, 800a5e6 <_printf_i+0x1f2>
 800a5e2:	1b40      	subs	r0, r0, r5
 800a5e4:	6060      	str	r0, [r4, #4]
 800a5e6:	6863      	ldr	r3, [r4, #4]
 800a5e8:	6123      	str	r3, [r4, #16]
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a5f0:	e7a8      	b.n	800a544 <_printf_i+0x150>
 800a5f2:	6923      	ldr	r3, [r4, #16]
 800a5f4:	462a      	mov	r2, r5
 800a5f6:	4649      	mov	r1, r9
 800a5f8:	4640      	mov	r0, r8
 800a5fa:	47d0      	blx	sl
 800a5fc:	3001      	adds	r0, #1
 800a5fe:	d0ab      	beq.n	800a558 <_printf_i+0x164>
 800a600:	6823      	ldr	r3, [r4, #0]
 800a602:	079b      	lsls	r3, r3, #30
 800a604:	d413      	bmi.n	800a62e <_printf_i+0x23a>
 800a606:	68e0      	ldr	r0, [r4, #12]
 800a608:	9b03      	ldr	r3, [sp, #12]
 800a60a:	4298      	cmp	r0, r3
 800a60c:	bfb8      	it	lt
 800a60e:	4618      	movlt	r0, r3
 800a610:	e7a4      	b.n	800a55c <_printf_i+0x168>
 800a612:	2301      	movs	r3, #1
 800a614:	4632      	mov	r2, r6
 800a616:	4649      	mov	r1, r9
 800a618:	4640      	mov	r0, r8
 800a61a:	47d0      	blx	sl
 800a61c:	3001      	adds	r0, #1
 800a61e:	d09b      	beq.n	800a558 <_printf_i+0x164>
 800a620:	3501      	adds	r5, #1
 800a622:	68e3      	ldr	r3, [r4, #12]
 800a624:	9903      	ldr	r1, [sp, #12]
 800a626:	1a5b      	subs	r3, r3, r1
 800a628:	42ab      	cmp	r3, r5
 800a62a:	dcf2      	bgt.n	800a612 <_printf_i+0x21e>
 800a62c:	e7eb      	b.n	800a606 <_printf_i+0x212>
 800a62e:	2500      	movs	r5, #0
 800a630:	f104 0619 	add.w	r6, r4, #25
 800a634:	e7f5      	b.n	800a622 <_printf_i+0x22e>
 800a636:	bf00      	nop
 800a638:	0800aaf1 	.word	0x0800aaf1
 800a63c:	0800ab02 	.word	0x0800ab02

0800a640 <memchr>:
 800a640:	b2c9      	uxtb	r1, r1
 800a642:	4402      	add	r2, r0
 800a644:	b510      	push	{r4, lr}
 800a646:	4290      	cmp	r0, r2
 800a648:	4603      	mov	r3, r0
 800a64a:	d101      	bne.n	800a650 <memchr+0x10>
 800a64c:	2300      	movs	r3, #0
 800a64e:	e003      	b.n	800a658 <memchr+0x18>
 800a650:	781c      	ldrb	r4, [r3, #0]
 800a652:	3001      	adds	r0, #1
 800a654:	428c      	cmp	r4, r1
 800a656:	d1f6      	bne.n	800a646 <memchr+0x6>
 800a658:	4618      	mov	r0, r3
 800a65a:	bd10      	pop	{r4, pc}

0800a65c <memcpy>:
 800a65c:	440a      	add	r2, r1
 800a65e:	1e43      	subs	r3, r0, #1
 800a660:	4291      	cmp	r1, r2
 800a662:	d100      	bne.n	800a666 <memcpy+0xa>
 800a664:	4770      	bx	lr
 800a666:	b510      	push	{r4, lr}
 800a668:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a66c:	4291      	cmp	r1, r2
 800a66e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a672:	d1f9      	bne.n	800a668 <memcpy+0xc>
 800a674:	bd10      	pop	{r4, pc}

0800a676 <memmove>:
 800a676:	4288      	cmp	r0, r1
 800a678:	b510      	push	{r4, lr}
 800a67a:	eb01 0402 	add.w	r4, r1, r2
 800a67e:	d902      	bls.n	800a686 <memmove+0x10>
 800a680:	4284      	cmp	r4, r0
 800a682:	4623      	mov	r3, r4
 800a684:	d807      	bhi.n	800a696 <memmove+0x20>
 800a686:	1e43      	subs	r3, r0, #1
 800a688:	42a1      	cmp	r1, r4
 800a68a:	d008      	beq.n	800a69e <memmove+0x28>
 800a68c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a690:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a694:	e7f8      	b.n	800a688 <memmove+0x12>
 800a696:	4402      	add	r2, r0
 800a698:	4601      	mov	r1, r0
 800a69a:	428a      	cmp	r2, r1
 800a69c:	d100      	bne.n	800a6a0 <memmove+0x2a>
 800a69e:	bd10      	pop	{r4, pc}
 800a6a0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a6a4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a6a8:	e7f7      	b.n	800a69a <memmove+0x24>
	...

0800a6ac <_free_r>:
 800a6ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a6ae:	2900      	cmp	r1, #0
 800a6b0:	d043      	beq.n	800a73a <_free_r+0x8e>
 800a6b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6b6:	1f0c      	subs	r4, r1, #4
 800a6b8:	9001      	str	r0, [sp, #4]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	bfb8      	it	lt
 800a6be:	18e4      	addlt	r4, r4, r3
 800a6c0:	f000 f914 	bl	800a8ec <__malloc_lock>
 800a6c4:	4a1e      	ldr	r2, [pc, #120]	; (800a740 <_free_r+0x94>)
 800a6c6:	9801      	ldr	r0, [sp, #4]
 800a6c8:	6813      	ldr	r3, [r2, #0]
 800a6ca:	b933      	cbnz	r3, 800a6da <_free_r+0x2e>
 800a6cc:	6063      	str	r3, [r4, #4]
 800a6ce:	6014      	str	r4, [r2, #0]
 800a6d0:	b003      	add	sp, #12
 800a6d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a6d6:	f000 b90f 	b.w	800a8f8 <__malloc_unlock>
 800a6da:	42a3      	cmp	r3, r4
 800a6dc:	d908      	bls.n	800a6f0 <_free_r+0x44>
 800a6de:	6825      	ldr	r5, [r4, #0]
 800a6e0:	1961      	adds	r1, r4, r5
 800a6e2:	428b      	cmp	r3, r1
 800a6e4:	bf01      	itttt	eq
 800a6e6:	6819      	ldreq	r1, [r3, #0]
 800a6e8:	685b      	ldreq	r3, [r3, #4]
 800a6ea:	1949      	addeq	r1, r1, r5
 800a6ec:	6021      	streq	r1, [r4, #0]
 800a6ee:	e7ed      	b.n	800a6cc <_free_r+0x20>
 800a6f0:	461a      	mov	r2, r3
 800a6f2:	685b      	ldr	r3, [r3, #4]
 800a6f4:	b10b      	cbz	r3, 800a6fa <_free_r+0x4e>
 800a6f6:	42a3      	cmp	r3, r4
 800a6f8:	d9fa      	bls.n	800a6f0 <_free_r+0x44>
 800a6fa:	6811      	ldr	r1, [r2, #0]
 800a6fc:	1855      	adds	r5, r2, r1
 800a6fe:	42a5      	cmp	r5, r4
 800a700:	d10b      	bne.n	800a71a <_free_r+0x6e>
 800a702:	6824      	ldr	r4, [r4, #0]
 800a704:	4421      	add	r1, r4
 800a706:	1854      	adds	r4, r2, r1
 800a708:	6011      	str	r1, [r2, #0]
 800a70a:	42a3      	cmp	r3, r4
 800a70c:	d1e0      	bne.n	800a6d0 <_free_r+0x24>
 800a70e:	681c      	ldr	r4, [r3, #0]
 800a710:	685b      	ldr	r3, [r3, #4]
 800a712:	4421      	add	r1, r4
 800a714:	6053      	str	r3, [r2, #4]
 800a716:	6011      	str	r1, [r2, #0]
 800a718:	e7da      	b.n	800a6d0 <_free_r+0x24>
 800a71a:	d902      	bls.n	800a722 <_free_r+0x76>
 800a71c:	230c      	movs	r3, #12
 800a71e:	6003      	str	r3, [r0, #0]
 800a720:	e7d6      	b.n	800a6d0 <_free_r+0x24>
 800a722:	6825      	ldr	r5, [r4, #0]
 800a724:	1961      	adds	r1, r4, r5
 800a726:	428b      	cmp	r3, r1
 800a728:	bf02      	ittt	eq
 800a72a:	6819      	ldreq	r1, [r3, #0]
 800a72c:	685b      	ldreq	r3, [r3, #4]
 800a72e:	1949      	addeq	r1, r1, r5
 800a730:	6063      	str	r3, [r4, #4]
 800a732:	bf08      	it	eq
 800a734:	6021      	streq	r1, [r4, #0]
 800a736:	6054      	str	r4, [r2, #4]
 800a738:	e7ca      	b.n	800a6d0 <_free_r+0x24>
 800a73a:	b003      	add	sp, #12
 800a73c:	bd30      	pop	{r4, r5, pc}
 800a73e:	bf00      	nop
 800a740:	200006bc 	.word	0x200006bc

0800a744 <sbrk_aligned>:
 800a744:	b570      	push	{r4, r5, r6, lr}
 800a746:	4e0e      	ldr	r6, [pc, #56]	; (800a780 <sbrk_aligned+0x3c>)
 800a748:	460c      	mov	r4, r1
 800a74a:	4605      	mov	r5, r0
 800a74c:	6831      	ldr	r1, [r6, #0]
 800a74e:	b911      	cbnz	r1, 800a756 <sbrk_aligned+0x12>
 800a750:	f000 f8bc 	bl	800a8cc <_sbrk_r>
 800a754:	6030      	str	r0, [r6, #0]
 800a756:	4621      	mov	r1, r4
 800a758:	4628      	mov	r0, r5
 800a75a:	f000 f8b7 	bl	800a8cc <_sbrk_r>
 800a75e:	1c43      	adds	r3, r0, #1
 800a760:	d00a      	beq.n	800a778 <sbrk_aligned+0x34>
 800a762:	1cc4      	adds	r4, r0, #3
 800a764:	f024 0403 	bic.w	r4, r4, #3
 800a768:	42a0      	cmp	r0, r4
 800a76a:	d007      	beq.n	800a77c <sbrk_aligned+0x38>
 800a76c:	1a21      	subs	r1, r4, r0
 800a76e:	4628      	mov	r0, r5
 800a770:	f000 f8ac 	bl	800a8cc <_sbrk_r>
 800a774:	3001      	adds	r0, #1
 800a776:	d101      	bne.n	800a77c <sbrk_aligned+0x38>
 800a778:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a77c:	4620      	mov	r0, r4
 800a77e:	bd70      	pop	{r4, r5, r6, pc}
 800a780:	200006c0 	.word	0x200006c0

0800a784 <_malloc_r>:
 800a784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a788:	1ccd      	adds	r5, r1, #3
 800a78a:	4607      	mov	r7, r0
 800a78c:	f025 0503 	bic.w	r5, r5, #3
 800a790:	3508      	adds	r5, #8
 800a792:	2d0c      	cmp	r5, #12
 800a794:	bf38      	it	cc
 800a796:	250c      	movcc	r5, #12
 800a798:	2d00      	cmp	r5, #0
 800a79a:	db01      	blt.n	800a7a0 <_malloc_r+0x1c>
 800a79c:	42a9      	cmp	r1, r5
 800a79e:	d905      	bls.n	800a7ac <_malloc_r+0x28>
 800a7a0:	230c      	movs	r3, #12
 800a7a2:	2600      	movs	r6, #0
 800a7a4:	603b      	str	r3, [r7, #0]
 800a7a6:	4630      	mov	r0, r6
 800a7a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7ac:	4e2e      	ldr	r6, [pc, #184]	; (800a868 <_malloc_r+0xe4>)
 800a7ae:	f000 f89d 	bl	800a8ec <__malloc_lock>
 800a7b2:	6833      	ldr	r3, [r6, #0]
 800a7b4:	461c      	mov	r4, r3
 800a7b6:	bb34      	cbnz	r4, 800a806 <_malloc_r+0x82>
 800a7b8:	4629      	mov	r1, r5
 800a7ba:	4638      	mov	r0, r7
 800a7bc:	f7ff ffc2 	bl	800a744 <sbrk_aligned>
 800a7c0:	1c43      	adds	r3, r0, #1
 800a7c2:	4604      	mov	r4, r0
 800a7c4:	d14d      	bne.n	800a862 <_malloc_r+0xde>
 800a7c6:	6834      	ldr	r4, [r6, #0]
 800a7c8:	4626      	mov	r6, r4
 800a7ca:	2e00      	cmp	r6, #0
 800a7cc:	d140      	bne.n	800a850 <_malloc_r+0xcc>
 800a7ce:	6823      	ldr	r3, [r4, #0]
 800a7d0:	4631      	mov	r1, r6
 800a7d2:	4638      	mov	r0, r7
 800a7d4:	eb04 0803 	add.w	r8, r4, r3
 800a7d8:	f000 f878 	bl	800a8cc <_sbrk_r>
 800a7dc:	4580      	cmp	r8, r0
 800a7de:	d13a      	bne.n	800a856 <_malloc_r+0xd2>
 800a7e0:	6821      	ldr	r1, [r4, #0]
 800a7e2:	3503      	adds	r5, #3
 800a7e4:	4638      	mov	r0, r7
 800a7e6:	1a6d      	subs	r5, r5, r1
 800a7e8:	f025 0503 	bic.w	r5, r5, #3
 800a7ec:	3508      	adds	r5, #8
 800a7ee:	2d0c      	cmp	r5, #12
 800a7f0:	bf38      	it	cc
 800a7f2:	250c      	movcc	r5, #12
 800a7f4:	4629      	mov	r1, r5
 800a7f6:	f7ff ffa5 	bl	800a744 <sbrk_aligned>
 800a7fa:	3001      	adds	r0, #1
 800a7fc:	d02b      	beq.n	800a856 <_malloc_r+0xd2>
 800a7fe:	6823      	ldr	r3, [r4, #0]
 800a800:	442b      	add	r3, r5
 800a802:	6023      	str	r3, [r4, #0]
 800a804:	e00e      	b.n	800a824 <_malloc_r+0xa0>
 800a806:	6822      	ldr	r2, [r4, #0]
 800a808:	1b52      	subs	r2, r2, r5
 800a80a:	d41e      	bmi.n	800a84a <_malloc_r+0xc6>
 800a80c:	2a0b      	cmp	r2, #11
 800a80e:	d916      	bls.n	800a83e <_malloc_r+0xba>
 800a810:	1961      	adds	r1, r4, r5
 800a812:	42a3      	cmp	r3, r4
 800a814:	6025      	str	r5, [r4, #0]
 800a816:	bf18      	it	ne
 800a818:	6059      	strne	r1, [r3, #4]
 800a81a:	6863      	ldr	r3, [r4, #4]
 800a81c:	bf08      	it	eq
 800a81e:	6031      	streq	r1, [r6, #0]
 800a820:	5162      	str	r2, [r4, r5]
 800a822:	604b      	str	r3, [r1, #4]
 800a824:	f104 060b 	add.w	r6, r4, #11
 800a828:	4638      	mov	r0, r7
 800a82a:	f000 f865 	bl	800a8f8 <__malloc_unlock>
 800a82e:	1d23      	adds	r3, r4, #4
 800a830:	f026 0607 	bic.w	r6, r6, #7
 800a834:	1af2      	subs	r2, r6, r3
 800a836:	d0b6      	beq.n	800a7a6 <_malloc_r+0x22>
 800a838:	1b9b      	subs	r3, r3, r6
 800a83a:	50a3      	str	r3, [r4, r2]
 800a83c:	e7b3      	b.n	800a7a6 <_malloc_r+0x22>
 800a83e:	6862      	ldr	r2, [r4, #4]
 800a840:	42a3      	cmp	r3, r4
 800a842:	bf0c      	ite	eq
 800a844:	6032      	streq	r2, [r6, #0]
 800a846:	605a      	strne	r2, [r3, #4]
 800a848:	e7ec      	b.n	800a824 <_malloc_r+0xa0>
 800a84a:	4623      	mov	r3, r4
 800a84c:	6864      	ldr	r4, [r4, #4]
 800a84e:	e7b2      	b.n	800a7b6 <_malloc_r+0x32>
 800a850:	4634      	mov	r4, r6
 800a852:	6876      	ldr	r6, [r6, #4]
 800a854:	e7b9      	b.n	800a7ca <_malloc_r+0x46>
 800a856:	230c      	movs	r3, #12
 800a858:	4638      	mov	r0, r7
 800a85a:	603b      	str	r3, [r7, #0]
 800a85c:	f000 f84c 	bl	800a8f8 <__malloc_unlock>
 800a860:	e7a1      	b.n	800a7a6 <_malloc_r+0x22>
 800a862:	6025      	str	r5, [r4, #0]
 800a864:	e7de      	b.n	800a824 <_malloc_r+0xa0>
 800a866:	bf00      	nop
 800a868:	200006bc 	.word	0x200006bc

0800a86c <_realloc_r>:
 800a86c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a870:	4680      	mov	r8, r0
 800a872:	4614      	mov	r4, r2
 800a874:	460e      	mov	r6, r1
 800a876:	b921      	cbnz	r1, 800a882 <_realloc_r+0x16>
 800a878:	4611      	mov	r1, r2
 800a87a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a87e:	f7ff bf81 	b.w	800a784 <_malloc_r>
 800a882:	b92a      	cbnz	r2, 800a890 <_realloc_r+0x24>
 800a884:	4625      	mov	r5, r4
 800a886:	f7ff ff11 	bl	800a6ac <_free_r>
 800a88a:	4628      	mov	r0, r5
 800a88c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a890:	f000 f838 	bl	800a904 <_malloc_usable_size_r>
 800a894:	4284      	cmp	r4, r0
 800a896:	4607      	mov	r7, r0
 800a898:	d802      	bhi.n	800a8a0 <_realloc_r+0x34>
 800a89a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a89e:	d812      	bhi.n	800a8c6 <_realloc_r+0x5a>
 800a8a0:	4621      	mov	r1, r4
 800a8a2:	4640      	mov	r0, r8
 800a8a4:	f7ff ff6e 	bl	800a784 <_malloc_r>
 800a8a8:	4605      	mov	r5, r0
 800a8aa:	2800      	cmp	r0, #0
 800a8ac:	d0ed      	beq.n	800a88a <_realloc_r+0x1e>
 800a8ae:	42bc      	cmp	r4, r7
 800a8b0:	4622      	mov	r2, r4
 800a8b2:	4631      	mov	r1, r6
 800a8b4:	bf28      	it	cs
 800a8b6:	463a      	movcs	r2, r7
 800a8b8:	f7ff fed0 	bl	800a65c <memcpy>
 800a8bc:	4631      	mov	r1, r6
 800a8be:	4640      	mov	r0, r8
 800a8c0:	f7ff fef4 	bl	800a6ac <_free_r>
 800a8c4:	e7e1      	b.n	800a88a <_realloc_r+0x1e>
 800a8c6:	4635      	mov	r5, r6
 800a8c8:	e7df      	b.n	800a88a <_realloc_r+0x1e>
	...

0800a8cc <_sbrk_r>:
 800a8cc:	b538      	push	{r3, r4, r5, lr}
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	4d05      	ldr	r5, [pc, #20]	; (800a8e8 <_sbrk_r+0x1c>)
 800a8d2:	4604      	mov	r4, r0
 800a8d4:	4608      	mov	r0, r1
 800a8d6:	602b      	str	r3, [r5, #0]
 800a8d8:	f7f6 fa98 	bl	8000e0c <_sbrk>
 800a8dc:	1c43      	adds	r3, r0, #1
 800a8de:	d102      	bne.n	800a8e6 <_sbrk_r+0x1a>
 800a8e0:	682b      	ldr	r3, [r5, #0]
 800a8e2:	b103      	cbz	r3, 800a8e6 <_sbrk_r+0x1a>
 800a8e4:	6023      	str	r3, [r4, #0]
 800a8e6:	bd38      	pop	{r3, r4, r5, pc}
 800a8e8:	200006c4 	.word	0x200006c4

0800a8ec <__malloc_lock>:
 800a8ec:	4801      	ldr	r0, [pc, #4]	; (800a8f4 <__malloc_lock+0x8>)
 800a8ee:	f000 b811 	b.w	800a914 <__retarget_lock_acquire_recursive>
 800a8f2:	bf00      	nop
 800a8f4:	200006c8 	.word	0x200006c8

0800a8f8 <__malloc_unlock>:
 800a8f8:	4801      	ldr	r0, [pc, #4]	; (800a900 <__malloc_unlock+0x8>)
 800a8fa:	f000 b80c 	b.w	800a916 <__retarget_lock_release_recursive>
 800a8fe:	bf00      	nop
 800a900:	200006c8 	.word	0x200006c8

0800a904 <_malloc_usable_size_r>:
 800a904:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a908:	1f18      	subs	r0, r3, #4
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	bfbc      	itt	lt
 800a90e:	580b      	ldrlt	r3, [r1, r0]
 800a910:	18c0      	addlt	r0, r0, r3
 800a912:	4770      	bx	lr

0800a914 <__retarget_lock_acquire_recursive>:
 800a914:	4770      	bx	lr

0800a916 <__retarget_lock_release_recursive>:
 800a916:	4770      	bx	lr

0800a918 <_init>:
 800a918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a91a:	bf00      	nop
 800a91c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a91e:	bc08      	pop	{r3}
 800a920:	469e      	mov	lr, r3
 800a922:	4770      	bx	lr

0800a924 <_fini>:
 800a924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a926:	bf00      	nop
 800a928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a92a:	bc08      	pop	{r3}
 800a92c:	469e      	mov	lr, r3
 800a92e:	4770      	bx	lr
